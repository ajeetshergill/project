{"mappings":"AAcI,MAAMA,qBAAiB,iBACjBC,mBAMN,MAAIC,EAAaC,iBAAyB,oBAAuC,eACtDC,EAAA,WAC3BC,QAAeC,GAAAC,WAAiBL,GAAAM,IAAAJ,GAChC,IAAIK,EACA,MAGW,EAEfC,QAAmBL,EAAAM,MACtBC,EAAAF,EAAAG,OAAAH,EAAAI,OAAA,wCAIQF,EAAAG,OACHC,EAAGP,EAAsBG,EAAAK,MACvBC,QAAQC,IAAK,wCACbV,WAGCW,mCAQMC,SAAAC,eAAkB,oBACxBC,GAAAL,QAAmBM,MAAG,4CACvBC,EAAaF,EAAAG,MAEjB,SADUD,EAAAE,WAAAC,cACTH,iBAIGI,kBACAC,EAAkB,GAAAC,EAAgB,IAMpB,KAAdD,IAAcA,EAAAV,4BACjB,IAAAW,EAAAC,SAAAD,QAAA9B,oBAED,IAIGgC,GAAA,EAOH,OAAAH,GAAcA,EAAAE,OAHK,GAItBd,QAAAM,MAAA,uCAGcS,IAOgCF,EAAAG,SAAAJ,GAAAG,GAAA,EACvCf,QAAuCM,MAAA,iDACiFS,kBAGlHE,mBAAiBC,EAAAC,EAAsCC,EAAAC,aAM3BrC,EAAYC,iBAAQ,oBAAA,eAAIC,EAAY,WAAcC,QAAYC,GAAAC,WAAU,IAAAL,KAAAE,kBAAGoC,EAAA,IAAAC,MACvGC,EAAAC,EAAYC,GAAS,CAC3BJ,EAAMK,WAENL,EAAgBM,UACZN,EAAAO,gBAEAC,EAASC,EAAEC,GAAS,CACpBV,EAAYW,WACZX,EAAUY,aACVZ,EAAUa,cAEVC,EAAiB,GAAAX,KAASD,KAAUE,IAElChC,EAAK,CACR2C,cAAYnB,EACfoB,YAAcnB,EACdoB,UAAenB,EAClBoB,WAAAnB,EAKFoB,SAAAL,WAVM,GAAAN,KAAAC,KAAAC","sources":["src/js/couponsFirebase.js"],"sourcesContent":["/**\r\n * START\r\n * Functions needed for Coupon Code\r\n */\r\n/**\r\n * Returns Array of Coupon codes in the category - Magazine if they're active\r\n * else returns empty array\r\n */\r\nconst COUPON_CODES_ACTIVE = true;\r\nasync function getCouponCodesDB() {\r\n    if (!COUPON_CODES_ACTIVE) {\r\n        console.log(`dev:COUPON_CODES_ACTIVE is not true`);\r\n        return;\r\n    }\r\n    const collectionName = TEST_ENVIRONMENT ? 'test_coupon_codes' : 'coupon_codes';\r\n    const docName = 'magazine';\r\n    const docRef = await db.collection(collectionName).doc(docName);\r\n    let coupon_codes = [];\r\n    let isCodeActive = false;\r\n\r\n    let docData = await docRef.get();\r\n    let couponData = docData.exists ? docData.data() : 'document data does not exist';\r\n    // console.log(couponData);\r\n    isCodeActive = couponData.active;\r\n    if (isCodeActive) {\r\n        coupon_codes = couponData.codes;\r\n        // console.log(\"coupon_codes:\", coupon_codes);\r\n    } else {\r\n        console.log(`${docName} coupon codes are not active`);\r\n    }\r\n    return coupon_codes;\r\n}\r\n// getCouponCodesDB();\r\n\r\n\r\nfunction getUserEnteredCouponCode() {\r\n    if (!COUPON_CODES_ACTIVE) {\r\n        console.log(`dev:COUPON_CODES_ACTIVE is not true`);\r\n        return;\r\n    }\r\n    const codeInput = document.getElementById(\"ibat-coupon-code\");\r\n    if (!codeInput) {\r\n        console.error(`dev:coupon input field doesn't exist`);\r\n    }\r\n    let userEnteredCouponCode = codeInput.value;\r\n    userEnteredCouponCode = userEnteredCouponCode.toString().toLowerCase();\r\n    return userEnteredCouponCode;\r\n}\r\n\r\nasync function isValidCouponCode(userEnteredCode = '', codeArray = []) {\r\n    if (!COUPON_CODES_ACTIVE) {\r\n        console.log(`dev:COUPON_CODES_ACTIVE is not true`);\r\n        return;\r\n    }\r\n    if (userEnteredCode === '') {\r\n        userEnteredCode = getUserEnteredCouponCode()\r\n    }\r\n    if (codeArray.length === 0) {\r\n        codeArray = await getCouponCodesDB();\r\n    }\r\n    let isValid = false;\r\n    const MIN_CODE_LENGTH = 5;\r\n    if (!userEnteredCode || userEnteredCode.length < MIN_CODE_LENGTH) {\r\n        console.error(`dev: coupon code entered is invalid`);\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n     * Checks if the Coupon codes exists in DB as well\r\n     * if it exists then isValid is changed to true\r\n     * else error in console\r\n     */\r\n    if (codeArray.includes(userEnteredCode)) {\r\n        isValid = true;\r\n    } else {\r\n        console.error(`dev: coupon code entered is not present in DB`);\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\n\r\nasync function updateCouponUserDB(txID, walletAddress, BNBAmount, IBATAmount) {\r\n    if (!COUPON_CODES_ACTIVE) {\r\n        console.log(`dev:COUPON_CODES_ACTIVE is not true`);\r\n        return;\r\n    }\r\n\r\n    try {\r\n        // console.log(`====================`);\r\n        // console.log(`updateCouponUserDB()`);\r\n        // console.log(`txID =${txID}\\nwalletAddress = ${walletAddress}\\nBNBAmount = ${BNBAmount}\\nIBATAmount = ${IBATAmount}`);\r\n        // console.log(`====================`);\r\n\r\n        const collectionName = TEST_ENVIRONMENT ? 'test_coupon_users' : 'coupon_users';\r\n        const docName = 'magazine';\r\n        const docRef = await db.collection(`/${collectionName}/${docName}/transactions`);\r\n\r\n        const currentDate = new Date();\r\n        const [month, day, year] = [currentDate.getMonth(), currentDate.getDate(), currentDate.getFullYear()];\r\n        const [hour, minutes, seconds] = [currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds()];\r\n        const userFullDate = `${day}-${month}-${year}`;\r\n        const userFullTime = `${hour}-${minutes}-${seconds}`;\r\n\r\n        const couponData = {\r\n            transactionID: txID,\r\n            userAddress: walletAddress,\r\n            bnbAmount: BNBAmount,\r\n            ibatAmount: IBATAmount,\r\n            userDate: userFullDate,\r\n            userTime: userFullTime,\r\n            userTimestamp: currentDate,\r\n            serverTimestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        };\r\n        docRef.add(couponData);\r\n    } catch (errorDB) {\r\n        console.error(errorDB);\r\n        console.error(`dev:updateCouponUserDB() failed`);\r\n    }\r\n}\r\n/**\r\n * END\r\n * Functions needed for Coupon Code\r\n */"],"names":["COUPON_CODES_ACTIVE","getCouponCodesDB","collectionName","TEST_ENVIRONMENT","docName","docRef","db","collection","doc","coupon_codes","docData","get","couponData","exists","data","active","isCodeActive","codes","console","log","getUserEnteredCouponCode","document","getElementById","codeInput","error","userEnteredCouponCode","value","toString","toLowerCase","isValidCouponCode","userEnteredCode","codeArray","length","isValid","includes","updateCouponUserDB","txID","walletAddress","BNBAmount","IBATAmount","currentDate","Date","month","day","year","getMonth","getDate","getFullYear","hour","minutes","seconds","getHours","getMinutes","getSeconds","userFullDate","transactionID","userAddress","bnbAmount","ibatAmount","userDate"],"version":3,"file":"index.91968050.js.map"}