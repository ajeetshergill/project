{"mappings":"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","sources":["src/js/devWeb3.js"],"sourcesContent":["window.onload = async function () {\r\n    populateAmountRaisedinHTMLDB();\r\n    /**\r\n     * - if user is already connected - but only page was refreshed - atlogin()\r\n    */\r\n\r\n    if (await isWeb3Installed()) {\r\n        WEB3_INSTALLED = true;\r\n        console.log(`dev:onload`);\r\n        console.log(`dev: web3 installed  - checking if user is connected upon refreshing`);\r\n        try {\r\n            console.log(`dev: onload - enabling web3`);\r\n            await Moralis.enableWeb3();\r\n            console.log(`dev: onload - enabled web3`);\r\n        } catch (ee) {\r\n            console.error(ee);\r\n            console.error(`dev: onload - failed to enable web3`);\r\n        }\r\n        if (isUserConnected()) {\r\n            console.log(`dev: Page-refreshed - User already connected`);\r\n            login();\r\n        }\r\n        console.log(`dev: Page-refreshed - User not connected`);\r\n    } else if (!WEB3_INSTALLED && await isUserConnected()) {\r\n        try {\r\n            console.log(`dev: onload - enabling web3`);\r\n            await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n            console.log(`dev: onload - enabled web3`);\r\n        } catch (ee) {\r\n            console.error(ee);\r\n            console.error(`dev: onload - failed to enable web3`);\r\n        }\r\n        if (isUserConnected()) {\r\n            console.log(`dev: Page-refreshed - User already connected`);\r\n            login('walletconnect')\r\n        }\r\n        console.log(`dev: Page-refreshed - User not connected`);\r\n    }\r\n\r\n\r\n    // this timeout is here coz when switching chain - the function fails until recalled so a quick fix is calling it again after some time\r\n    // setTimeout(() => {\r\n    //     populateAmountRaisedinHTML();\r\n    // }, 5000);\r\n\r\n};\r\n\r\n\r\n/**\r\n * *******************************    WEB3    *******************************\r\n */\r\n// const TEST_ENVIRONMENT = true;\r\nconst TEST_ENVIRONMENT = false;\r\n\r\n\r\nconst REFER_CONTRACT_ADDRESS_TESTNET = '0xfe2E124FE1418419A9efd8Ba987Fa1769D506c8a';\r\n// if TEST_ENVIRONMENT is false then use mainnet contract else testnet contract\r\nconst REFER_CONTRACT_ADDRESS_MAINNET = '0x5832E385f633b30519B3ECaDE3C5eD3d9881cf58'; //mainnet contract\r\n\r\nconst DEPLOYED_CONTRACT_ADDRESS = TEST_ENVIRONMENT ? REFER_CONTRACT_ADDRESS_TESTNET : REFER_CONTRACT_ADDRESS_MAINNET;\r\nconsole.log(`Deployed Presale Contract is ${DEPLOYED_CONTRACT_ADDRESS}`);\r\n\r\nconst CONFIRMATIONS_ON_BSC = 5;\r\nlet WEB3_INSTALLED = false;\r\n// paid-account-joshi-sir\r\nconst serverUrl_Testnet = \"https://gusm6vrpbwtk.usemoralis.com:2053/server\"; //BSC testnet\r\nconst appId_Testnet = \"glRYjrZo9XjLE2MPc7sWgzc4PyoFs3RbmyoNiPbf\"; //BSC testnet\r\nlet serverUrl = \"https://gb6gwydcjjw6.usemoralis.com:2053/server\"; //BSC mainnet\r\nlet appId = \"Zq3s8magh8mlppfXIGSHZRdLj49LlCnIaqs2mD2U\"; //BSC mainnet\r\n\r\nlet currentChainIdHex; //default chain set to ETH\r\ntry {\r\n    // if (WEB3_INSTALLED) {\r\n    if (TEST_ENVIRONMENT) {\r\n        console.info(`starting server - testnet `);\r\n        serverUrl = \"https://gusm6vrpbwtk.usemoralis.com:2053/server\"; //BSC testnet\r\n        appId = \"glRYjrZo9XjLE2MPc7sWgzc4PyoFs3RbmyoNiPbf\"; //BSC testnet\r\n        Moralis.start({ serverUrl, appId });\r\n    } else {\r\n        console.info(`starting server - mainnet `);\r\n        Moralis.start({ serverUrl, appId });\r\n    }\r\n    // } else {\r\n    //     console.error(`dev: wallet/web3 not installed`);\r\n    // }\r\n\r\n} catch (error) {\r\n    console.error(`Server failed to start -ln-34`);\r\n    console.log(error);\r\n}\r\n\r\n\r\nconst walletOptions = document.getElementById(\"wallet-options\");\r\nconst loginBtn = document.getElementById(\"web3-login-mm\");\r\nconst logoutBtn = document.getElementById(\"web3-logout\");\r\nconst buyBtn = document.getElementById(\"buy_btn\");\r\nconst showTokenBtn = document.getElementById(\"web3-tokens\");\r\n\r\nconst BscChainIdMain = 0x38; //Bsc Mainnet ID\r\n// const BscChainIdTest = '0x61'; //Bsc Testnet ID\r\nconst BscChainIdTest = 97; //Bsc Testnet ID\r\n\r\nconst showAddress = document.getElementById(\"web3-wallet-address\");\r\n\r\n// let web3 = new Web3(Moralis.provider || Web3.givenProvider);\r\nconst NODE_URL_TESTNET = \"https://speedy-nodes-nyc.moralis.io/7569a2c3fc822716349963c8/bsc/testnet\";\r\nconst NODE_URL_MAINNET = \"https://speedy-nodes-nyc.moralis.io/7569a2c3fc822716349963c8/bsc/mainnet\";\r\n\r\n// let provider = '';\r\n// if (TEST_ENVIRONMENT) {\r\n//     provider = new Web3.providers.HttpProvider(NODE_URL_TESTNET);\r\n// } else {\r\n//     provider = new Web3.providers.HttpProvider(NODE_URL_MAINNET);\r\n// }\r\n\r\n\r\nconst userEnteredPassword = document.querySelector('#presale-password');\r\n\r\nfunction atLogin() {\r\n    /**\r\n    * 1. show referral box - toggle visibility of it\r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    const URL_Prefix = 'https://presale.battleinfinity.io/?refercode='\r\n    let USER_RefferalLink = `${URL_Prefix}${userAddress}`;\r\n    // let USER_RefferalLink = `url/${userAddress}`;\r\n\r\n    /**\r\n     * If there is a presale password field - only then \r\n     * presalePasswordEntered = true;\r\n     */\r\n    if (!userEnteredPassword) {\r\n        presalePasswordEntered = true;\r\n    }\r\n\r\n    /**\r\n     * Manages the left to make sure that weird zoomed out page effect doesn't happen\r\n     */\r\n    manageTooltipWidth()\r\n    toggleConnectStatus();\r\n    populateUserAddress(getUserWalletAddress(), true);\r\n    const secondLoginBtn = document.querySelector('#second-login-btn')\r\n    disableButton(secondLoginBtn)\r\n    secondLoginBtn.setAttribute(\"for\", \"\");\r\n\r\n    // if (userEnteredPassword && presalePasswordEntered) {\r\n    try {\r\n        console.log(`start - populateReferralLinkinHTML ..`);\r\n        populateReferralLinkinHTML(USER_RefferalLink);\r\n        console.log(`done - populateReferralLinkinHTML `);\r\n    } catch (error) {\r\n        console.error(`failed - populateReferralLinkinHTML`);\r\n    }\r\n    try {\r\n        console.log(`start - populateReferrerinHTML ..`);\r\n        populateReferrerinHTML(userAddress);\r\n        console.log(`done - populateReferrerinHTML`);\r\n    } catch (error) {\r\n        console.error(`failed - populateReferrerinHTML`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUserReferralComissions`);\r\n        populateUserReferralComissions(userAddress);\r\n        console.log(`done - populateUserReferralComissions`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUserReferralComissions`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUserReferralsCount`);\r\n        populateUserReferralsCount(userAddress);\r\n        console.log(`done - populateUserReferralsCount`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUserReferralsCount`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUsersInvestments`);\r\n        populateUsersInvestments(userAddress);\r\n        console.log(`done - populateUsersInvestments`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUsersInvestments`);\r\n    }\r\n    // each time a user logs in - they fetch value of BNBRaised and update the DB\r\n    try {\r\n        updateBNBRaised()\r\n    } catch (error) {\r\n        console.error(`failed - updateBNBRaised - atlogin`);\r\n    }\r\n    /**\r\n     * Test\r\n     // populateUserReferralComissions('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n     // populateUserReferralsCount('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n     */\r\n    // }\r\n    // toggles the visibility of connect & disconnect button\r\n    if (isUserConnected()) toggleBtnVisibility(true);\r\n\r\n}\r\n\r\nasync function updateBNBRaised() {\r\n    const HARDCAP = +16500;\r\n    let raisedAmount = await getTotalBNBAmount(); //which will be 'logged out' if user is logged out\r\n    raisedAmount = +raisedAmount.toFixed(2);\r\n    const amountBNB = ''\r\n    let raisedAmountPercentage = '';\r\n    try {\r\n        raisedAmountPercentage = percentageOfBNBRaised(raisedAmount, HARDCAP);\r\n    } catch (error) {\r\n        console.error(`dev: percentageOfBNBRaised() issue`);\r\n    }\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    console.log(`raisedAmountPercentage = ${raisedAmountPercentage}`);\r\n    updateRaisedBNBinDB(raisedAmount, raisedAmountPercentage);\r\n}\r\n\r\n/**\r\n * Manages the left to make sure that weird zoomed out page effect doesn't happen\r\n */\r\nfunction manageTooltipWidth() {\r\n    const toolTip = document.querySelector('#web3-wallet-address');\r\n    if (!toolTip) {\r\n        console.error(`tooltips missing`);\r\n        return;\r\n    }\r\n    if (isUserConnected()) {\r\n        console.log('setting left to : 0');\r\n        showAddress.style.setProperty(\"--custom-tooltip-left\", \"0px\");\r\n        return;\r\n    }\r\n    console.log('setting left to : negative');\r\n    showAddress.style.setProperty(\"--custom-tooltip-left\", \"-100px\");\r\n}\r\n\r\n// async function addNetwork(chainId) {\r\n//     const BscChainId = chainId; //Bsc Testnet ID\r\n//     const chainName = \"Testnet BSC\";\r\n//     const currencyName = \"test BNB\";\r\n//     const currencySymbol = \"tBNB\";\r\n//     const rpcUrl = \"https://speedy-nodes-nyc.moralis.io/d633c685eb50e4bb5f7bdcf8/bsc/testnet\";\r\n//     const blockExplorerUrl = \"https://testnet.bscscan.com/\";\r\n//     await Moralis.addNetwork(\r\n//         BscChainId,\r\n//         chainName,\r\n//         currencyName,\r\n//         currencySymbol,\r\n//         rpcUrl,\r\n//         blockExplorerUrl\r\n//     );\r\n// }\r\nasync function addNetwork(chainId) {\r\n    const BscChainId = chainId;\r\n    const chainName = TEST_ENVIRONMENT ? \"BNB Testnet\" : \"BNB Smart Chain Mainnet\";\r\n    const currencyName = TEST_ENVIRONMENT ? \"tBNB\" : \"BNB\";\r\n    const currencySymbol = TEST_ENVIRONMENT ? \"tBNB\" : \"BNB\";;\r\n    const rpcUrl = TEST_ENVIRONMENT ? NODE_URL_TESTNET : NODE_URL_MAINNET;\r\n    const blockExplorerUrl = TEST_ENVIRONMENT ? \"https://testnet.bscscan.com/\" : \"https://bscscan.com/\";\r\n    console.log('BscChainId-chainName-rpcUrl-blockexplorer');\r\n    console.log(`${BscChainId}-${chainName}-${rpcUrl}-${blockExplorerUrl}`);\r\n    await Moralis.addNetwork(\r\n        BscChainId,\r\n        chainName,\r\n        currencyName,\r\n        currencySymbol,\r\n        rpcUrl,\r\n        blockExplorerUrl\r\n    );\r\n}\r\n\r\nasync function switchAndAdd(toChainId = '0x61') {\r\n    console.log(`switchAndAdd - toChainid`);\r\n    console.log(toChainId);\r\n    try {\r\n        await switchNetwork(toChainId);\r\n    } catch (er) {\r\n        await addNetwork(toChainId);\r\n    }\r\n}\r\nasync function switchNetwork(toChainId = '0x61') {\r\n    currentChainIdHex = await Moralis.switchNetwork(toChainId);\r\n}\r\n\r\nasync function login(provider) {\r\n\r\n    let BSC_Chain = TEST_ENVIRONMENT ? BscChainIdTest : BscChainIdMain;\r\n    let user = Moralis.User.current();\r\n\r\n    if (!user) {\r\n        console.log(`dev: login() - Provider :${provider}`);\r\n\r\n        if (provider === 'walletconnect') {\r\n            // try {\r\n            //     await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n            // } catch (error) {\r\n            //     console.error(`dev: enableweb3 walletconnect failed`);\r\n            // }\r\n            console.info(`Authenticating with WalletConnect`);\r\n            try {\r\n                /**\r\n                 * in case the user scans but doesn't approve the transaction -\r\n                 * the Moralis goes in a loading state makeing it hard to connect with WC again\r\n                 **/\r\n                if (Moralis.isEnablingWeb3) await Moralis.deactivateWeb3();\r\n\r\n\r\n                /**\r\n                 * using chainId parameter - the trust wallet(walletconnect) uses BSC mainnet chain (56) by default\r\n                 * didn't do this for testnet coz trustwallet doesn't support BSC testnet\r\n                 */\r\n                if (TEST_ENVIRONMENT) {\r\n                    user = await Moralis.authenticate({ provider: \"walletconnect\", signingMessage: \"Battle Infinity Authentication: WalletConnect\" });\r\n                } else {\r\n                    user = await Moralis.authenticate({ provider: \"walletconnect\", chainId: BSC_Chain, signingMessage: \"Battle Infinity Authentication: WalletConnect\" });\r\n                }\r\n                // console.info(user);\r\n                // console.info(`dev:Authentication Success - Walletconnect - login()`);\r\n            } catch (wcerror) {\r\n                console.error(wcerror);\r\n                console.error(`dev:Authentication Failed - Walletconnect - login()`);\r\n            }\r\n        } else {\r\n            console.info(`Authenticating with MetaMask`);\r\n            try {\r\n                /**\r\n                 * Get the user's chain\r\n                 */\r\n                currentChainIdHex = await Moralis.getChainId();\r\n                console.log(`Current chain -${currentChainIdHex}`);\r\n                console.log(`BSC chain -${BSC_Chain}`);\r\n                /**\r\n                 * if the user isn't on BSC_chain then switch to the correct chain and then authenticate\r\n                 * else if the user is on BSC_Chain then authenticate\r\n                 */\r\n                if (currentChainIdHex !== BSC_Chain) {\r\n                    // console.log(`Connecting`);\r\n                    console.log(`NOT - Connecting`);\r\n                    console.log(`Current chain - Bsc`);\r\n                    console.log(`${currentChainIdHex} - ${BSC_Chain}`);\r\n                    try {\r\n                        console.log(`dev: login metamask - enabling web3 for switching chain`);\r\n                        await Moralis.enableWeb3();\r\n                        console.log(`dev: login metamask - enabled web3 for switching chain`);\r\n                    } catch (ee) {\r\n                        console.error(ee);\r\n                        console.error(`dev: login metamask - failed to enable web3 for switching chain`);\r\n                    }\r\n                    await switchAndAdd(BSC_Chain);\r\n                }\r\n\r\n                user = await Moralis.authenticate({ signingMessage: \"Battle Infinity Authentication\" });\r\n                // console.info(user);\r\n                // console.info(`dev:Authentication Success - metamask - login()`);\r\n                try {\r\n                    if (!TEST_ENVIRONMENT) hitDataLayer(getUserWalletAddress())\r\n                } catch (error) {\r\n                    console.error(`dev:couldn't hit data layer`);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n                console.error(`dev:Authentication Failed - MetaMask`);\r\n            }\r\n        }\r\n    }\r\n\r\n    try {\r\n        currentChainIdHex = await Moralis.getChainId();\r\n        console.info(`dev:getChainId() succeded - login()`);\r\n        console.info(`dev: current chain ${currentChainIdHex} - login()`);\r\n    } catch (chainIdError) {\r\n        console.error(chainIdError);\r\n        console.error(`dev:getChainId() Failed - login()`);\r\n    }\r\n\r\n    if (isUserConnected()) {\r\n        console.log(`IBAT Authentication - userconnected`);\r\n        atLogin();\r\n        showAddress.dataset.tip = user.get(\"ethAddress\");\r\n        showAddress.style.setProperty(\"--custom-tooltip-left\", \"0px\");\r\n    }\r\n}\r\n\r\n\r\nfunction getUserWalletAddress() {\r\n    let err = 'Wallet not connected';\r\n    if (!isUserConnected())\r\n        return err;\r\n\r\n    return Moralis.User.current().get(\"ethAddress\");\r\n}\r\n\r\nfunction isUserConnected() {\r\n    let user = Moralis.User.current();\r\n    return user ? true : false;\r\n}\r\n\r\nasync function logOut() {\r\n    try {\r\n        await updateBNBRaised()\r\n    } catch (error) {\r\n        console.error(`dev:failed - updateBNBRaised - logOut()`);\r\n    }\r\n    try {\r\n        await Moralis.deactivateWeb3();\r\n    } catch (error) {\r\n        console.error(`dev:failed Moralis.deactivateWeb3();`);\r\n    }\r\n    await Moralis.User.logOut();\r\n    console.log(\"logged out\");\r\n    // toggleBtnVisibility(false);\r\n    // showAddress.dataset.tip = 'Wallet not connected';\r\n    await atLogout();\r\n    return;\r\n}\r\n\r\nasync function atLogout() {\r\n    /**\r\n     * 1. hide referral box\r\n     */\r\n    // need to \r\n    if (userEnteredPassword) presalePasswordEntered = false;\r\n\r\n    try {\r\n        populateReferralLinkinHTML('Wallet not connected');\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateReferrerinHTML('Wallet not connected')\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUserReferralComissions('0');\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUserReferralsCount(0);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUsersInvestments('0');\r\n    } catch (error) {\r\n        console.error(`failed - populateUsersInvestments`);\r\n    }\r\n\r\n\r\n    manageTooltipWidth();\r\n    toggleConnectStatus();\r\n    populateUserAddress('not connected', false);\r\n    const secondLoginBtn = document.querySelector('#second-login-btn')\r\n    enableButton(secondLoginBtn)\r\n    secondLoginBtn.setAttribute(\"for\", \"wallets\");\r\n\r\n    // hiding addreferrer btn when logging out\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    setRefferrerBtn && setRefferrerBtn.classList.add('hidden')\r\n\r\n    toggleBtnVisibility(false);\r\n    showAddress.dataset.tip = 'Wallet not connected';\r\n    try {\r\n        setPresalePassword && setPresalePassword();\r\n    } catch (error) {\r\n        console.error(`dev:setPresalePassword(); not defined`);\r\n        // console.error(error);\r\n    }\r\n    try {\r\n        showArenaLock && showArenaLock(true);\r\n    } catch (error) {\r\n        console.error(`dev:showArenaLock(); not defined`);\r\n        // console.error(error);\r\n    }\r\n    const addReferrerBtn = document.getElementById('add-referrer-btn');\r\n    const addReferrerInput = document.getElementById('add-referrer-address');\r\n    enableButton(addReferrerBtn);\r\n    enableButton(addReferrerInput);\r\n\r\n    // try {\r\n    //     console.log(`dev: atlogout - enabling web3`);\r\n    //     await Moralis.enableWeb3();\r\n    //     console.log(`dev: atlogout - enabled web3`);\r\n    // } catch (ee) {\r\n    //     console.error(ee);\r\n    //     console.error(`dev: atlogout - failed to enable web3`);\r\n    // }\r\n}\r\n\r\n\r\n// async function getBalance(chainId, address) {\r\n//     const tokenList = document.getElementById('token-list');\r\n//     currentChainIdHex = await Moralis.getChainId();\r\n//     let currentUser = Moralis.User.current();\r\n//     let currentUserAddress = currentUser.get(\"ethAddress\");\r\n//     const options = { chain: chainId || currentChainIdHex || '0x38', address: address || currentUserAddress || \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" };\r\n//     // console.log(`getBalance called with \\n chaidId ${options.chain} and \\n of address: ${options.address}`);\r\n//     // const options = { chain: 'eth', address: \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" } // test address from Etherscan\r\n//     // const options = { chain: 'bsc', address: \"0x60913d3fE722bFE425247D7673D8bdbDA56D1e02\" } // test address from BSC (bscscan)\r\n\r\n//     const nativeBal = await Moralis.Web3API.account.getNativeBalance(options);\r\n\r\n//     if (tokenList) tokenList.innerHTML = `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto mt-2\"><span class=\"w-1/2 text-center\">${HEX_TO_CHAIN_DETAILS[currentChainIdHex].nativeToken}</span><span class=\"w-1/2 text-left\">${web3.utils.fromWei(nativeBal.balance)}</span></li>`\r\n\r\n//     const balances = await Moralis.Web3API.account.getTokenBalances(options);\r\n\r\n//     if (balances.length) {\r\n//         balances.forEach(token => {\r\n//             // console.log(`not - ${token.symbol}`);\r\n//             if (token.symbol == 'USDC' || token.symbol == 'BUSD' || token.symbol == 'IBAT') {\r\n//                 const balance = convertTokenBalance(token.balance, token.decimals);\r\n//                 // const tokenFromWei = web3.utils.fromWei(token.balance)\r\n//                 if (!tokenList) {\r\n//                     console.error('ln:226 - Token List Missing');\r\n//                 } else {\r\n//                     tokenList.innerHTML += `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto\"><span class=\"w-1/2 text-center\">${token.symbol}</span><span class=\"w-1/2 text-left\">${balance}</span></li>`\r\n//                 }\r\n//             }\r\n//         });\r\n//     } else {\r\n//         if (!tokenList) {\r\n//             console.error('dev:getBalance() - Token List Missing');\r\n//         } else {\r\n//             tokenList.innerHTML += `<li class=\"w-full text-center mx-auto text-xs opacity-80 mt-2\">no other tokens available</li>`\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\nfunction toggleBtnVisibility(connected) {\r\n    const allBtns = document.querySelectorAll('.wallet-options-btn ');\r\n    if (connected) { //show\r\n        allBtns.forEach(btn => {\r\n            btn.classList.add('hidden');\r\n        });\r\n        logoutBtn && logoutBtn.classList.remove('hidden');\r\n        showTokenBtn && showTokenBtn.classList.remove('hidden');\r\n        // loginBtn && loginBtn.classList.remove('hidden');\r\n    }\r\n    else {\r\n        if (!allBtns) {\r\n            console.error(`ln:249-Invalid Arguments`);\r\n        } else {\r\n            allBtns.forEach(btn => {\r\n                btn.classList.remove('hidden');\r\n            });\r\n        }\r\n        // walletOptions && walletOptions.classList.remove('hidden');\r\n        logoutBtn && logoutBtn.classList.add('hidden');\r\n        showTokenBtn && showTokenBtn.classList.add('hidden');\r\n    }\r\n}\r\n\r\nfunction toggleConnectStatus() {\r\n    const statusFields = document.querySelectorAll('.connectivity-status');\r\n    statusFields && statusFields.forEach(el => {\r\n        if (isUserConnected()) {\r\n            el.classList.remove('bg-red-400')\r\n            el.style.background = \"#4ade80\";\r\n            el.innerHTML = 'connected'\r\n        } else {\r\n            el.style.background = \"#f87171\";\r\n            el.innerHTML = 'not connected'\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction convertTokenBalance(balance, decimals) {\r\n    let newBalance = balance == 0 ? 0 : balance / Math.pow(10, decimals);\r\n    newBalance = newBalance < 0.001 ? 0 : newBalance;\r\n    return newBalance;\r\n}\r\n\r\n\r\n\r\nasync function isPresaleOpen() {\r\n    const ABI = [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    const result = await readFunction('isPresaleOpen', ABI);\r\n    // console.log(`isPresaleOpen = ${result}`);\r\n    return result;\r\n}\r\n\r\n// isPresaleOpen();\r\n\r\nasync function readFunction(functionName, ABI) {\r\n\r\n    let options = {\r\n        contractAddress: DEPLOYED_CONTRACT_ADDRESS,\r\n        functionName: functionName,\r\n        abi: ABI,\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\n\r\n\r\nfunction getBuyAmount() {\r\n    // @todo: validate input\r\n    let buyAmount = 0;\r\n    const buyAmounts = document.querySelectorAll('.buy-amount');\r\n    // console.log(buyAmounts.length);\r\n\r\n    // const buyAmountMob = document.getElementById(\"buy-amount-mobile\");\r\n    // const buyAmountDesktop = document.getElementById(\"buy-amount-desktop\");\r\n    // if (buyAmountMob.classList.contains(hidden))\r\n    buyAmounts.forEach(el => {\r\n        if (el.value) {\r\n            // console.log(`${el.value}`);\r\n            buyAmount = +el.value;\r\n        }\r\n    });\r\n    console.log('buyAmount = ');\r\n    console.log(+buyAmount);\r\n    return buyAmount;\r\n}\r\n\r\nasync function buyToken() {\r\n\r\n    const BNBValue = +getBuyAmount();\r\n\r\n    const errMsgContainer = document.getElementById('buy-token-error-con');\r\n    const errMsg = document.getElementById('buy-token-error-msg');\r\n    let msg = 'Error';\r\n\r\n\r\n\r\n\r\n    if (!isUserConnected()) {\r\n        console.log('User not Logged in - connect wallet');\r\n        msg = 'Wallet not connected';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n    const isSaleOpen = await isPresaleOpen();\r\n    console.log(`sale open - ${isSaleOpen}`);\r\n    if (!isSaleOpen) {\r\n        console.log('Presale is not open');\r\n        msg = 'Presale has not yet started !!!';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n    const MIN_BNB = TEST_ENVIRONMENT ? 0 : 0.1;\r\n    const MAX_BNB = 500;\r\n    console.log(getUserWalletAddress());\r\n    console.log(getUserWalletAddress() !== '0xc8179e6927b61a4fdc3e5a2db14e641e51b9ad83');\r\n    if (getUserWalletAddress() !== '0xc8179e6927b61a4fdc3e5a2db14e641e51b9ad83' && +BNBValue < MIN_BNB) {\r\n        msg = 'Minimum BNB Amount should be 0.1BNB';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n    if (+BNBValue > MAX_BNB) {\r\n        msg = 'Maximum BNB Amount should be 500BNB';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n\r\n    const FUNCTION_NAME = 'buyToken';\r\n    const ABI = [{ \"inputs\": [], \"name\": \"buyToken\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"payable\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: DEPLOYED_CONTRACT_ADDRESS,\r\n        functionName: FUNCTION_NAME,\r\n        abi: ABI,\r\n        msgValue: Moralis.Units.ETH(BNBValue)\r\n    }\r\n\r\n    let result;\r\n    try {\r\n        // result = await Moralis.executeFunction(options);\r\n        let userAddress = getUserWalletAddress();\r\n        console.log(`Transaction started`);\r\n\r\n        if (!TEST_ENVIRONMENT) swapAmountDataLayer(userAddress);\r\n        const transaction = await Moralis.executeFunction(options);\r\n        showTransactionLoader(true);\r\n        if (!TEST_ENVIRONMENT) confirmTransactionDataLayer(userAddress);\r\n        console.log(`Transaction finished`);\r\n        console.log(`Transaction`);\r\n        console.log(transaction);\r\n\r\n        const result = await transaction.wait(CONFIRMATIONS_ON_BSC);\r\n        // const result = await transaction.wait(5);\r\n        /**\r\n         * Refresh the userInvestments field\r\n         */\r\n\r\n\r\n        console.log(`Result`);\r\n        console.log(result.transactionHash);\r\n        console.log(result);\r\n        showTransactionLoader(false);\r\n        alert(`✅Transaction Successful✅\\nPlease Import token and check your wallet.`);\r\n        refreshUsersInvestments();\r\n        let IBATValue = calculateIBATAmount(BNBValue);\r\n        if (!TEST_ENVIRONMENT) result && swapSuccessfulDataLayer(userAddress, result.transactionHash, BNBValue, IBATValue);\r\n        // setTimeout(refreshUsersInvestments, 1000, result);\r\n        console.log(`Add: ${userAddress} \\n tID: ${result.transactionHash} \\n BNB: ${BNBValue} \\nIBAT: ${IBATValue}`);\r\n\r\n    } catch (error) {\r\n        console.log(`Transaction cancelled`);\r\n        try {\r\n            if (error.message) {\r\n                console.log(`log- -`);\r\n                console.log(error.message);\r\n                msg = error.message;\r\n                if (msg.includes('User denied transaction signature')) {\r\n                    msg = 'Transaction declined by User';\r\n                    showErrMsg(errMsgContainer, errMsg, msg);\r\n                    return;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.error(`dev:insuffiecient funds error`);\r\n        }\r\n        // msg = error.data.message;\r\n        // console.log(msg);\r\n        msg = 'Insufficient BNB in wallet';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n    }\r\n\r\n}\r\n\r\n\r\nasync function getTotalBNBAmount() {\r\n    const functionName = 'totalBNBAmount';\r\n    const ABI_totalBNBAmount = [{ \"inputs\": [], \"name\": \"totalBNBAmount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: DEPLOYED_CONTRACT_ADDRESS,\r\n        functionName: functionName,\r\n        abi: ABI_totalBNBAmount,\r\n    }\r\n\r\n    let raisedAmount = await Moralis.executeFunction(options);\r\n    raisedAmount = raisedAmount / Math.pow(10, DECIMALS);\r\n    return raisedAmount;\r\n}\r\n\r\nasync function populateAmountRaisedinHTML() {\r\n    let BSC_Chain = TEST_ENVIRONMENT ? BscChainIdTest : BscChainIdMain;\r\n    console.log(`populateAmountRaisedinHTML-switchAndAdd-chainId-${BSC_Chain}`);\r\n    await switchAndAdd(BSC_Chain);\r\n\r\n    console.log(`ran - populateAmountRaisedinHTML`);\r\n\r\n    let raisedAmount = await getTotalBNBAmount(); //which will be 'logged out' if user is logged out\r\n    raisedAmount = +raisedAmount.toFixed(2);\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    const HARDCAP = +16500;\r\n    let raisedAmountPercentage = '';\r\n    try {\r\n        raisedAmountPercentage = percentageOfBNBRaised(raisedAmount, HARDCAP);\r\n    } catch (error) {\r\n        console.error(`dev: percentageOfBNBRaised() issue`);\r\n    }\r\n    // if (raisedAmountPercentage < 1) raisedAmountPercentage = 1;\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    console.log(`setting % = ${raisedAmountPercentage}`);\r\n    // if user is logged-in we change the value of refferValue\r\n    const progressBars = document.querySelectorAll('.sale-progress');\r\n\r\n\r\n    progressBars && progressBars.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        let percentageForBar = raisedAmountPercentage;\r\n        percentageForBar < 1 ? percentageForBar = 1 : '';\r\n        el.value = percentageForBar;\r\n    });\r\n\r\n\r\n    const raisedAmountHTML = document.querySelectorAll('.sale-progress-amount');\r\n    raisedAmountHTML && raisedAmountHTML.forEach(el => {\r\n        el.innerHTML = raisedAmount;\r\n    })\r\n\r\n\r\n    const raisedAmountPercentageHTML = document.querySelectorAll('.sale-progress-percentage');\r\n    raisedAmountPercentageHTML && raisedAmountPercentageHTML.forEach(el => {\r\n        el.innerHTML = raisedAmountPercentage;\r\n    })\r\n\r\n\r\n    const parentContainer = document.querySelectorAll('.sale-progress-val-parent');\r\n    parentContainer.forEach(e => {\r\n        let leftVal = +raisedAmountPercentage - 3;\r\n        const maxLeftVal = +94;\r\n        // console.log(`-left = ${leftVal}`);\r\n        leftVal >= maxLeftVal ? leftVal = maxLeftVal : '';\r\n        const minLeftVal = +0;\r\n        leftVal <= minLeftVal ? leftVal = minLeftVal : '';\r\n        // console.log(`-left = ${leftVal}`);\r\n        // console.log(e);\r\n        e.style.left = `${leftVal}%`;\r\n    })\r\n    const parentContainerMob = document.querySelectorAll('.sale-progress-val-parent-mob');\r\n    parentContainerMob.forEach(e => {\r\n        let leftVal = +raisedAmountPercentage - 3;\r\n        const maxLeftValMob = +65;\r\n        leftVal >= maxLeftValMob ? leftVal = maxLeftValMob : '';\r\n        const minLeftValMob = +0;\r\n        leftVal <= minLeftValMob ? leftVal = minLeftValMob : '';\r\n        // console.log(`left = ${leftVal}`);\r\n        // console.log(e);\r\n        e.style.left = `${leftVal}%`;\r\n    })\r\n}\r\n\r\nfunction toggleErrMsg() {\r\n    const errMsg = document.getElementById('buy-token-error-input');\r\n    errMsg.checked = !errMsg.checked;\r\n}\r\n\r\nasync function isWeb3Installed() {\r\n    const ethereum = window.ethereum;\r\n    let isInstalled = true;\r\n    if (!ethereum || !ethereum.on) {\r\n        console.log(`dev:isWeb3Installed - Metamask not installed`);\r\n        isInstalled = false;\r\n    }\r\n    return isInstalled;\r\n}\r\n\r\nfunction populateUserAddress(address, showAddress = false) {\r\n    const addressContainers = document.querySelectorAll('.web3-wallet-address');\r\n    const addressFields = document.querySelectorAll('.web3-wallet-address-field');\r\n    addressFields && addressFields.forEach(el => {\r\n        el.value = address;\r\n    });\r\n    addressContainers && addressContainers.forEach(el => {\r\n        if (showAddress) {\r\n            el.classList.remove('hidden');\r\n        } else {\r\n            el.classList.add('hidden');\r\n        }\r\n    });\r\n}\r\nconst showAddressBtn = document.getElementById('web3-wallet-address-btn');\r\nlet showAddressFied = false;\r\nshowAddressBtn.onclick = toggleShowAddress;\r\nfunction toggleShowAddress() {\r\n    showAddressFied = !showAddressFied;\r\n    const inputFields = document.querySelectorAll('.web3-wallet-address input');\r\n    console.log(`toggleShowAddress - show : ${showAddressFied}`);\r\n    inputFields.forEach(el => {\r\n        if (showAddressFied) {\r\n            el.setAttribute('type', 'text')\r\n            showAddressBtn.innerHTML = 'HIDE';\r\n        }\r\n        else {\r\n            el.setAttribute('type', 'password');\r\n            showAddressBtn.innerHTML = 'SHOW';\r\n\r\n        }\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\nif (buyBtn) {\r\n    buyBtn.onclick = buyToken;\r\n} else {\r\n    console.error(`Login button missing in UI`);\r\n}\r\nif (loginBtn) {\r\n    loginBtn.onclick = login;\r\n} else {\r\n    console.error(`Login button missing in UI`);\r\n}\r\nif (logoutBtn) {\r\n    logoutBtn.onclick = logOut;\r\n} else {\r\n    console.error(`Logout button missing in UI`);\r\n}\r\n// showTokenBtn.onclick = getBalance;\r\n\r\nconst HEX_TO_CHAIN_DETAILS = {\r\n    '0x1': {\r\n        chain: 'ETH',\r\n        nativeToken: 'ETH'\r\n    },\r\n    '0x61': {\r\n        // BSC testnet\r\n        chain: 'tBSC',\r\n        nativeToken: 'tBNB'\r\n    }\r\n    ,\r\n    '0x38': {\r\n        // BSC mainnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n}\r\n\r\n"],"names":["window","onload","async","populateAmountRaisedinHTMLDB","isWeb3Installed","WEB3_INSTALLED","console","log","Moralis","enableWeb3","ee","error","isUserConnected","login","provider","TEST_ENVIRONMENT","REFER_CONTRACT_ADDRESS_TESTNET","REFER_CONTRACT_ADDRESS_MAINNET","DEPLOYED_CONTRACT_ADDRESS","CONFIRMATIONS_ON_BSC","serverUrl_Testnet","appId_Testnet","serverUrl","appId","info","start","walletOptions","document","getElementById","loginBtn","logoutBtn","buyBtn","showTokenBtn","BscChainIdMain","BscChainIdTest","showAddress","NODE_URL_TESTNET","NODE_URL_MAINNET","userEnteredPassword","querySelector","atLogin","userAddress","getUserWalletAddress","USER_RefferalLink","presalePasswordEntered","manageTooltipWidth","populateUserAddress","secondLoginBtn","setAttribute","populateReferralLinkinHTML","populateReferrerinHTML","error1","populateUserReferralComissions","error2","populateUserReferralsCount","error3","populateUsersInvestments","error4","updateBNBRaised","error5","toggleBtnVisibility","raisedAmount","getTotalBNBAmount","toFixed","raisedAmountPercentage","percentageOfBNBRaised","updateRaisedBNBinDB","style","setProperty","addNetwork","chainId","BscChainId","chainName","rpcUrl","blockExplorerUrl","switchAndAdd","toChainId","switchNetwork","er","User","current","isEnablingWeb3","deactivateWeb3","authenticate","signingMessage","wcerror","currentChainIdHex","getChainId","user","hitDataLayer","error6","chainIdError","dataset","tip","get","logOut","error7","atLogout","error8","error9","error10","error11","toggleConnectStatus","enableButton","setRefferrerBtn","classList","add","setPresalePassword","error12","showArenaLock","error13","addReferrerBtn","addReferrerInput","connected","allBtns","querySelectorAll","forEach","btn","remove","statusFields","el","background","innerHTML","convertTokenBalance","balance","decimals","newBalance","Math","pow","isPresaleOpen","readFunction","inputs","name","outputs","internalType","type","stateMutability","functionName","ABI","options","contractAddress","abi","executeFunction","getBuyAmount","buyAmount","value","buyToken","BNBValue","errMsgContainer","errMsg","msg","isSaleOpen","showErrMsg","Units","ETH","swapAmountDataLayer","transaction","showTransactionLoader","confirmTransactionDataLayer","result","wait","transactionHash","IBATValue","calculateIBATAmount","swapSuccessfulDataLayer","error14","message","includes","e","DECIMALS","populateAmountRaisedinHTML","progressBars","percentageForBar","raisedAmountHTML","raisedAmountPercentageHTML","leftVal","left","toggleErrMsg","checked","ethereum","isInstalled","on","address","showAddress1","addressContainers","addressFields","showAddressFied","toggleShowAddress","inputFields","onclick"],"version":3,"file":"index.543b7539.js.map"}