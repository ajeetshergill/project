{"mappings":"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","sources":["src/js/app.js"],"sourcesContent":["// import WalletConnect from \"@walletconnect/client\";\r\nconst loader = document.getElementById('loader');\r\nconst navItems = document.querySelectorAll('.nav-section');\r\nfunction navigateTo(el) {\r\n    // this makes the swap modal visible again - in case someone clicked on settings & then changed windows (THIS BEHAVIOUR APPLIES TO ALL MODALS)\r\n    // LEFT FOR NOW - but to implement - I need to disable the checked state to make sure the settings modal hides \r\n    // if (el === 'swap') {\r\n    //     hideSwap('#swap');\r\n    // }\r\n    const itemToShow = document.getElementById(el);\r\n    navItems.forEach(item => {\r\n        if (!item.classList.contains('hidden')) item.classList.add('hidden');\r\n    });\r\n    loader.classList.remove('hidden')\r\n\r\n    setTimeout(() => {\r\n        loader.classList.add('hidden');\r\n    }, 500);\r\n\r\n    itemToShow.classList.add('z-20');\r\n    itemToShow.classList.remove('hidden');\r\n}\r\n\r\nfunction hideSwap(elId, hide) {\r\n    const el = document.querySelector(elId);\r\n    el.style.visibility = hide ? 'hidden' : 'visible';\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * *******************************    dapp.html : Additional Functionality    *******************************\r\n */\r\n// const copyReferLinkBtn = document.getElementById(\"refer-link-icon\");\r\nconst copyReferLinkBtns = document.querySelectorAll(\".refer-link\");\r\n// async function populateReferrerOf(userAddress) {\r\nasync function populateReferrerLinkinHTML(userAddress) {\r\n    let referrerValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) referrerValue = await getReferrer(userAddress);\r\n    const referrerFields = document.querySelectorAll('.refer-referrer');\r\n    referrerFields.forEach(el => {\r\n        // in this example - the userAddress = logged out\r\n        el.innerHTML = referrerValue;\r\n    });\r\n\r\n}\r\n\r\n\r\nasync function getReferrer(userAddress) {\r\n    const ABI_getReferrer = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferrer',\r\n        abi: ABI_getReferrer,\r\n        params: {\r\n            _user: userAddress,\r\n        }\r\n    }\r\n\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nasync function populateUserReferralsCount(userAddress) {\r\n    let countValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) countValue = await getReferralsCount(userAddress);\r\n    const referrerFields = document.querySelectorAll('.refer-total');\r\n    referrerFields.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = countValue;\r\n    });\r\n}\r\n\r\n\r\nasync function getReferralsCount(userAddress) {\r\n    const ABI_referralsCount = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userReferralsCount\", \"type\": \"address\" }], \"name\": \"getReferralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    // //the address with count=1 (provided by Jagjeet)\r\n    // userAddress = '0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0';\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferralsCount',\r\n        abi: ABI_referralsCount,\r\n        params: {\r\n            _userReferralsCount: userAddress,\r\n        }\r\n    }\r\n\r\n    let r = ''\r\n    try {\r\n        r = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        r = 'error-ln99-app'\r\n        console.error(error);\r\n    }\r\n\r\n    return r\r\n}\r\n\r\n\r\n\r\nasync function populateUserReferralComissions(userAddress) {\r\n    let commissionValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) commissionValue = await getTotalReferralCommissions(userAddress);\r\n    const commssionFields = document.querySelectorAll('.refer-earning');\r\n    commssionFields.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = commissionValue;\r\n    });\r\n}\r\n\r\nasync function getTotalReferralCommissions(userAddress) {\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userCommission\", \"type\": \"address\" }], \"name\": \"getTotalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getTotalReferralCommissions',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            _userCommission: userAddress,\r\n        }\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction copyReferLink() {\r\n    // get the referralLink\r\n    /**\r\n        if user logged in - show the box \r\n        else nothing OR hide the box at logout\r\n    * \r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    // store it in variable\r\n    let USER_RefferalLink = `url/${userAddress}`;\r\n    populateReferralLinkinHTML(USER_RefferalLink);\r\n\r\n    navigator.clipboard.writeText(USER_RefferalLink);\r\n\r\n    // console.log(`copied`);\r\n    // populateReferralLinkinHTML('bkahs.gffggffgfggfgffgghjjhjhhjhjhjhjhjjhhhjhjhhjhjhjhhhhhhhhhhhhhhhhhhhhhs');\r\n}\r\nfunction populateReferralLinkinHTML(referralLink) {\r\n    const linkNodes = document.querySelectorAll('.refer-link-text');\r\n    linkNodes.forEach(el => {\r\n        el.innerHTML = referralLink;\r\n    });\r\n}\r\n// copyReferLinkBtn.onclick = copyReferLink;\r\ncopyReferLinkBtns.forEach(el => (el.onclick = copyReferLink))\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * *******************************    WEB3    *******************************\r\n */\r\n// Connecting with Metamask Wallet\r\nconst serverUrl = \"https://cbdyvlhyonhj.usemoralis.com:2053/server\";\r\nconst appId = \"PC04t9NTMGlWn2p5EGf8ukAZbNaZbA1PWrv7IlaC\";\r\nconst CONTRACT_ADDRESS_TESTNET = '0xf8992AE362561427602A50aff0f84085d1fd88f7';\r\nconst REFER_CONTRACT_ADDRESS_TESTNET = '0xfe2E124FE1418419A9efd8Ba987Fa1769D506c8a';\r\nconst referABI = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"referralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"totalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }]\r\nconst referOptions = {\r\n    contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n    abi: referABI,\r\n};\r\n\r\nlet currentChainIdHex; //default chain set to ETH\r\ntry {\r\n    Moralis.start({ serverUrl, appId });\r\n} catch (error) {\r\n    console.log(error);\r\n}\r\n\r\nconst walletOptions = document.getElementById(\"wallet-options\");\r\nconst loginBtn = document.getElementById(\"web3-login-mm\");\r\nconst logoutBtn = document.getElementById(\"web3-logout\");\r\nconst showTokenBtn = document.getElementById(\"web3-tokens\");\r\n\r\nconst showAddress = document.getElementById(\"web3-wallet-address\");\r\n\r\nlet web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\n\r\nasync function login(provider) {\r\n    // const BscChainId = \"0x38\"; //Bsc Mainnet ID\r\n    const BscChainId = \"0x61\"; //Bsc Testnet ID\r\n\r\n    // console.log(`Provider : ${provider}`);\r\n\r\n    let user = Moralis.User.current();\r\n    if (!user) {\r\n        // console.log(`Provider : ${provider} : ${provider === 'walletconnect'}`);\r\n        if (provider === 'walletconnect') {\r\n            user = await Moralis.Web3.authenticate({ provider: \"walletconnect\" });\r\n        } else {\r\n            user = await Moralis.Web3.authenticate();\r\n        }\r\n        currentChainIdHex = await Moralis.switchNetwork(BscChainId);\r\n    }\r\n    currentChainIdHex = await Moralis.getChainId();\r\n    await Moralis.enableWeb3();\r\n\r\n    atLogin()\r\n    // moved the below two lines inside atLogin()\r\n    // // toggles the visibility of connect & disconnect button\r\n    // toggleBtnVisibility(true);\r\n\r\n    showAddress.dataset.tip = user.get(\"ethAddress\");\r\n    getBalance(currentChainIdHex, user.get(\"ethAddress\"));\r\n\r\n    // Below address is on both BSC & ETH Scan - \r\n    // getBalance('0x1', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // eth chain\r\n    // getBalance('0x38', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // bsc chain - this account has BUSD in it\r\n}\r\n\r\nfunction getUserWalletAddress() {\r\n    let err = 'Logged Out';\r\n    if (!isUserConnected())\r\n        return err;\r\n\r\n    return Moralis.User.current().get(\"ethAddress\");\r\n\r\n}\r\nfunction isUserConnected() {\r\n    let user = Moralis.User.current();\r\n    return user ? true : false;\r\n}\r\n\r\nasync function logOut() {\r\n    await Moralis.User.logOut();\r\n    // console.log(\"logged out\");\r\n    // toggleBtnVisibility(false);\r\n    // showAddress.dataset.tip = 'Wallet not connected';\r\n    atLogout()\r\n}\r\nfunction atLogout() {\r\n    /**\r\n     * 1. hide referral box\r\n     */\r\n    populateReferralLinkinHTML('Logged Out');\r\n    populateReferrerLinkinHTML('Logged Out')\r\n    populateUserReferralComissions('0');\r\n    populateUserReferralsCount(0);\r\n    toggleBtnVisibility(false);\r\n    showAddress.dataset.tip = 'Wallet not connected';\r\n}\r\nfunction atLogin() {\r\n    /**\r\n    * 1. show referral box - toggle visibility of it\r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    let USER_RefferalLink = `url/${userAddress}`;\r\n    populateReferralLinkinHTML(USER_RefferalLink);\r\n    populateReferrerLinkinHTML(userAddress);\r\n    populateUserReferralComissions(userAddress);\r\n    populateUserReferralsCount(userAddress);\r\n\r\n\r\n    // toggles the visibility of connect & disconnect button\r\n    toggleBtnVisibility(true);\r\n}\r\n\r\nasync function getBalance(chainId, address) {\r\n    const tokenList = document.getElementById('token-list');\r\n    currentChainIdHex = await Moralis.getChainId();\r\n    let currentUser = Moralis.User.current();\r\n    let currentUserAddress = currentUser.get(\"ethAddress\");\r\n    const options = { chain: chainId || currentChainIdHex || '0x38', address: address || currentUserAddress || \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" };\r\n    // console.log(`getBalance called with \\n chaidId ${options.chain} and \\n of address: ${options.address}`);\r\n    // const options = { chain: 'eth', address: \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" } // test address from Etherscan\r\n    // const options = { chain: 'bsc', address: \"0x60913d3fE722bFE425247D7673D8bdbDA56D1e02\" } // test address from BSC (bscscan)\r\n\r\n    const nativeBal = await Moralis.Web3API.account.getNativeBalance(options);\r\n\r\n    // console.log(`log 2 : ${currentChainIdHex}`);\r\n    // console.log(`log 3 : ${HEX_TO_CHAIN_DETAILS[currentChainIdHex].nativeToken}`);\r\n    tokenList.innerHTML = `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto mt-2\"><span class=\"w-1/2 text-center\">${HEX_TO_CHAIN_DETAILS[currentChainIdHex].nativeToken}</span><span class=\"w-1/2 text-left\">${web3.utils.fromWei(nativeBal.balance)}</span></li>`\r\n\r\n    const balances = await Moralis.Web3API.account.getTokenBalances(options);\r\n    // console.log(`log 4--`);\r\n    // console.log(balances);\r\n    // console.log(`--log 4`);\r\n    // console.log(`log 5--`);\r\n    // console.log(options);\r\n    // console.log(`--log 5`);\r\n    if (balances.length) {\r\n        balances.forEach(token => {\r\n            // console.log(`not - ${token.symbol}`);\r\n            if (token.symbol == 'USDC' || token.symbol == 'BUSD' || token.symbol == 'IBAT') {\r\n                const balance = convertTokenBalance(token.balance, token.decimals);\r\n                // const tokenFromWei = web3.utils.fromWei(token.balance)\r\n                tokenList.innerHTML += `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto\"><span class=\"w-1/2 text-center\">${token.symbol}</span><span class=\"w-1/2 text-left\">${balance}</span></li>`\r\n            }\r\n        });\r\n    } else {\r\n        tokenList.innerHTML += `<li class=\"w-full text-center mx-auto text-xs opacity-80 mt-2\">no other tokens available</li>`\r\n    }\r\n}\r\n\r\n\r\nfunction toggleBtnVisibility(connected) {\r\n    const allBtns = document.querySelectorAll('.wallet-options-btn ');\r\n    if (connected) { //show\r\n        // loginBtn.classList.add('hidden');\r\n        allBtns.forEach(btn => {\r\n            btn.classList.add('hidden');\r\n        });\r\n        // walletOptions.classList.add('hidden');\r\n        logoutBtn.classList.remove('hidden');\r\n        showTokenBtn.classList.remove('hidden');\r\n    }\r\n    else {\r\n        // loginBtn.classList.remove('hidden');\r\n        // walletOptions.classList.remove('hidden');\r\n        allBtns.forEach(btn => {\r\n            btn.classList.remove('hidden');\r\n        });\r\n        logoutBtn.classList.add('hidden');\r\n        showTokenBtn.classList.add('hidden');\r\n    }\r\n}\r\n\r\n\r\nfunction convertTokenBalance(balance, decimals) {\r\n    let newBalance = balance == 0 ? 0 : balance / Math.pow(10, decimals);\r\n    newBalance = newBalance < 0.001 ? 0 : newBalance;\r\n    return newBalance;\r\n}\r\n\r\nasync function isPresaleOpen() {\r\n    await Moralis.enableWeb3();\r\n    const ABI = [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    const result = await readFunction('isPresaleOpen', ABI);\r\n    // console.log(`isPresaleOpen = ${result}`);\r\n}\r\n\r\n// isPresaleOpen();\r\n\r\nasync function readFunction(functionName, ABI) {\r\n    // let options = {\r\n    //     contractAddress: '0x356d2E7a0d592bAd95E86d19479c37cfdBb68Ab9',\r\n    //     functionName: 'isPresaleOpen',\r\n    //     abi: [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }],\r\n    //     Params: {\r\n    //         Note: 'Thanks for your work'\r\n    //     },\r\n    //     msgValue: Moralis.Units.ETH(0.1)\r\n    // }\r\n    let options = {\r\n        contractAddress: CONTRACT_ADDRESS_TESTNET,\r\n        functionName: functionName,\r\n        abi: ABI,\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction getBuyAmount() {\r\n    // @todo: validate input\r\n    let buyAmount = 0;\r\n    const buyAmounts = document.querySelectorAll('.buy-amount');\r\n    // console.log(buyAmounts.length);\r\n\r\n    // const buyAmountMob = document.getElementById(\"buy-amount-mobile\");\r\n    // const buyAmountDesktop = document.getElementById(\"buy-amount-desktop\");\r\n    // if (buyAmountMob.classList.contains(hidden))\r\n    buyAmounts.forEach(el => {\r\n        if (el.value) {\r\n            // console.log(`${el.value}`);\r\n            buyAmount = +el.value;\r\n        }\r\n    });\r\n    // console.log(+buyAmount);\r\n    return buyAmount;\r\n}\r\nasync function buyToken() {\r\n    // console.log('Ran buyToken()');\r\n    let value = getBuyAmount();\r\n    // console.log(value);\r\n\r\n    await Moralis.enableWeb3();\r\n    if (!isUserConnected()) {\r\n        console.log('User not Logged in - connect wallet');\r\n        return;\r\n    }\r\n\r\n\r\n    const FUNCTION_NAME = 'buyToken';\r\n    const ABI = [{ \"inputs\": [], \"name\": \"buyToken\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"payable\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: CONTRACT_ADDRESS_TESTNET,\r\n        functionName: FUNCTION_NAME,\r\n        abi: ABI,\r\n        msgValue: Moralis.Units.ETH(value)\r\n    }\r\n    let result;\r\n    try {\r\n        result = await Moralis.executeFunction(options);\r\n        // console.log(`Result \\n${result}`);\r\n    } catch (error) {\r\n        const errMsg = document.getElementById('buy-token-error-msg');\r\n        errMsg.innerHTML = error.data.message;\r\n        toggleErrMsg();\r\n    }\r\n}\r\nfunction toggleErrMsg() {\r\n    const errMsg = document.getElementById('buy-token-error-input');\r\n    errMsg.checked = !errMsg.checked;\r\n}\r\n\r\n\r\nloginBtn.onclick = login;\r\nlogoutBtn.onclick = logOut;\r\n// showTokenBtn.onclick = getBalance;\r\n\r\nconst HEX_TO_CHAIN_DETAILS = {\r\n    '0x1': {\r\n        chain: 'ETH',\r\n        nativeToken: 'ETH'\r\n    },\r\n    '0x61': {\r\n        // BSC testnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n    ,\r\n    '0x38': {\r\n        // BSC mainnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n}\r\n\r\n"],"names":["loader","document","getElementById","navItems","querySelectorAll","navigateTo","el","itemToShow","forEach","item","classList","contains","add","remove","setTimeout","hideSwap","elId","hide","querySelector","style","visibility","populateReferrerLinkinHTML","userAddress","referrerValue","isUserConnected","getReferrer","innerHTML","options","contractAddress","REFER_CONTRACT_ADDRESS_TESTNET","functionName","internalType","name","type","stateMutability","params","_user","Moralis","executeFunction","populateUserReferralsCount","countValue","getReferralsCount","_userReferralsCount","r","error","console","populateUserReferralComissions","commissionValue","getTotalReferralCommissions","_userCommission","copyReferLink","getUserWalletAddress","populateReferralLinkinHTML","USER_RefferalLink","navigator","clipboard","writeText","referralLink","copyReferLinkBtns","onclick","inputs","outputs","abi","referABI","currentChainIdHex","start","serverUrl","appId","walletOptions","loginBtn","logoutBtn","showTokenBtn","Web3","givenProvider","login","provider","user","User","current","authenticate","switchNetwork","getChainId","enableWeb3","atLogin","showAddress","dataset","tip","get","getBalance","logOut","atLogout","toggleBtnVisibility","chainId","address","tokenList","currentUserAddress","chain","nativeBal","Web3API","account","getNativeBalance","HEX_TO_CHAIN_DETAILS","nativeToken","web3","utils","fromWei","balance","getTokenBalances","balances","length","token","symbol","convertTokenBalance","decimals","connected","allBtns","btn","Math","pow","newBalance","isPresaleOpen","readFunction","ABI","CONTRACT_ADDRESS_TESTNET","getBuyAmount","buyAmount","value","buyToken","result","Units","ETH","error1","data","message","toggleErrMsg","errMsg","checked"],"version":3,"file":"dapp.276a43df.js.map"}