{"mappings":"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","sources":["src/js/app.js"],"sourcesContent":["// import WalletConnect from \"@walletconnect/client\";\r\nconst loader = document.getElementById('loader');\r\nconst navItems = document.querySelectorAll('.nav-section');\r\nfunction navigateTo(el) {\r\n    // this makes the swap modal visible again - in case someone clicked on settings & then changed windows (THIS BEHAVIOUR APPLIES TO ALL MODALS)\r\n    // LEFT FOR NOW - but to implement - I need to disable the checked state to make sure the settings modal hides \r\n    // if (el === 'swap') {\r\n    //     hideSwap('#swap');\r\n    // }\r\n    const itemToShow = document.getElementById(el);\r\n    navItems.forEach(item => {\r\n        if (!item.classList.contains('hidden')) item.classList.add('hidden');\r\n    });\r\n    loader.classList.remove('hidden')\r\n\r\n    setTimeout(() => {\r\n        loader.classList.add('hidden');\r\n    }, 500);\r\n\r\n    itemToShow.classList.add('z-20');\r\n    itemToShow.classList.remove('hidden');\r\n}\r\n\r\nfunction hideSwap(elId, hide) {\r\n    const el = document.querySelector(elId);\r\n    el.style.visibility = hide ? 'hidden' : 'visible';\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * *******************************    dapp.html : Additional Functionality    *******************************\r\n * To enable #arana-lock\r\n * - uncomment the html code\r\n * set/declare presalePasswordEntered = false;\r\n *  \r\n */\r\n// \r\n// When #arana-lock is commented, everthing will keep working like it's supposed to be if presalePasswordEntered = true && have to change the value of presale in atlogout() too(uncomment it)\r\n// let presalePasswordEntered = true;\r\nlet presalePasswordEntered = false;\r\n\r\n\r\n\r\nfunction authenticatePresale() {\r\n    if (!isUserConnected()) {\r\n        showPasswordErrMsg('Login Required');\r\n        return;\r\n    }\r\n\r\n    const CORRECT_PASSWORD = 'PASSWORD';\r\n    const userEnteredPassword = document.querySelector('#presale-password');\r\n\r\n    // console.log(userEnteredPassword === CORRECT_PASSWORD);\r\n\r\n    if (userEnteredPassword.value === CORRECT_PASSWORD) {\r\n        presalePasswordEntered = true;\r\n        atLogin();\r\n        showArenaLock(false);\r\n        userEnteredPassword.value = '';\r\n        return;\r\n    } else {\r\n        showPasswordErrMsg('Incorrect Password');\r\n    }\r\n\r\n}\r\nfunction setPresalePassword(password) {\r\n    const EMPTY = ''\r\n    const userEnteredPassword = document.querySelector('#presale-password');\r\n    userEnteredPassword.value = password ? password : EMPTY;\r\n}\r\n\r\nfunction showPasswordErrMsg(msg) {\r\n    const passwordErrMsg = document.querySelector('#password-error-msg');\r\n    passwordErrMsg.innerHTML = msg;\r\n    passwordErrMsg.classList.remove('opacity-0')\r\n    passwordErrMsg.classList.add('opacity-100')\r\n    setTimeout(() => {\r\n        const passwordErrMsg = document.querySelector('#password-error-msg');\r\n        passwordErrMsg.classList.remove('opacity-100')\r\n        passwordErrMsg.classList.add('opacity-0')\r\n    }, 500);\r\n}\r\nfunction showErrMsg(elContainer, msgContainer, msg) {\r\n    msgContainer.innerHTML = msg;\r\n    elContainer.classList.remove('opacity-0')\r\n    elContainer.classList.add('opacity-100')\r\n    setTimeout(hideErrMsg, 500, elContainer);\r\n}\r\nfunction hideErrMsg(el) {\r\n    el.classList.remove('opacity-100')\r\n    el.classList.add('opacity-0')\r\n    // el.innerHTML = '';\r\n}\r\n\r\nfunction showArenaLock(show) {\r\n    let arenaLock = document.querySelector('#arena-lock');\r\n    // If the element of areanlock doesn't exist (can be commented out)\r\n    // just return because doing anything will throw console error\r\n    if (!arenaLock) {\r\n        return;\r\n    }\r\n    if (show) {\r\n        arenaLock.classList.remove('hidden');\r\n    }\r\n    else {\r\n        arenaLock.classList.add('hidden');\r\n    }\r\n}\r\n\r\n\r\n\r\n// const copyReferLinkBtn = document.getElementById(\"refer-link-icon\");\r\nconst copyReferLinkBtns = document.querySelectorAll(\".refer-link\");\r\n// async function populateReferrerOf(userAddress) {\r\nasync function populateReferrerLinkinHTML(userAddress) {\r\n    const defaultReferrer = '0x0000000000000000000000000000000000000000';\r\n\r\n    let referrerValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) referrerValue = await getReferrer(userAddress);\r\n    // show referrer value only if it's not default : i.e. something other than 0x00...0\r\n    if (referrerValue !== defaultReferrer) {\r\n        const referrerFields = document.querySelectorAll('.refer-referrer');\r\n        const referrerFieldsContainer = document.querySelectorAll('.refer-referrer-container');\r\n        referrerFieldsContainer.forEach(el => {\r\n            el.classList.remove('hidden');\r\n        });\r\n        referrerFields.forEach(el => {\r\n            // in this example - the userAddress = logged out\r\n            el.innerHTML = referrerValue;\r\n        });\r\n    }\r\n\r\n    // uncomment the below line - to check if the addReferrerBtn will show when the reffere is 0x00...00 or not\r\n    // referrerValue = '0x0000000000000000000000000000000000000000'\r\n    /**\r\n     * if referrer is 0x0000000000000000000000000000000000000000\r\n     * then show the ability to change / setReferrer\r\n     * else keep it hidden\r\n     */\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    if (referrerValue === defaultReferrer) setRefferrerBtn.classList.remove('hidden')\r\n    else setRefferrerBtn.classList.add('hidden')\r\n}\r\n\r\n\r\nasync function getReferrer(userAddress) {\r\n    const ABI_getReferrer = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferrer',\r\n        abi: ABI_getReferrer,\r\n        params: {\r\n            _user: userAddress,\r\n        }\r\n    }\r\n\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nasync function populateUserReferralsCount(userAddress) {\r\n    let countValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) countValue = await getReferralsCount(userAddress);\r\n    const referrerFields = document.querySelectorAll('.refer-total');\r\n    referrerFields.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = countValue;\r\n    });\r\n}\r\n\r\n// //the address with with Referrer not 0x000 (provided by Jagjeet)\r\n// const addressWithReferrerNot0x000 = '0x0B277AbA422fD3d1e38e93aFfe684B68fc001647'\r\n\r\nasync function getReferralsCount(userAddress) {\r\n    const ABI_referralsCount = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userReferralsCount\", \"type\": \"address\" }], \"name\": \"getReferralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    // //the address with count=1 (provided by Jagjeet)\r\n    // userAddress = '0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0';\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferralsCount',\r\n        abi: ABI_referralsCount,\r\n        params: {\r\n            _userReferralsCount: userAddress,\r\n        }\r\n    }\r\n\r\n    let r = ''\r\n    try {\r\n        r = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        r = 'error-ln99-app'\r\n        console.error(error);\r\n    }\r\n\r\n    return r\r\n}\r\n\r\nasync function addReferrer() {\r\n    const referrerAddress = document.querySelector('#add-referrer-address');\r\n    const errContainer = document.querySelector('#add-referrer-err');\r\n    const errMsgContainer = document.querySelector('#add-referrer-msg');\r\n\r\n    if (!referrerAddress.value) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Empty Field!');\r\n        return;\r\n    } else if (referrerAddress.value.length <= 6) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!');\r\n        return;\r\n    }\r\n    // at this point the refer address isn't empty and length is > 6 characters\r\n\r\n    try {\r\n        let result = await setReferAddress(referrerAddress.value);\r\n        populateReferrerLinkinHTML(getUserWalletAddress());\r\n        console.log(result);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!!!');\r\n    }\r\n}\r\nasync function setReferAddress(referrerAddress) {\r\n\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"referAddress\", \"type\": \"address\" }], \"name\": \"addReferAddress\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }];\r\n    console.log(`setReferAddress to - ${referrerAddress}`);\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'addReferAddress',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            referAddress: referrerAddress,\r\n        }\r\n    }\r\n\r\n    let transaction;\r\n    try {\r\n        transaction = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return await transaction.wait();\r\n}\r\n\r\nasync function populateUserReferralComissions(userAddress) {\r\n    let commissionValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) commissionValue = await getTotalReferralCommissions(userAddress);\r\n    commissionValue = commissionValue / Math.pow(10, 9);\r\n\r\n    const commssionFields = document.querySelectorAll('.refer-earning');\r\n    commssionFields.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = `${commissionValue} IBAT`;\r\n    });\r\n}\r\n\r\nasync function getTotalReferralCommissions(userAddress) {\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userCommission\", \"type\": \"address\" }], \"name\": \"getTotalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getTotalReferralCommissions',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            _userCommission: userAddress,\r\n        }\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction copyReferLink() {\r\n    // get the referralLink\r\n    /**\r\n        if user logged in - show the box \r\n        else nothing OR hide the box at logout\r\n    * \r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    // store it in variable\r\n    let USER_RefferalLink = `url/${userAddress}`;\r\n    populateReferralLinkinHTML(USER_RefferalLink);\r\n\r\n    navigator.clipboard.writeText(USER_RefferalLink);\r\n\r\n    // console.log(`copied`);\r\n    // populateReferralLinkinHTML('bkahs.gffggffgfggfgffgghjjhjhhjhjhjhjhjjhhhjhjhhjhjhjhhhhhhhhhhhhhhhhhhhhhs');\r\n}\r\nfunction populateReferralLinkinHTML(referralLink) {\r\n    const linkNodes = document.querySelectorAll('.refer-link-text');\r\n    linkNodes.forEach(el => {\r\n        el.innerHTML = referralLink;\r\n    });\r\n}\r\n// copyReferLinkBtn.onclick = copyReferLink;\r\ncopyReferLinkBtns.forEach(el => (el.onclick = copyReferLink))\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * *******************************    WEB3    *******************************\r\n */\r\n// Connecting with Metamask Wallet\r\n// const serverUrl = \"https://cbdyvlhyonhj.usemoralis.com:2053/server\"; //BSC mainnet\r\n// const appId = \"PC04t9NTMGlWn2p5EGf8ukAZbNaZbA1PWrv7IlaC\"; //BSC mainnet\r\n\r\nconst serverUrl = \"https://tdwibddr7hmu.usemoralis.com:2053/server\"; //BSC testnet\r\nconst appId = \"pxANj4iAZAqjimgleq7f5iKzPE3rKJXoFtaMfzYc\"; //BSC testnet\r\n\r\n\r\n\r\nconst CONTRACT_ADDRESS_TESTNET = '0xf8992AE362561427602A50aff0f84085d1fd88f7';\r\nconst REFER_CONTRACT_ADDRESS_TESTNET = '0xfe2E124FE1418419A9efd8Ba987Fa1769D506c8a';\r\nconst referABI = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"referralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"totalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }]\r\nconst referOptions = {\r\n    contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n    abi: referABI,\r\n};\r\n\r\nlet currentChainIdHex; //default chain set to ETH\r\ntry {\r\n    console.info(`starting server...ln310 `);\r\n    // console.info(`starting server...ln310 \\n serverURL : ${serverUrl}`);\r\n    Moralis.start({ serverUrl, appId });\r\n} catch (error) {\r\n    console.error(`Server failed to start -ln312`);\r\n    console.log(error);\r\n}\r\n\r\nconst walletOptions = document.getElementById(\"wallet-options\");\r\nconst loginBtn = document.getElementById(\"web3-login-mm\");\r\nconst logoutBtn = document.getElementById(\"web3-logout\");\r\nconst showTokenBtn = document.getElementById(\"web3-tokens\");\r\n\r\nconst showAddress = document.getElementById(\"web3-wallet-address\");\r\n\r\n// let web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\n// console.log(`ln-329 Provider = `);\r\nlet web3 = new Web3(Moralis.provider || Web3.givenProvider);\r\nconst NODE_URL = \"https://speedy-nodes-nyc.moralis.io/d633c685eb50e4bb5f7bdcf8/bsc/testnet\";\r\nlet provider = new Web3.providers.HttpProvider(NODE_URL);\r\n// console.log(provider);\r\n// let web3 = new Web3(provider);\r\n// let web3 = '';\r\n\r\n\r\nfunction atLogin() {\r\n    /**\r\n    * 1. show referral box - toggle visibility of it\r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    let USER_RefferalLink = `url/${userAddress}`;\r\n    if (presalePasswordEntered) {\r\n        try {\r\n            console.log(`start - populateReferralLinkinHTML ... ln-344`);\r\n            populateReferralLinkinHTML(USER_RefferalLink);\r\n            console.log(`done - populateReferralLinkinHTML ...`);\r\n        } catch (error) {\r\n            console.error(`failed - populateReferralLinkinHTML ... ln-348`);\r\n        }\r\n        try {\r\n            console.log(`start - populateReferrerLinkinHTML ... ln-351`);\r\n            populateReferrerLinkinHTML(userAddress);\r\n            console.log(`done - populateReferrerLinkinHTML`);\r\n        } catch (error) {\r\n            console.error(`failed - populateReferrerLinkinHTML ... ln-355`);\r\n        }\r\n        try {\r\n            console.log(`start - populateUserReferralComissions ... ln-358`);\r\n            populateUserReferralComissions(userAddress);\r\n            console.log(`done - populateUserReferralComissions`);\r\n        } catch (error) {\r\n            console.error(`failed - populateUserReferralComissions ... ln-362`);\r\n        }\r\n        try {\r\n            console.log(`start - populateUserReferralsCount ... ln-365`);\r\n            populateUserReferralsCount(userAddress);\r\n            console.log(`done - populateUserReferralsCount`);\r\n        } catch (error) {\r\n            console.error(`failed - populateUserReferralsCount ... ln-369`);\r\n        }\r\n        // populateUserReferralComissions('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n        // populateUserReferralsCount('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n    }\r\n    // toggles the visibility of connect & disconnect button\r\n    if (isUserConnected()) toggleBtnVisibility(true);\r\n}\r\n\r\n\r\nasync function login(provider) {\r\n    // const BscChainId = \"0x38\"; //Bsc Mainnet ID\r\n    const BscChainId = \"0x61\"; //Bsc Testnet ID\r\n\r\n    console.log(`ln-358 Provider:`);\r\n    console.log(provider);\r\n\r\n    let user = Moralis.User.current();\r\n\r\n    if (!user) {\r\n        console.log(`Provider :${provider} : ${provider === 'walletconnect'}`);\r\n        if (provider === 'walletconnect') {\r\n            try {\r\n                console.info(`Authenticating with WalletConnect ... ln-367`);\r\n                user = await Moralis.authenticate({ provider: \"walletconnect\" });\r\n                // await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n                // await Moralis.enableWeb3();\r\n            } catch (error) {\r\n                console.error(`Authentication Failed - Walletconnect - ln`);\r\n                console.error(error);\r\n            }\r\n        } else {\r\n            try {\r\n                console.info(`Authenticating with MetaMask... ln-376`);\r\n                user = await Moralis.authenticate();\r\n                // await Moralis.enableWeb3();\r\n                currentChainIdHex = await Moralis.switchNetwork(BscChainId);\r\n            } catch (error) {\r\n                console.error(`Authentication Failed - MetaMask`);\r\n                console.error(error);\r\n            }\r\n        }\r\n        try {\r\n            console.info(`Enabling Web3... ln-388`)\r\n            if (provider === 'walletconnect') {\r\n                await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n            } else {\r\n                await Moralis.enableWeb3();\r\n            }\r\n            console.info(`Web3 Enabled... ln-394`)\r\n        } catch (error) {\r\n            console.error(`Failed to enable web3... ln-396`);\r\n            console.log(error);\r\n        }\r\n\r\n        // web3 = new Web3(Web3.givenProvider || provider || Moralis.provider || \"ws://localhost:8545\")\r\n        // web3 = new Web3(provider || Moralis.provider || Web3.givenProvider || \"ws://localhost:8545\")\r\n\r\n    }\r\n    currentChainIdHex = await Moralis.getChainId();\r\n    // await Moralis.enableWeb3();\r\n\r\n    if (isUserConnected()) {\r\n        atLogin();\r\n        showAddress.dataset.tip = user.get(\"ethAddress\");\r\n        getBalance(currentChainIdHex, user.get(\"ethAddress\"));\r\n    }\r\n    // moved the below two lines inside atLogin()\r\n    // // toggles the visibility of connect & disconnect button\r\n    // toggleBtnVisibility(true);\r\n\r\n\r\n    // Below address is on both BSC & ETH Scan - \r\n    // getBalance('0x1', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // eth chain\r\n    // getBalance('0x38', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // bsc chain - this account has BUSD in it\r\n}\r\n\r\n\r\nfunction getUserWalletAddress() {\r\n    let err = 'Logged Out';\r\n    if (!isUserConnected())\r\n        return err;\r\n\r\n    return Moralis.User.current().get(\"ethAddress\");\r\n\r\n}\r\nfunction isUserConnected() {\r\n    let user = Moralis.User.current();\r\n    return user ? true : false;\r\n}\r\n\r\nasync function logOut() {\r\n    await Moralis.User.logOut();\r\n    console.log(\"logged out\");\r\n    // toggleBtnVisibility(false);\r\n    // showAddress.dataset.tip = 'Wallet not connected';\r\n    atLogout()\r\n}\r\nfunction atLogout() {\r\n    /**\r\n     * 1. hide referral box\r\n     */\r\n    // need to \r\n    presalePasswordEntered = false;\r\n\r\n    populateReferralLinkinHTML('Logged Out');\r\n    populateReferrerLinkinHTML('Logged Out')\r\n    populateUserReferralComissions('0');\r\n    populateUserReferralsCount(0);\r\n\r\n    // hiding addreferrer btn when logging out\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    setRefferrerBtn.classList.add('hidden')\r\n\r\n    toggleBtnVisibility(false);\r\n    showAddress.dataset.tip = 'Wallet not connected';\r\n    setPresalePassword();\r\n    showArenaLock(true);\r\n}\r\n\r\n\r\nasync function getBalance(chainId, address) {\r\n    const tokenList = document.getElementById('token-list');\r\n    currentChainIdHex = await Moralis.getChainId();\r\n    let currentUser = Moralis.User.current();\r\n    let currentUserAddress = currentUser.get(\"ethAddress\");\r\n    const options = { chain: chainId || currentChainIdHex || '0x38', address: address || currentUserAddress || \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" };\r\n    // console.log(`getBalance called with \\n chaidId ${options.chain} and \\n of address: ${options.address}`);\r\n    // const options = { chain: 'eth', address: \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" } // test address from Etherscan\r\n    // const options = { chain: 'bsc', address: \"0x60913d3fE722bFE425247D7673D8bdbDA56D1e02\" } // test address from BSC (bscscan)\r\n\r\n    const nativeBal = await Moralis.Web3API.account.getNativeBalance(options);\r\n\r\n    tokenList.innerHTML = `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto mt-2\"><span class=\"w-1/2 text-center\">${HEX_TO_CHAIN_DETAILS[currentChainIdHex].nativeToken}</span><span class=\"w-1/2 text-left\">${web3.utils.fromWei(nativeBal.balance)}</span></li>`\r\n\r\n    const balances = await Moralis.Web3API.account.getTokenBalances(options);\r\n\r\n    if (balances.length) {\r\n        balances.forEach(token => {\r\n            // console.log(`not - ${token.symbol}`);\r\n            if (token.symbol == 'USDC' || token.symbol == 'BUSD' || token.symbol == 'IBAT') {\r\n                const balance = convertTokenBalance(token.balance, token.decimals);\r\n                // const tokenFromWei = web3.utils.fromWei(token.balance)\r\n                tokenList.innerHTML += `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto\"><span class=\"w-1/2 text-center\">${token.symbol}</span><span class=\"w-1/2 text-left\">${balance}</span></li>`\r\n            }\r\n        });\r\n    } else {\r\n        tokenList.innerHTML += `<li class=\"w-full text-center mx-auto text-xs opacity-80 mt-2\">no other tokens available</li>`\r\n    }\r\n}\r\n\r\n\r\nfunction toggleBtnVisibility(connected) {\r\n    const allBtns = document.querySelectorAll('.wallet-options-btn ');\r\n    if (connected) { //show\r\n        // loginBtn.classList.add('hidden');\r\n        allBtns.forEach(btn => {\r\n            btn.classList.add('hidden');\r\n        });\r\n        // walletOptions.classList.add('hidden');\r\n        logoutBtn.classList.remove('hidden');\r\n        showTokenBtn.classList.remove('hidden');\r\n    }\r\n    else {\r\n        // loginBtn.classList.remove('hidden');\r\n        // walletOptions.classList.remove('hidden');\r\n        allBtns.forEach(btn => {\r\n            btn.classList.remove('hidden');\r\n        });\r\n        logoutBtn.classList.add('hidden');\r\n        showTokenBtn.classList.add('hidden');\r\n    }\r\n}\r\n\r\n\r\nfunction convertTokenBalance(balance, decimals) {\r\n    let newBalance = balance == 0 ? 0 : balance / Math.pow(10, decimals);\r\n    newBalance = newBalance < 0.001 ? 0 : newBalance;\r\n    return newBalance;\r\n}\r\n\r\nasync function isPresaleOpen() {\r\n    // await Moralis.enableWeb3();\r\n    const ABI = [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    const result = await readFunction('isPresaleOpen', ABI);\r\n    // console.log(`isPresaleOpen = ${result}`);\r\n}\r\n\r\n// isPresaleOpen();\r\n\r\nasync function readFunction(functionName, ABI) {\r\n    // let options = {\r\n    //     contractAddress: '0x356d2E7a0d592bAd95E86d19479c37cfdBb68Ab9',\r\n    //     functionName: 'isPresaleOpen',\r\n    //     abi: [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }],\r\n    //     Params: {\r\n    //         Note: 'Thanks for your work'\r\n    //     },\r\n    //     msgValue: Moralis.Units.ETH(0.1)\r\n    // }\r\n    let options = {\r\n        contractAddress: CONTRACT_ADDRESS_TESTNET,\r\n        functionName: functionName,\r\n        abi: ABI,\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction getBuyAmount() {\r\n    // @todo: validate input\r\n    let buyAmount = 0;\r\n    const buyAmounts = document.querySelectorAll('.buy-amount');\r\n    // console.log(buyAmounts.length);\r\n\r\n    // const buyAmountMob = document.getElementById(\"buy-amount-mobile\");\r\n    // const buyAmountDesktop = document.getElementById(\"buy-amount-desktop\");\r\n    // if (buyAmountMob.classList.contains(hidden))\r\n    buyAmounts.forEach(el => {\r\n        if (el.value) {\r\n            // console.log(`${el.value}`);\r\n            buyAmount = +el.value;\r\n        }\r\n    });\r\n    // console.log(+buyAmount);\r\n    return buyAmount;\r\n}\r\nasync function buyToken() {\r\n    // console.log('Ran buyToken()');\r\n    let value = getBuyAmount();\r\n    // console.log(value);\r\n\r\n    // await Moralis.enableWeb3();\r\n    if (!isUserConnected()) {\r\n        console.log('User not Logged in - connect wallet');\r\n        return;\r\n    }\r\n\r\n\r\n    const FUNCTION_NAME = 'buyToken';\r\n    const ABI = [{ \"inputs\": [], \"name\": \"buyToken\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"payable\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: CONTRACT_ADDRESS_TESTNET,\r\n        functionName: FUNCTION_NAME,\r\n        abi: ABI,\r\n        msgValue: Moralis.Units.ETH(value)\r\n    }\r\n    let result;\r\n    try {\r\n        result = await Moralis.executeFunction(options);\r\n        // console.log(`Result \\n${result}`);\r\n    } catch (error) {\r\n        const errMsg = document.getElementById('buy-token-error-msg');\r\n        errMsg.innerHTML = error.data.message;\r\n        toggleErrMsg();\r\n    }\r\n}\r\nfunction toggleErrMsg() {\r\n    const errMsg = document.getElementById('buy-token-error-input');\r\n    errMsg.checked = !errMsg.checked;\r\n}\r\n\r\n\r\nloginBtn.onclick = login;\r\nlogoutBtn.onclick = logOut;\r\n// showTokenBtn.onclick = getBalance;\r\n\r\nconst HEX_TO_CHAIN_DETAILS = {\r\n    '0x1': {\r\n        chain: 'ETH',\r\n        nativeToken: 'ETH'\r\n    },\r\n    '0x61': {\r\n        // BSC testnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n    ,\r\n    '0x38': {\r\n        // BSC mainnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n}\r\n\r\n"],"names":["loader","document","getElementById","navItems","querySelectorAll","navigateTo","el","itemToShow","forEach","item","classList","contains","add","remove","setTimeout","hideSwap","elId","hide","querySelector","style","visibility","presalePasswordEntered","authenticatePresale","isUserConnected","showPasswordErrMsg","userEnteredPassword","value","showArenaLock","setPresalePassword","password","msg","passwordErrMsg1","innerHTML","passwordErrMsg","showErrMsg","elContainer","msgContainer","hideErrMsg","show","arenaLock","copyReferLinkBtns","populateReferrerLinkinHTML","userAddress","defaultReferrer","referrerValue","getReferrer","referrerFields","setRefferrerBtn","contractAddress","REFER_CONTRACT_ADDRESS_TESTNET","functionName","abi","internalType","name","type","outputs","stateMutability","params","_user","Moralis","executeFunction","options","async","populateUserReferralsCount","countValue","getReferralsCount","_userReferralsCount","r","error","console","addReferrer","referrerAddress","errContainer","errMsgContainer","length","result","setReferAddress","getUserWalletAddress","log","transaction","inputs","referAddress","wait","populateUserReferralComissions","commissionValue","getTotalReferralCommissions","Math","pow","_userCommission","copyReferLink","populateReferralLinkinHTML","USER_RefferalLink","navigator","clipboard","writeText","referralLink","onclick","referOptions","referABI","currentChainIdHex","info","start","serverUrl","appId","walletOptions","Web3","provider","givenProvider","providers","HttpProvider","NODE_URL","error1","error2","error3","toggleBtnVisibility","login","provider1","User","current","user","authenticate","error4","switchNetwork","error5","enableWeb3","error6","getChainId","atLogin","showAddress","dataset","tip","get","logOut","atLogout","getBalance","chainId","address","tokenList","currentUserAddress","chain","nativeBal","Web3API","account","getNativeBalance","HEX_TO_CHAIN_DETAILS","nativeToken","web3","utils","fromWei","balance","balances","getTokenBalances","token","symbol","convertTokenBalance","decimals","connected","allBtns","btn","logoutBtn","newBalance","isPresaleOpen","readFunction","ABI","CONTRACT_ADDRESS_TESTNET","getBuyAmount","buyAmount","buyToken","msgValue","Units","ETH","error7","data","message","toggleErrMsg","errMsg","checked"],"version":3,"file":"dapp.ff8e25d6.js.map"}