{"mappings":"SAASA,WAAWC,EAAaC,EAAcC,GACtCF,GAAgBC,GAIrBA,EAAaE,UAAYD,EAEzBF,EAAYI,UAAUC,OAAO,aAC7BL,EAAYI,UAAUE,IAAI,eAC1BC,WAAWC,WAAY,IAAMR,IAPzBS,QAAQC,MAAM,6CASbF,WAAWG,GACXA,GAILA,EAAGP,UAAUE,IAAI,aACjBK,EAAGP,UAAUC,OAAO,gBAJhBI,QAAQC,MAAM,yCAQbE,cAAcD,GACnBA,EAAGP,UAAUE,IAAI,wBAEZO,aAAaF,GAClBA,EAAGP,UAAUC,OAAO,wBAGfS,sBAAsBC,EAAS,KAAMC,EAAU,OAEpD,MACMC,EADeF,EACsBC,EAAW,IAEtD,QADmBE,KAAKC,MAA2B,IAArBF,GAA4B,cAIrDG,kBAAkBC,GACFC,SAASC,iBAAiB,kBAClCC,SAAQb,IACjBA,EAAGc,MAAQX,2BAgCf,MAAAY,aAAkB,OACrBC,WAAAL,SAAAM,cAAA,0BACQN,SAAkBM,cAAc,wBAKhCC,qBACLF,WAAKF,MAAAK,oBAAAC,UAAAN,gBAEDK,oBAAcE,UACdA,EAAaC,4DAGTR,MAAAS,mBAAqBP,WAAAF,mCAErBU,UACAA,EAAAF,mDAEJG,OAAOC,UAA4BD,OAAAC,WAAE,GACrCC,UAAO,GACTC,UAAW,CACTC,MAAQ,eACRC,aAAgB,gBACnBC,mBAAA,EACJC,iBAAA,QACQC,qBAAa,EACbC,kBAAA,CACMP,UAAAA,oBAGHQ,IAAA,wBAA6BP,kBAC7BF,UAAAU,KAAkBR,iBAClBS,WACAtC,MAAA,qCACAA,MAAAsC,EAAAC,gCACAC,cAAgCb,UAAAD,OAAAC,WAAA,GACpCE,UAAC,CACDC,MAAW,eACXC,aAAkB,gBACfC,mBAAM,EAACC,iBAAqB,aAAIC,qBAAA,EAC1CM,cAAA,CAEQA,cAAAA,GAEDL,kBAAmB,CACnBP,UAAAA,oBAGIQ,IAAA,qBAAoBP,mBACpBO,IAAAV,OAAAC,UAAqBU,KAAAR,kBACrBS,WACAF,IAAAE,EAAAC,uCACgCD,wBACfZ,OAAgBC,WAAA,aAAE,GACvCE,UAAC,CACDC,MAAW,eAERC,aAAM,OACTC,mBAAe,EACfC,iBAAgB,aACnBC,qBAAA,EACJC,kBAAA,CAEQP,UAAAA,WAEDY,cAAmB,CACZA,cAAgBF,YAGnBF,IAAA,qBAAqBP,WAAA9B,QAAAqC,IAAAV,OAAAC,UAAAU,KAAAR,kBACrBY,WACAzC,MAAA,0CACAA,MAAAyC,EAAAF,+CACgBG,cAAcf,UAAAD,OAAAC,WAAA,GAClCD,OAACC,UAAAU,KAAA,CACEP,MAAM,eACTC,aAAe,OACfC,mBAAuB,EAC1BC,iBAAA,qBACJC,qBAAA,EAEQC,kBAAA,CACgKP,UAAAA,WAEjKY,cAAmB,CACZE,YAAAA,WAGHJ,WACAtC,MAAA,kDACAA,MAAAsC,EAAAC,2CACgCC,EAAAG,EAAAC,EAAAC,cACAlB,UAAAD,OAAAC,WAAA,UAChCA,UAAaU,KAAG,OAAC,eAAcN,aAAC,OAChCC,mBAAuB,EACvBC,iBAAgB,sCAAS,EAACE,kBAAC,CAC3BP,UAAAA,yBACwB,CAAEY,cAAAA,GAE3BG,cAAM,CACDA,cAAAA,GAEXG,iBAAA,MACJC,cAAA,gKArGSC,QAAG7B,mBACbF,WAAC+B,QAAAC","sources":["src/js/utils.js"],"sourcesContent":["function showErrMsg(elContainer, msgContainer, msg) {\r\n    if (!elContainer || !msgContainer) {\r\n        console.error('Invalid Arguments - showErrMsg()');\r\n        return;\r\n    };\r\n    msgContainer.innerHTML = msg;\r\n    // elContainer.classList.remove('h-0')\r\n    elContainer.classList.remove('opacity-0')\r\n    elContainer.classList.add('opacity-100')\r\n    setTimeout(hideErrMsg, 1000, elContainer);\r\n}\r\nfunction hideErrMsg(el) {\r\n    if (!el) {\r\n        console.error('hideErrMsg:Invalid Arguments');\r\n        return;\r\n    };\r\n    el.classList.add('opacity-0');\r\n    el.classList.remove('opacity-100');\r\n    // el.classList.add('h-0');\r\n}\r\n\r\nfunction disableButton(el) {\r\n    el.classList.add('disable-btn');\r\n}\r\nfunction enableButton(el) {\r\n    el.classList.remove('disable-btn');\r\n}\r\n\r\nfunction percentageOfBNBRaised(amount = 1700, HARDCAP = 16500) {\r\n    // const raisedAmount = 1.7;\r\n    const raisedAmount = amount; //testing\r\n    const percentageExtended = (raisedAmount / HARDCAP) * 100;\r\n    const percentage = Math.round(percentageExtended * 100) / 100\r\n    return +percentage;\r\n}\r\n\r\nfunction updateProgressBar(percentage) {\r\n    const progressBars = document.querySelectorAll('.sale-progress');\r\n    progressBars.forEach(el => {\r\n        el.value = percentageOfBNBRaised();\r\n    });\r\n}\r\n\r\n/**\r\n * The below code works with following HTML\r\n\r\n    <div class=\"relative\">\r\n        <input type=\"text\" placeholder=\"Amount (IBAT)\" class=\"buy-amount\" id=\"ibat-amount\">\r\n        <span id=\"ibat-amount-span\">IBAT</span>\r\n    </div>\r\n    <div class=\"relative\">\r\n        <input type=\"text\" placeholder=\"Total (BNB)\" class=\"buy-amount\" id=\"bnb-amount\">\r\n        <span id=\"bnb-amount-span\">BNB</span>\r\n    </div>\r\n\r\n */\r\nconst IBAT_PER_BNB = +156250;\r\nconst ibatAmount = document.querySelector('#ibat-amount');\r\nconst BNBAmount = document.querySelector('#bnb-amount');\r\nBNBAmount.onkeyup = populateIBATAmount;\r\nibatAmount.onkeyup = populateBNBAmount;\r\n\r\nfunction populateIBATAmount() {\r\n    ibatAmount.value = calculateIBATAmount(BNBAmount.value)\r\n}\r\nfunction calculateIBATAmount(BNBAmount) {\r\n    return +(BNBAmount * IBAT_PER_BNB_PRESALE);\r\n}\r\n\r\n\r\nfunction populateBNBAmount() {\r\n    BNBAmount.value = calculateBNBAmount(ibatAmount.value)\r\n}\r\nfunction calculateBNBAmount(IBATAmount) {\r\n    return +(IBATAmount / IBAT_PER_BNB_PRESALE);\r\n}\r\n\r\n\r\nfunction checkDataLayer() {\r\n    try {\r\n        window.dataLayer = window.dataLayer || [];\r\n        errorCode = \"\";\r\n        arguments = {\r\n            event: 'workflowStep',\r\n            workflowName: 'connectWallet',\r\n            workflowStepNumber: 1,\r\n            workflowStepName: 'start',\r\n            workflowCompleteFlag: 0,\r\n            workflowErrorCode: { errorCode }\r\n        };\r\n        console.log(\"dev-check-data-layer-\", arguments);\r\n        window.dataLayer.push(arguments);\r\n    } catch (e) {\r\n        console.error(`dev:checkDataLayer failed`);\r\n        console.error(e.message);\r\n    }\r\n}\r\nfunction hitDataLayer(walletAddress) {\r\n    try {\r\n        window.dataLayer = window.dataLayer || [];\r\n        arguments = {\r\n            event: 'workflowStep',\r\n            workflowName: 'connectWallet',\r\n            workflowStepNumber: 2,\r\n            workflowStepName: 'successful',\r\n            workflowCompleteFlag: 1,\r\n            walletAddress: { walletAddress },\r\n            workflowErrorCode: { errorCode }\r\n        };\r\n        console.log(\"dev-hit-data-layer\", arguments);\r\n        console.log(window.dataLayer.push(arguments));\r\n    } catch (e) { console.log(e.message); }\r\n}\r\n\r\nfunction swapAmountDataLayer(e) {\r\n    try {\r\n        window.dataLayer = window.dataLayer || [];\r\n        errorCode = \"\";\r\n        arguments = {\r\n            event: 'workflowStep',\r\n            workflowName: 'swap',\r\n            workflowStepNumber: 1,\r\n            workflowStepName: 'swapAmount',\r\n            workflowCompleteFlag: 0,\r\n            workflowErrorCode: { errorCode },\r\n            walletAddress: { walletAddress: e },\r\n        };\r\n        console.log(\"dev-hit-data-layer\", arguments),\r\n            console.log(window.dataLayer.push(arguments));\r\n    } catch (e) {\r\n        console.error(`dev:swapAmountDataLayer failed`);\r\n        console.error(e.message);\r\n    }\r\n}\r\n\r\nfunction confirmTransactionDataLayer(userAddress) {\r\n    try {\r\n        window.dataLayer = window.dataLayer || [];\r\n        window.dataLayer.push({\r\n            event: \"workflowStep\",\r\n            workflowName: \"swap\",\r\n            workflowStepNumber: 3,\r\n            workflowStepName: \"confirmTransaction\",\r\n            workflowCompleteFlag: 0,\r\n            workflowErrorCode: { errorCode },\r\n            walletAddress: { userAddress },\r\n        });\r\n    } catch (e) {\r\n        console.error(`dev:confirmTransactionDataLayer failed`);\r\n        console.error(e.message);\r\n    }\r\n}\r\n\r\nfunction swapSuccessfulDataLayer(walletAddress, transactionId, BNBValue, IBATValue) {\r\n    // so the swapFromCurrency is BNB, and swapFromValue is how much BNB is being swapped, and swapToCurrency is IBAT, and swapToValue is the value of IBAT being swapped\r\n    try {\r\n        window.dataLayer = window.dataLayer || [];\r\n        window.dataLayer.push({\r\n            event: \"workflowStep\",\r\n            workflowName: \"swap\",\r\n            workflowStepNumber: 3,\r\n            workflowStepName: \"swapSuccessful\",\r\n            workflowCompleteFlag: 1,\r\n            workflowErrorCode: { errorCode },\r\n            walletAddress: { walletAddress },\r\n            transactionId: { transactionId },\r\n            swapFromCurrency: \"BNB\",\r\n            swapFromValue: { BNBValue },\r\n            swapToCurrency: \"IBAT\",\r\n            swapToValue: { IBATValue }\r\n        });\r\n    } catch (e) {\r\n        console.error(`dev:swapSuccessfulDataLayer failed`);\r\n        console.error(e.message);\r\n    }\r\n}"],"names":["showErrMsg","elContainer","msgContainer","msg","innerHTML","classList","remove","add","setTimeout","hideErrMsg","console","error","el","disableButton","enableButton","percentageOfBNBRaised","amount","HARDCAP","percentageExtended","Math","round","updateProgressBar","percentage","document","querySelectorAll","forEach","value","IBAT_PER_BNB","ibatAmount","querySelector","populateIBATAmount","calculateIBATAmount","BNBAmount","BNBAmount1","IBAT_PER_BNB_PRESALE","calculateBNBAmount","IBATAmount","window","dataLayer","errorCode","arguments","event","workflowName","workflowStepNumber","workflowStepName","workflowCompleteFlag","workflowErrorCode","log","push","e","message","walletAddress","e1","userAddress","transactionId","BNBValue","IBATValue","swapFromCurrency","swapFromValue","onkeyup","populateBNBAmount"],"version":3,"file":"index.352558cb.js.map"}