{"mappings":"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","sources":["src/js/referralHandler.js"],"sourcesContent":["\r\n// const copyReferLinkBtn = document.getElementById(\"refer-link-icon\");\r\nconst copyReferLinkBtns = document.querySelectorAll(\".refer-link\");\r\nconst DECIMALS = +18;\r\n// async function populateReferrerOf(userAddress) {\r\nconst defaultReferrer = '0x0000000000000000000000000000000000000000';\r\nasync function populateReferrerinHTML(userAddress) {\r\n    console.log(`populateReferrerinHTML - ${userAddress}`);\r\n    let referrerValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) referrerValue = await getReferrer(userAddress);\r\n    // show referrer value only if it's not default : i.e. something other than 0x00...0\r\n\r\n    const referrerField = document.querySelector('.refer-referrer');\r\n    // if (referrerValue !== defaultReferrer) {\r\n    console.log(`dev:Setting Referrer Field`);\r\n    if (referrerField) {\r\n        referrerField.value = referrerValue;\r\n    } else {\r\n        console.error(`dev:referrerField missing`);\r\n    }\r\n    // const referrerFields = document.querySelectorAll('.refer-referrer');\r\n    // const referrerFieldsContainer = document.querySelectorAll('.refer-referrer-container');\r\n    // referrerFieldsContainer && referrerFieldsContainer.forEach(el => {\r\n    //     el.classList.remove('hidden');\r\n    // });\r\n    // referrerFields && referrerFields.forEach(el => {\r\n    //     // in this example - the userAddress = logged out\r\n    //     el.value = referrerValue;\r\n    // });\r\n    // }\r\n\r\n    // uncomment the below line - to check if the addReferrerBtn will show when the reffere is 0x00...00 or not\r\n    // referrerValue = '0x0000000000000000000000000000000000000000'\r\n    /**\r\n     * if referrer is 0x0000000000000000000000000000000000000000\r\n     * then show the ability to change / setReferrer\r\n     * else keep it hidden\r\n     */\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    if (setRefferrerBtn) {\r\n        if (referrerValue === defaultReferrer) setRefferrerBtn.classList.remove('hidden')\r\n        else setRefferrerBtn.classList.add('hidden')\r\n    }\r\n    const addReferrerBtn = document.getElementById('add-referrer-btn');\r\n    const addReferrerInput = document.getElementById('add-referrer-address');\r\n    if (referrerValue !== defaultReferrer) {\r\n        disableButton(addReferrerBtn);\r\n        disableButton(addReferrerInput);\r\n    }\r\n}\r\n\r\nasync function getTotalBnbAMount() {\r\n    await Moralis.enableWeb3();\r\n    const functionName = 'totalBNBAmount';\r\n    // const ABI_totalBnbAMount = [{ \"inputs\": [], \"name\": \"totalBNBAmount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    const ABI_totalBnbAMount = [{ \"inputs\": [], \"name\": \"totalBNBAmount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let raisedAmount = await readFunction(functionName, ABI_totalBnbAMount);\r\n    // raisedAmount = raisedAmount / Math.pow(10, DECIMALS);\r\n    // using 15 decimals for testing\r\n    raisedAmount = raisedAmount / Math.pow(10, 15);\r\n    console.log(`Raised Amount is`);\r\n    console.log(raisedAmount);\r\n}\r\n\r\nasync function getReferrer(userAddress) {\r\n    const ABI_getReferrer = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferrer',\r\n        abi: ABI_getReferrer,\r\n        params: {\r\n            _user: userAddress,\r\n        }\r\n    }\r\n\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nasync function populateUserReferralsCount(userAddress) {\r\n    let countValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) countValue = await getReferralsCount(userAddress);\r\n    const referrerFields = document.querySelectorAll('.refer-total');\r\n    referrerFields && referrerFields.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = countValue;\r\n    });\r\n}\r\n\r\n// //the address with with Referrer not 0x000 (provided by Jagjeet)\r\n// const addressWithReferrerNot0x000 = '0x0B277AbA422fD3d1e38e93aFfe684B68fc001647'\r\n\r\nasync function getReferralsCount(userAddress) {\r\n    const ABI_referralsCount = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userReferralsCount\", \"type\": \"address\" }], \"name\": \"getReferralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    // //the address with count=1 (provided by Jagjeet)\r\n    // userAddress = '0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0';\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferralsCount',\r\n        abi: ABI_referralsCount,\r\n        params: {\r\n            _userReferralsCount: userAddress,\r\n        }\r\n    }\r\n\r\n    let r = ''\r\n    try {\r\n        r = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        r = 'error-ln99-app'\r\n        console.error(error);\r\n    }\r\n\r\n    return r\r\n}\r\n\r\nasync function addReferrer() {\r\n    const referrerAddress = document.querySelector('#add-referrer-address');\r\n    const errContainer = document.querySelector('#buy-token-error-con');\r\n    const errMsgContainer = document.querySelector('#buy-token-error-msg');\r\n    // const errContainer = document.querySelector('#add-referrer-err');\r\n    // const errMsgContainer = document.querySelector('#add-referrer-msg');\r\n    // let refAdd = referrerAddress.value + '';\r\n    // refAdd = refAdd.toLowerCase();\r\n\r\n\r\n\r\n    // console.log(referrerAddress);\r\n    // console.log(referrerAddress.value);\r\n\r\n    /**\r\n     * if the existing referrer field is populated and is equal to default referrer then show error.\r\n     */\r\n    if (referrerAddress && !referrerAddress.value) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Empty Referrer Address Field!');\r\n        return;\r\n    } else if (referrerAddress && referrerAddress.value.length <= 6) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!');\r\n        return;\r\n    } else if (isUserConnected) {\r\n        await Moralis.enableWeb3();\r\n        if (!isUserConnected()) {\r\n            showErrMsg(errContainer, errMsgContainer, 'Wallet not connected!');\r\n            return;\r\n        }\r\n    } else {\r\n        console.error(`referrerAddress#add-referrer-address missing`);\r\n        // return;\r\n    }\r\n\r\n    const existingReferrerValue = document.querySelector('.refer-referrer').value;\r\n    console.log(existingReferrerValue);\r\n    console.log(existingReferrerValue !== defaultReferrer);\r\n    console.log(defaultReferrer);\r\n    if (existingReferrerValue !== defaultReferrer) {\r\n        console.log(`======= ${existingReferrerValue}`);\r\n        showErrMsg(errContainer, errMsgContainer, 'Referrer Address already setup!');\r\n        return;\r\n    }\r\n    // at this point the refer address exists, isn't empty and length is > 6 characters\r\n\r\n    try {\r\n        let result = await setReferAddress(referrerAddress.value);\r\n        // let result = await setReferAddress(refAdd);\r\n        populateReferrerinHTML(getUserWalletAddress());\r\n        console.log(result);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!!!');\r\n    }\r\n}\r\nasync function setReferAddress(referrerAddress) {\r\n\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"referAddress\", \"type\": \"address\" }], \"name\": \"addReferAddress\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }];\r\n    console.log(`setReferAddress to - ${referrerAddress}`);\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'addReferAddress',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            referAddress: referrerAddress,\r\n        }\r\n    }\r\n\r\n    let transaction;\r\n    try {\r\n        transaction = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return await transaction.wait();\r\n}\r\n\r\nasync function populateUserReferralComissions(userAddress) {\r\n    console.log(`Getting commission of: ${userAddress}`);\r\n    let commissionValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) commissionValue = await getTotalReferralCommissions(userAddress);\r\n    commissionValue = commissionValue / Math.pow(10, DECIMALS);\r\n\r\n    const commssionFields = document.querySelectorAll('.refer-earning');\r\n    commssionFields && commssionFields.forEach(el => {\r\n        console.log(`Setting commission to: ${commissionValue}`);\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = `${commissionValue} IBAT`;\r\n    });\r\n}\r\n\r\nasync function getTotalReferralCommissions(userAddress) {\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userCommission\", \"type\": \"address\" }], \"name\": \"getTotalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getTotalReferralCommissions',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            _userCommission: userAddress,\r\n        }\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nasync function populateUsersInvestments(userAddress) {\r\n    console.log(`Getting commission of: ${userAddress}`);\r\n    let investmentValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) investmentValue = await getUsersInvestments(userAddress);\r\n    investmentValue = investmentValue / Math.pow(10, DECIMALS);\r\n\r\n    const investmentFields = document.querySelectorAll('.user-investment');\r\n    investmentFields && investmentFields.forEach(el => {\r\n        console.log(`Setting investment to: ${investmentValue}`);\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = `${investmentValue} IBAT`;\r\n    });\r\n}\r\n\r\nconst refreshUsersInvestmentBtn = document.getElementById('refreshUsersInvestmentsBtn');\r\nif (refreshUsersInvestmentBtn) {\r\n    refreshUsersInvestmentBtn.onclick = refreshUsersInvestments;\r\n} else {\r\n    console.error(`Refresh UserInvestmentBtn missing in UI`);\r\n}\r\n\r\nfunction refreshUsersInvestments() {\r\n    console.log(`refresh usersInvestments`);\r\n    if (!isUserConnected()) return;\r\n    try {\r\n        populateUsersInvestments(getUserWalletAddress());\r\n        // console.log(`done refresh after buying - populateUsersInvestments`);\r\n    } catch (error) {\r\n        console.error(`failed refresh after buying - populateUsersInvestments`);\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function getUsersInvestments(userAddress) {\r\n    const ABI_usersInvestments = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"usersInvestments\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"stateMutability\": \"payable\", \"type\": \"receive\" }];\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'usersInvestments',\r\n        abi: ABI_usersInvestments,\r\n        params: {\r\n            \"\": userAddress,\r\n        }\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction copyReferLink() {\r\n    // get the referralLink\r\n    /**\r\n        if user logged in - show the box \r\n        else nothing OR hide the box at logout\r\n    * \r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    // store it in variable\r\n    const URL_Prefix = 'https://presale.battleinfinity.io/?refercode='\r\n    let USER_RefferalLink = `${URL_Prefix}${userAddress}`;\r\n    populateReferralLinkinHTML(USER_RefferalLink);\r\n\r\n    navigator.clipboard.writeText(USER_RefferalLink);\r\n\r\n    // console.log(`copied`);\r\n    // populateReferralLinkinHTML('bkahsasdasd');\r\n}\r\nfunction populateReferralLinkinHTML(referralLink) {\r\n    const linkNodes = document.querySelectorAll('.refer-link-text');\r\n    linkNodes && linkNodes.forEach(el => {\r\n        el.innerHTML = referralLink;\r\n        el.value = referralLink;\r\n    });\r\n}\r\n// copyReferLinkBtn.onclick = copyReferLink;\r\ncopyReferLinkBtns.forEach(el => (el.onclick = copyReferLink))\r\n"],"names":["copyReferLinkBtns","document","querySelectorAll","DECIMALS","defaultReferrer","populateReferrerinHTML","userAddress","console","log","referrerValue","isUserConnected","getReferrer","referrerField","querySelector","value","error","setRefferrerBtn","classList","remove","add","addReferrerBtn","getElementById","addReferrerInput","disableButton","getTotalBnbAMount","Moralis","enableWeb3","raisedAmount","readFunction","internalType","name","type","stateMutability","Math","pow","options","REFER_CONTRACT_ADDRESS_TESTNET","functionName","abi","params","_user","executeFunction","populateUserReferralsCount","countValue","getReferralsCount","referrerFields","forEach","el","innerHTML","_userReferralsCount","r","addReferrer","referrerAddress","errContainer","errMsgContainer","showErrMsg","length","existingReferrerValue","result","setReferAddress","getUserWalletAddress","transaction","contractAddress","inputs","outputs","referAddress","wait","populateUserReferralComissions","commissionValue","getTotalReferralCommissions","commssionFields","_userCommission","populateUsersInvestments","investmentValue","getUsersInvestments","investmentFields","refreshUsersInvestmentBtn","refreshUsersInvestments","copyReferLink","USER_RefferalLink","populateReferralLinkinHTML","navigator","clipboard","writeText","onclick"],"version":3,"file":"index.e41f6f40.js.map"}