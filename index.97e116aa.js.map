{"mappings":"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","sources":["src/js/devWeb3.js"],"sourcesContent":["window.onload = async function () {\r\n    /**\r\n     * - if user is already connected - but only page was refreshed - atlogin()\r\n    */\r\n    await Moralis.enableWeb3();\r\n    if (isUserConnected()) {\r\n        console.log(`Page-refreshed - User already connected`);\r\n        login();\r\n    }\r\n    console.log(`Page-refreshed - User not connected`);\r\n\r\n    /**\r\n     * Commencted \r\n     */\r\n    // if (!Moralis.isWeb3Enabled()) {\r\n    //     console.log(`await Moralis.enableWeb3()`);\r\n    // };\r\n    populateAmountRaisedinHTML();\r\n};\r\n/**\r\n * *******************************    WEB3    *******************************\r\n */\r\n// Connecting with Metamask Wallet\r\n\r\n// Moralis Config details\r\n/**\r\n * forshared\r\n // const serverUrl = \"https://tdwibddr7hmu.usemoralis.com:2053/server\"; //BSC testnet\r\n // const appId = \"pxANj4iAZAqjimgleq7f5iKzPE3rKJXoFtaMfzYc\"; //BSC testnet\r\n */\r\n\r\n// paid-account-joshi-\r\n// const serverUrl = \"https://gusm6vrpbwtk.usemoralis.com:2053/server\"; //BSC testnet\r\n// const appId = \"glRYjrZo9XjLE2MPc7sWgzc4PyoFs3RbmyoNiPbf\"; //BSC testnet\r\nconst serverUrl = \"https://gb6gwydcjjw6.usemoralis.com:2053/server\"; //BSC mainnet\r\nconst appId = \"Zq3s8magh8mlppfXIGSHZRdLj49LlCnIaqs2mD2U\"; //BSC mainnet\r\n\r\nconst TEST_ENVIRONMENT = false;\r\n\r\nlet web3Instance = '';\r\n\r\nconst REFER_CONTRACT_ADDRESS_TESTNET = '0xfe2E124FE1418419A9efd8Ba987Fa1769D506c8a';\r\n// if TEST_ENVIRONMENT is false then use mainnet contract else testnet contract\r\nconst REFER_CONTRACT_ADDRESS = '0x5832E385f633b30519B3ECaDE3C5eD3d9881cf58'; //mainnet contract\r\nconst CONTRACT_ADDRESS_TESTNET = REFER_CONTRACT_ADDRESS;\r\n// const referABI = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"referralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"totalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }]\r\n// const referOptions = {\r\n//     contractAddress: TEST_ENVIRONMENT ? REFER_CONTRACT_ADDRESS_TESTNET : REFER_CONTRACT_ADDRESS,\r\n//     abi: referABI,\r\n// };\r\n\r\nconst CONFIRMATIONS_ON_BSC = 18;\r\nlet currentChainIdHex; //default chain set to ETH\r\ntry {\r\n    console.info(`starting server - ln-30 `);\r\n    Moralis.start({ serverUrl, appId });\r\n} catch (error) {\r\n    console.error(`Server failed to start -ln-34`);\r\n    console.log(error);\r\n}\r\n\r\nconst walletOptions = document.getElementById(\"wallet-options\");\r\nconst loginBtn = document.getElementById(\"web3-login-mm\");\r\nconst logoutBtn = document.getElementById(\"web3-logout\");\r\nconst buyBtn = document.getElementById(\"buy_btn\");\r\nconst showTokenBtn = document.getElementById(\"web3-tokens\");\r\n\r\nconst showAddress = document.getElementById(\"web3-wallet-address\");\r\n\r\nlet web3 = new Web3(Moralis.provider || Web3.givenProvider);\r\n// const NODE_URL = \"https://speedy-nodes-nyc.moralis.io/d633c685eb50e4bb5f7bdcf8/bsc/testnet\";\r\nconst NODE_URL = \"https://speedy-nodes-nyc.moralis.io/7569a2c3fc822716349963c8/bsc/mainnet\";\r\nlet provider = new Web3.providers.HttpProvider(NODE_URL);\r\n\r\nconst userEnteredPassword = document.querySelector('#presale-password');\r\n\r\nfunction atLogin() {\r\n    /**\r\n    * 1. show referral box - toggle visibility of it\r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    const URL_Prefix = 'https://presale.battleinfinity.io/?refercode='\r\n    let USER_RefferalLink = `${URL_Prefix}${userAddress}`;\r\n    // let USER_RefferalLink = `url/${userAddress}`;\r\n\r\n    /**\r\n     * If there is a presale password field - only then \r\n     * presalePasswordEntered = true;\r\n     */\r\n    if (!userEnteredPassword) {\r\n        presalePasswordEntered = true;\r\n    }\r\n\r\n    /**\r\n     * Manages the left to make sure that weird zoomed out page effect doesn't happen\r\n     */\r\n    manageTooltipWidth()\r\n    toggleConnectStatus()\r\n    const secondLoginBtn = document.querySelector('#second-login-btn')\r\n    disableButton(secondLoginBtn)\r\n    secondLoginBtn.setAttribute(\"for\", \"\");\r\n\r\n    // if (userEnteredPassword && presalePasswordEntered) {\r\n    try {\r\n        console.log(`start - populateReferralLinkinHTML ..`);\r\n        populateReferralLinkinHTML(USER_RefferalLink);\r\n        console.log(`done - populateReferralLinkinHTML `);\r\n    } catch (error) {\r\n        console.error(`failed - populateReferralLinkinHTML`);\r\n    }\r\n    try {\r\n        console.log(`start - populateReferrerinHTML ..`);\r\n        populateReferrerinHTML(userAddress);\r\n        console.log(`done - populateReferrerinHTML`);\r\n    } catch (error) {\r\n        console.error(`failed - populateReferrerinHTML`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUserReferralComissions`);\r\n        populateUserReferralComissions(userAddress);\r\n        console.log(`done - populateUserReferralComissions`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUserReferralComissions`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUserReferralsCount`);\r\n        populateUserReferralsCount(userAddress);\r\n        console.log(`done - populateUserReferralsCount`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUserReferralsCount`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUsersInvestments`);\r\n        populateUsersInvestments(userAddress);\r\n        console.log(`done - populateUsersInvestments`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUsersInvestments`);\r\n    }\r\n    /**\r\n     * Test\r\n     // populateUserReferralComissions('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n     // populateUserReferralsCount('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n     */\r\n    // }\r\n    // toggles the visibility of connect & disconnect button\r\n    if (isUserConnected()) toggleBtnVisibility(true);\r\n\r\n}\r\n\r\n\r\n/**\r\n * Manages the left to make sure that weird zoomed out page effect doesn't happen\r\n */\r\nfunction manageTooltipWidth() {\r\n    const toolTip = document.querySelector('#web3-wallet-address');\r\n    if (!toolTip) {\r\n        console.error(`tooltips missing`);\r\n        return;\r\n    }\r\n    if (isUserConnected()) {\r\n        console.log('setting left to : 0');\r\n        showAddress.style.setProperty(\"--custom-tooltip-left\", \"0px\");\r\n        return;\r\n    }\r\n    console.log('setting left to : negative');\r\n    showAddress.style.setProperty(\"--custom-tooltip-left\", \"-100px\");\r\n}\r\n\r\n// async function addNetwork(chainId) {\r\n//     const BscChainId = chainId; //Bsc Testnet ID\r\n//     const chainName = \"Testnet BSC\";\r\n//     const currencyName = \"test BNB\";\r\n//     const currencySymbol = \"tBNB\";\r\n//     const rpcUrl = \"https://speedy-nodes-nyc.moralis.io/d633c685eb50e4bb5f7bdcf8/bsc/testnet\";\r\n//     const blockExplorerUrl = \"https://testnet.bscscan.com/\";\r\n//     await Moralis.addNetwork(\r\n//         BscChainId,\r\n//         chainName,\r\n//         currencyName,\r\n//         currencySymbol,\r\n//         rpcUrl,\r\n//         blockExplorerUrl\r\n//     );\r\n// }\r\nasync function addNetwork(chainId) {\r\n    const BscChainId = chainId;\r\n    const chainName = \"BNB Smart Chain Mainnet\";\r\n    const currencyName = \"BNB\";\r\n    const currencySymbol = \"BNB\";\r\n    const rpcUrl = \"https://speedy-nodes-nyc.moralis.io/7569a2c3fc822716349963c8/bsc/mainnet\";\r\n    const blockExplorerUrl = \"https://bscscan.com/\";\r\n    await Moralis.addNetwork(\r\n        BscChainId,\r\n        chainName,\r\n        currencyName,\r\n        currencySymbol,\r\n        rpcUrl,\r\n        blockExplorerUrl\r\n    );\r\n}\r\n\r\nasync function switchNetwork(toChainId = '0x61') {\r\n    currentChainIdHex = await Moralis.switchNetwork(toChainId);\r\n}\r\n\r\nasync function login(provider) {\r\n    const BscChainId = \"0x38\"; //Bsc Mainnet ID\r\n    // const BscChainId = '0x61'; //Bsc Testnet ID\r\n    let user = Moralis.User.current();\r\n\r\n\r\n    if (provider === 'walletconnect') {\r\n        await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n        // if (!Moralis.isWeb3Enabled()) await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n    }\r\n    //  else {\r\n    //     await Moralis.enableWeb3();\r\n    //     // if (!Moralis.isWeb3Enabled()) await Moralis.enableWeb3();\r\n    // } // blah\r\n\r\n\r\n    if (!user) {\r\n        console.log(`Provider :${provider} -ln-108`);\r\n\r\n        if (provider === 'walletconnect') {\r\n            try {\r\n                console.info(`Authenticating with WalletConnect3`);\r\n                user = await Moralis.authenticate({ provider: \"walletconnect\" });\r\n                console.info(`Enabling Web3 - ${provider} ln-128`)\r\n                // await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n            } catch (error) {\r\n                console.error(`Authentication Failed - Walletconnect - ln-118`);\r\n                console.error(error);\r\n            }\r\n        } else {\r\n            try {\r\n                console.info(`Authenticating with MetaMask`);\r\n                currentChainIdHex = await Moralis.getChainId();\r\n\r\n                // Authenticate only if user is on correct chain\r\n                if (currentChainIdHex !== BscChainId) {\r\n                    // console.log(`Connecting`);\r\n                    // console.log(`Current chain - Bsc`);\r\n                    // console.log(`${currentChainIdHex} - ${BscChainId}`);\r\n                    console.log(`NOT - Connecting`);\r\n                    console.log(`Current chain - Bsc`);\r\n                    console.log(`${currentChainIdHex} - ${BscChainId}`);\r\n                    try {\r\n                        await switchNetwork(BscChainId);\r\n                    } catch (er) {\r\n                        await addNetwork(BscChainId);\r\n                    }\r\n\r\n                }\r\n                user = await Moralis.authenticate();\r\n                // user = Moralis.authenticate({ signingMessage: \"Battle Infinity Presale Authentication\" });\r\n                // user = Moralis.authenticate({ signingMessage: \"Battle Infinity Private Authentication\" });\r\n                // user = Moralis.authenticate({ signingMessage: \"Battle Infinity Authentication\" });\r\n                try {\r\n                    hitDataLayer()\r\n                } catch (error) {\r\n                    console.error(`dev:couldn't hit data layer`);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error(`Authentication Failed - MetaMask`);\r\n                console.error(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    currentChainIdHex = await Moralis.getChainId();\r\n\r\n    if (isUserConnected()) {\r\n        atLogin();\r\n        showAddress.dataset.tip = user.get(\"ethAddress\");\r\n        showAddress.style.setProperty(\"--custom-tooltip-left\", \"0px\");\r\n        getBalance(currentChainIdHex, user.get(\"ethAddress\"));\r\n    }\r\n\r\n    // Below address is on both BSC & ETH Scan - \r\n    // getBalance('0x1', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // eth chain\r\n    // getBalance('0x38', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // bsc chain - this account has BUSD in it\r\n}\r\n\r\n\r\nfunction getUserWalletAddress() {\r\n    let err = 'Wallet not connected';\r\n    if (!isUserConnected())\r\n        return err;\r\n\r\n    return Moralis.User.current().get(\"ethAddress\");\r\n}\r\n\r\nfunction isUserConnected() {\r\n    let user = Moralis.User.current();\r\n    return user ? true : false;\r\n}\r\n\r\nasync function logOut() {\r\n    await Moralis.User.logOut();\r\n    console.log(\"logged out\");\r\n    // toggleBtnVisibility(false);\r\n    // showAddress.dataset.tip = 'Wallet not connected';\r\n    await atLogout();\r\n}\r\n\r\nasync function atLogout() {\r\n    /**\r\n     * 1. hide referral box\r\n     */\r\n    // need to \r\n    if (userEnteredPassword) presalePasswordEntered = false;\r\n\r\n    try {\r\n        populateReferralLinkinHTML('Wallet not connected');\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateReferrerinHTML('Wallet not connected')\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUserReferralComissions('0');\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUserReferralsCount(0);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUsersInvestments('0');\r\n    } catch (error) {\r\n        console.error(`failed - populateUsersInvestments`);\r\n    }\r\n\r\n    manageTooltipWidth()\r\n    toggleConnectStatus()\r\n    const secondLoginBtn = document.querySelector('#second-login-btn')\r\n    enableButton(secondLoginBtn)\r\n    secondLoginBtn.setAttribute(\"for\", \"wallets\");\r\n\r\n    // hiding addreferrer btn when logging out\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    setRefferrerBtn && setRefferrerBtn.classList.add('hidden')\r\n\r\n    toggleBtnVisibility(false);\r\n    showAddress.dataset.tip = 'Wallet not connected';\r\n    try {\r\n        setPresalePassword && setPresalePassword();\r\n    } catch (error) {\r\n        console.error(`dev:setPresalePassword(); not defined`);\r\n        // console.error(error);\r\n    }\r\n    try {\r\n        showArenaLock && showArenaLock(true);\r\n    } catch (error) {\r\n        console.error(`dev:showArenaLock(); not defined`);\r\n        // console.error(error);\r\n    }\r\n    const addReferrerBtn = document.getElementById('add-referrer-btn');\r\n    const addReferrerInput = document.getElementById('add-referrer-address');\r\n    enableButton(addReferrerBtn);\r\n    enableButton(addReferrerInput);\r\n\r\n    await Moralis.enableWeb3();\r\n}\r\n\r\n\r\nasync function getBalance(chainId, address) {\r\n    const tokenList = document.getElementById('token-list');\r\n    currentChainIdHex = await Moralis.getChainId();\r\n    let currentUser = Moralis.User.current();\r\n    let currentUserAddress = currentUser.get(\"ethAddress\");\r\n    const options = { chain: chainId || currentChainIdHex || '0x38', address: address || currentUserAddress || \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" };\r\n    // console.log(`getBalance called with \\n chaidId ${options.chain} and \\n of address: ${options.address}`);\r\n    // const options = { chain: 'eth', address: \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" } // test address from Etherscan\r\n    // const options = { chain: 'bsc', address: \"0x60913d3fE722bFE425247D7673D8bdbDA56D1e02\" } // test address from BSC (bscscan)\r\n\r\n    const nativeBal = await Moralis.Web3API.account.getNativeBalance(options);\r\n\r\n    if (tokenList) tokenList.innerHTML = `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto mt-2\"><span class=\"w-1/2 text-center\">${HEX_TO_CHAIN_DETAILS[currentChainIdHex].nativeToken}</span><span class=\"w-1/2 text-left\">${web3.utils.fromWei(nativeBal.balance)}</span></li>`\r\n\r\n    const balances = await Moralis.Web3API.account.getTokenBalances(options);\r\n\r\n    if (balances.length) {\r\n        balances.forEach(token => {\r\n            // console.log(`not - ${token.symbol}`);\r\n            if (token.symbol == 'USDC' || token.symbol == 'BUSD' || token.symbol == 'IBAT') {\r\n                const balance = convertTokenBalance(token.balance, token.decimals);\r\n                // const tokenFromWei = web3.utils.fromWei(token.balance)\r\n                if (!tokenList) {\r\n                    console.error('ln:226 - Token List Missing');\r\n                } else {\r\n                    tokenList.innerHTML += `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto\"><span class=\"w-1/2 text-center\">${token.symbol}</span><span class=\"w-1/2 text-left\">${balance}</span></li>`\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        if (!tokenList) {\r\n            console.error('dev:getBalance() - Token List Missing');\r\n        } else {\r\n            tokenList.innerHTML += `<li class=\"w-full text-center mx-auto text-xs opacity-80 mt-2\">no other tokens available</li>`\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction toggleBtnVisibility(connected) {\r\n    const allBtns = document.querySelectorAll('.wallet-options-btn ');\r\n    if (connected) { //show\r\n        allBtns.forEach(btn => {\r\n            btn.classList.add('hidden');\r\n        });\r\n        logoutBtn && logoutBtn.classList.remove('hidden');\r\n        showTokenBtn && showTokenBtn.classList.remove('hidden');\r\n        // loginBtn && loginBtn.classList.remove('hidden');\r\n    }\r\n    else {\r\n        if (!allBtns) {\r\n            console.error(`ln:249-Invalid Arguments`);\r\n        } else {\r\n            allBtns.forEach(btn => {\r\n                btn.classList.remove('hidden');\r\n            });\r\n        }\r\n        // walletOptions && walletOptions.classList.remove('hidden');\r\n        logoutBtn && logoutBtn.classList.add('hidden');\r\n        showTokenBtn && showTokenBtn.classList.add('hidden');\r\n    }\r\n}\r\n\r\nfunction toggleConnectStatus() {\r\n    const statusFields = document.querySelectorAll('.connectivity-status');\r\n    statusFields && statusFields.forEach(el => {\r\n        if (isUserConnected()) {\r\n            el.classList.remove('bg-red-400')\r\n            el.style.background = \"#4ade80\";\r\n            el.innerHTML = 'connected'\r\n        } else {\r\n            el.style.background = \"#f87171\";\r\n            el.innerHTML = 'not connected'\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction convertTokenBalance(balance, decimals) {\r\n    let newBalance = balance == 0 ? 0 : balance / Math.pow(10, decimals);\r\n    newBalance = newBalance < 0.001 ? 0 : newBalance;\r\n    return newBalance;\r\n}\r\n\r\n\r\n\r\nasync function isPresaleOpen() {\r\n    // if (!Moralis.isWeb3Enabled()) await Moralis.enableWeb3();;\r\n    const ABI = [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    const result = await readFunction('isPresaleOpen', ABI);\r\n    // console.log(`isPresaleOpen = ${result}`);\r\n    return result;\r\n}\r\n\r\n// isPresaleOpen();\r\n\r\nasync function readFunction(functionName, ABI) {\r\n    // let options = {\r\n    //     contractAddress: '0x356d2E7a0d592bAd95E86d19479c37cfdBb68Ab9',\r\n    //     functionName: 'isPresaleOpen',\r\n    //     abi: [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }],\r\n    //     Params: {\r\n    //         Note: 'Thanks for your work'\r\n    //     },\r\n    //     msgValue: Moralis.Units.ETH(0.1)\r\n    // }\r\n    // let options = {\r\n    //     contractAddress: CONTRACT_ADDRESS_TESTNET,\r\n    //     functionName: functionName,\r\n    //     abi: ABI,\r\n    // }\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS,\r\n        functionName: functionName,\r\n        abi: ABI,\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\n\r\n\r\nfunction getBuyAmount() {\r\n    // @todo: validate input\r\n    let buyAmount = 0;\r\n    const buyAmounts = document.querySelectorAll('.buy-amount');\r\n    // console.log(buyAmounts.length);\r\n\r\n    // const buyAmountMob = document.getElementById(\"buy-amount-mobile\");\r\n    // const buyAmountDesktop = document.getElementById(\"buy-amount-desktop\");\r\n    // if (buyAmountMob.classList.contains(hidden))\r\n    buyAmounts.forEach(el => {\r\n        if (el.value) {\r\n            // console.log(`${el.value}`);\r\n            buyAmount = +el.value;\r\n        }\r\n    });\r\n    console.log('buyAmount = ');\r\n    console.log(+buyAmount);\r\n    return buyAmount;\r\n}\r\n\r\nasync function buyToken() {\r\n\r\n    const value = +getBuyAmount();\r\n    // console.log(`Ran buyToken() : value = ${value}`);\r\n\r\n    // if (!Moralis.isWeb3Enabled()) await Moralis.enableWeb3();\r\n    // await Moralis.enableWeb3(); // blah\r\n    const errMsgContainer = document.getElementById('buy-token-error-con');\r\n    const errMsg = document.getElementById('buy-token-error-msg');\r\n    let msg = 'Error';\r\n\r\n    // @todo - BNB buy amount >= 0.1 BNB else show error msg\r\n\r\n\r\n    if (!isUserConnected()) {\r\n        console.log('User not Logged in - connect wallet');\r\n        msg = 'Wallet not connected';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n    const isSaleOpen = await isPresaleOpen();\r\n    console.log(`sale open - ${isSaleOpen}`);\r\n    if (!isSaleOpen) {\r\n        console.log('Presale is not open');\r\n        msg = 'Presale has not yet started !!!';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n    if (+value <= 0.1) {\r\n        msg = 'Minimum BNB Amount should be 0.1BNB';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n\r\n    const FUNCTION_NAME = 'buyToken';\r\n    const ABI = [{ \"inputs\": [], \"name\": \"buyToken\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"payable\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS,\r\n        functionName: FUNCTION_NAME,\r\n        abi: ABI,\r\n        msgValue: Moralis.Units.ETH(value)\r\n    }\r\n    // let options = {\r\n    //     contractAddress: CONTRACT_ADDRESS_TESTNET,\r\n    //     functionName: FUNCTION_NAME,\r\n    //     abi: ABI,\r\n    //     msgValue: Moralis.Units.ETH(value)\r\n    // }\r\n    let result;\r\n    try {\r\n        // result = await Moralis.executeFunction(options);\r\n        const transaction = await Moralis.executeFunction(options);\r\n        console.log(`Transaction`);\r\n        console.log(transaction);\r\n        const result = await transaction.wait(CONFIRMATIONS_ON_BSC);\r\n        // const result = await transaction.wait(5);\r\n        /**\r\n         * Refresh the userInvestments field\r\n         */\r\n        // setTimeout(refreshUsersInvestments, 1000, result);\r\n        // console.log(`Result`);\r\n        // console.log(result);\r\n        // console.log(result.transactionHash);\r\n\r\n    } catch (error) {\r\n        if (error.message) {\r\n            console.log(error.message);\r\n            msg = error.message;\r\n            if (msg.includes('User denied transaction signature')) {\r\n                msg = 'Transaction declined by User';\r\n                showErrMsg(errMsgContainer, errMsg, msg);\r\n                return;\r\n            }\r\n        }\r\n        msg = error.data.message;\r\n        console.log(msg);\r\n        msg = 'Insufficient BNB in wallet';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n    }\r\n\r\n}\r\n\r\n// async function populateAmountRaisedinHTML() {\r\n//     // if (isUserConnected()) countValue = await getReferralsCount(userAddress);\r\n//     // if (!Moralis.isWeb3Enabled()) {\r\n//     //     console.log(`Web3 status : ${Moralis.isWeb3Enabled()}`);\r\n//     // await Moralis.deactivateWeb3();\r\n\r\n//     //     console.log(`Web3 status after enableweb3 : ${Moralis.isWeb3Enabled()}`);\r\n//     // }\r\n//     await Moralis.enableWeb3();\r\n//     console.log(`ran - populateAmountRaisedinHTML`);\r\n\r\n//     let raisedAmount = await getTotalBnbAMount(); //which will be 'logged out' if user is logged out\r\n//     console.log(`raisedAmount = ${raisedAmount}`);\r\n//     let raisedAmountPercentage = percentageOfBNBRaised(raisedAmount);\r\n//     if (raisedAmountPercentage < 1) raisedAmountPercentage = 1;\r\n//     console.log(`raisedAmount = ${raisedAmount}`);\r\n//     console.log(`setting % = ${raisedAmountPercentage}`);\r\n//     // if user is logged-in we change the value of refferValue\r\n//     const progressBars = document.querySelectorAll('.sale-progress');\r\n//     progressBars && progressBars.forEach(el => {\r\n//         // in this example - the countValue = 0\r\n//         el.value = raisedAmountPercentage;\r\n//     });\r\n//     const raisedAmountHTML = document.querySelectorAll('.sale-progress-amount');\r\n//     raisedAmountHTML && raisedAmountHTML.forEach(el => {\r\n//         el.innerHTML = raisedAmount;\r\n//     })\r\n//     const raisedAmountPercentageHTML = document.querySelectorAll('.sale-progress-percentage');\r\n//     raisedAmountPercentageHTML && raisedAmountPercentageHTML.forEach(el => {\r\n//         el.innerHTML = raisedAmountPercentage;\r\n//     })\r\n//     const parentContainer = document.querySelectorAll('.sale-progress-val-parent');\r\n//     parentContainer.forEach(e => {\r\n//         let leftVal = +raisedAmountPercentage - 3;\r\n//         const maxLeftVal = +94;\r\n//         leftVal >= maxLeftVal ? leftVal = maxLeftVal : '';\r\n//         // console.log(`left = ${leftVal}`);\r\n//         // console.log(e);\r\n//         e.style.left = `${leftVal}%`;\r\n//     })\r\n//     const parentContainerMob = document.querySelectorAll('.sale-progress-val-parent-mob');\r\n//     parentContainer.forEach(e => {\r\n//         let leftVal = +raisedAmountPercentage - 3;\r\n//         const maxLeftVal = +65;\r\n//         leftVal >= maxLeftVal ? leftVal = maxLeftVal : '';\r\n//         // console.log(`left = ${leftVal}`);\r\n//         // console.log(e);\r\n//         e.style.left = `${leftVal}%`;\r\n//     })\r\n// }\r\nasync function populateAmountRaisedinHTML() {\r\n    // if (isUserConnected()) countValue = await getReferralsCount(userAddress);\r\n\r\n    console.log(`ran - populateAmountRaisedinHTML`);\r\n\r\n    // await Moralis.enableWeb3(); // blah\r\n    let raisedAmount = await getTotalBnbAmount(); //which will be 'logged out' if user is logged out\r\n    raisedAmount = +raisedAmount.toFixed(2);\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    const HARDCAP = +16500;\r\n    let raisedAmountPercentage = '';\r\n    try {\r\n        raisedAmountPercentage = percentageOfBNBRaised(raisedAmount, HARDCAP);\r\n    } catch (error) {\r\n        console.error(`dev: percentageOfBNBRaised() issue`);\r\n    }\r\n    // if (raisedAmountPercentage < 1) raisedAmountPercentage = 1;\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    console.log(`setting % = ${raisedAmountPercentage}`);\r\n    // if user is logged-in we change the value of refferValue\r\n    const progressBars = document.querySelectorAll('.sale-progress');\r\n    progressBars && progressBars.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        let percentageForBar = raisedAmountPercentage;\r\n        percentageForBar < 1 ? percentageForBar = 1 : '';\r\n        el.value = percentageForBar;\r\n    });\r\n    const raisedAmountHTML = document.querySelectorAll('.sale-progress-amount');\r\n    raisedAmountHTML && raisedAmountHTML.forEach(el => {\r\n        el.innerHTML = raisedAmount;\r\n    })\r\n    const raisedAmountPercentageHTML = document.querySelectorAll('.sale-progress-percentage');\r\n    raisedAmountPercentageHTML && raisedAmountPercentageHTML.forEach(el => {\r\n        el.innerHTML = raisedAmountPercentage;\r\n    })\r\n    const parentContainer = document.querySelectorAll('.sale-progress-val-parent');\r\n    parentContainer.forEach(e => {\r\n        let leftVal = +raisedAmountPercentage - 3;\r\n        const maxLeftVal = +94;\r\n        // console.log(`-left = ${leftVal}`);\r\n        leftVal >= maxLeftVal ? leftVal = maxLeftVal : '';\r\n        const minLeftVal = +0;\r\n        leftVal <= minLeftVal ? leftVal = minLeftVal : '';\r\n        // console.log(`-left = ${leftVal}`);\r\n        // console.log(e);\r\n        e.style.left = `${leftVal}%`;\r\n    })\r\n    const parentContainerMob = document.querySelectorAll('.sale-progress-val-parent-mob');\r\n    parentContainer.forEach(e => {\r\n        let leftVal = +raisedAmountPercentage - 3;\r\n        const maxLeftVal = +65;\r\n        leftVal >= maxLeftVal ? leftVal = maxLeftVal : '';\r\n        const minLeftVal = +0;\r\n        leftVal <= minLeftVal ? leftVal = minLeftVal : '';\r\n        // console.log(`left = ${leftVal}`);\r\n        // console.log(e);\r\n        e.style.left = `${leftVal}%`;\r\n    })\r\n}\r\n\r\nfunction toggleErrMsg() {\r\n    const errMsg = document.getElementById('buy-token-error-input');\r\n    errMsg.checked = !errMsg.checked;\r\n}\r\n\r\n\r\nif (buyBtn) {\r\n    buyBtn.onclick = buyToken;\r\n} else {\r\n    console.error(`Login button missing in UI`);\r\n}\r\nif (loginBtn) {\r\n    loginBtn.onclick = login;\r\n} else {\r\n    console.error(`Login button missing in UI`);\r\n}\r\nif (logoutBtn) {\r\n    logoutBtn.onclick = logOut;\r\n} else {\r\n    console.error(`Logout button missing in UI`);\r\n}\r\n// showTokenBtn.onclick = getBalance;\r\n\r\nconst HEX_TO_CHAIN_DETAILS = {\r\n    '0x1': {\r\n        chain: 'ETH',\r\n        nativeToken: 'ETH'\r\n    },\r\n    '0x61': {\r\n        // BSC testnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n    ,\r\n    '0x38': {\r\n        // BSC mainnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n}\r\n\r\n"],"names":["window","onload","async","Moralis","enableWeb3","isUserConnected","console","log","login","populateAmountRaisedinHTML","serverUrl","appId","TEST_ENVIRONMENT","web3Instance","REFER_CONTRACT_ADDRESS_TESTNET","REFER_CONTRACT_ADDRESS","CONTRACT_ADDRESS_TESTNET","CONFIRMATIONS_ON_BSC","currentChainIdHex","info","start","error","walletOptions","document","getElementById","logoutBtn","buyBtn","showTokenBtn","showAddress","web3","Web3","provider","givenProvider","NODE_URL","providers","HttpProvider","userEnteredPassword","querySelector","atLogin","userAddress","getUserWalletAddress","USER_RefferalLink","presalePasswordEntered","manageTooltipWidth","secondLoginBtn","disableButton","setAttribute","populateReferralLinkinHTML","populateReferrerinHTML","error1","populateUserReferralComissions","error2","populateUserReferralsCount","error3","populateUsersInvestments","error4","toggleBtnVisibility","style","setProperty","addNetwork","chainId","BscChainId","switchNetwork","toChainId","provider1","User","current","authenticate","error5","getChainId","er","user","hitDataLayer","error6","dataset","tip","get","getBalance","logOut","atLogout","error7","error8","error9","error10","toggleConnectStatus","setRefferrerBtn","classList","add","setPresalePassword","error11","showArenaLock","error12","addReferrerBtn","addReferrerInput","address","tokenList","currentUserAddress","options","nativeBal","Web3API","account","getNativeBalance","innerHTML","HEX_TO_CHAIN_DETAILS","nativeToken","utils","fromWei","balance","getTokenBalances","balances","length","forEach","token","symbol","convertTokenBalance","decimals","connected","allBtns","querySelectorAll","btn","remove","statusFields","el","background","newBalance","Math","pow","isPresaleOpen","readFunction","inputs","name","outputs","internalType","type","stateMutability","functionName","ABI","contractAddress","abi","executeFunction","getBuyAmount","buyAmount","value","buyToken","errMsgContainer","errMsg","msg","isSaleOpen","showErrMsg","Units","ETH","transaction","wait","error13","message","includes","data","raisedAmount","getTotalBnbAmount","toFixed","raisedAmountPercentage","percentageOfBNBRaised","progressBars","percentageForBar","raisedAmountHTML","raisedAmountPercentageHTML","parentContainer","e","leftVal","left"],"version":3,"file":"index.97e116aa.js.map"}