{"mappings":"AAAAA,OAAOC,OAAMC,iBACTC,qCASYC,oBACRC,gBAAa,EACbC,QAAMC,IAAA,cACND,QAAIC,IAAA,8EACAC,QAAQC,aACRC,oBACHJ,QAAAC,IAAA,gDACDI,SAImIL,QAAAC,IAAA,8CAiB3I,MAAMK,kBAAA,EAEN,IAAAC,aAAM,GACN,MAAAC,+BAAa,6CAGTC,+BAAsB,6CACDC,0BAAAD,+BACzBT,QAAMC,IAAA,gCAAqES,6BAC3E,MAAMC,qBAA0D,GAChE,IAAIZ,gBAA6D,EAGjE,MAAIa,kBAA6C,kDAC5CC,cAAA,iEACDC,UAAwB,kDACxBC,MAAI,+CAOiCf,QAACgB,KAAA,8BACrCd,QAAAe,MAAA,CACUH,UAAAA,UAC4CC,MAAAA,QAS3D,MAAMG,GACNlB,QAAMkB,MAAW,iCACjBlB,QAAMC,IAASiB,GAEf,MAAMC,cAAeC,SAASC,eAA4B,kBAEpDC,SAAAF,SAAuBC,eAAgB,iBACvCE,UAAAH,SAAuBC,eAAkB,eACDG,OAAAJ,SAAAC,eAAA,WAExCI,aAAcL,SAASC,eAAoC,eAE7DK,eAAgB,GACdC,eAAgB,OAGlBC,YAAaR,SAAAC,eAAA,uBACjB,IAAIQ,KAAA,IAAAC,KAAgB5B,QAChB6B,UAAeD,KAAKE,qBAEpBC,iBAAoB,2EAIlBC,iBAAmB,wFAEhB,GAKLH,SAAM,IAAUD,KAAkDK,UAAAC,aAAAF,wBAClEG,oBAAqBjB,SAAMkB,cAAa,8BACQC,UAchD,IAAAC,EAAmBC,uBAEnB,IAAAC,EAAc,gDAAcF,IAMxBH,sBAA0BM,wBAAkB,GAG5CC,qBACJC,sBACA,MAAKC,EAAA1B,SAAAkB,cAAA,mCACOQ,KACRC,aAAuB,MAAA,IAE3B,IACI/C,QAAQC,IAAA,yCACX+C,2BAAAN,GACG1C,QAACC,IAAA,4CACDiB,GACAlB,QAAAkB,MAAA,uCAEJ,IACIlB,QAAQC,IAAA,qCACXgD,uBAAAT,GACGxC,QAACC,IAAA,uCACDiD,GACAlD,QAAAkB,MAAA,mCAEJ,IACIlB,QAAQC,IAAA,0CACXkD,+BAAAX,GACGxC,QAACC,IAAA,+CACDmD,GACApD,QAAAkB,MAAA,2CAEJ,IACIlB,QAAQC,IAAA,sCACXoD,2BAAAb,GAC4ExC,QAAAC,IAAA,qCAC7E,MAAKqD,GACDtD,QAAAkB,MAAA,2CAGHlB,QAAAC,IAAA,oCAKEsD,yBAAAf,GAEqDxC,QAAAC,IAAA,mCACtD,MAAEuD,GAEPxD,QAAAkB,MAAA,qCAIG,IACAuC,kBACA,MAAMC,GACF1D,QAAAkB,MAAA,sCAQJd,mBAAoBuD,qBAAc,GAGtC/D,eAEG6D,kBAGC,IAAEG,QAAaC,uBACHD,EAAOE,QAAgB,GAEnC,IAACC,EAAA,GACD,IACIA,EAAiCC,sBAAAJ,EANrB,aAOZ1C,GACAlB,QAAMkB,MAAA,sCAEVlB,QAAQC,IAAI,kBAA4B2D,KACxC5D,QAAAC,IAAY,4BAAyC8D,KACxDE,oBAAAL,EAAAG,GAKsC,SAAAnB,qBAE0D,GAD5DxB,SAAAkB,cAAA,wBAC4D,CAI5E,GAAAlC,kBAGH,OAFMJ,QAAAC,IAAA,4BACE2B,YAAAsC,MAAAC,YAAA,wBAAA,OAGjBnE,QAAAC,IAAA,8BACL2B,YAAAsC,MAAAC,YAAA,wBAAA,eAT2DnE,QAAAkB,MAAA,mCAmCjDkD,WAAWC,GACrB,MAACC,EAAAD,EACJE,EAAA,0BAGAC,EAAAtC,mBAE+B,uBAE5BlC,QAAIC,IAAA,6CACJD,QAAQC,IAAG,GAAAqE,KAAaC,KAAOC,KAAAC,WAG1BvE,QAAOkE,WAAAE,EAAAC,EAVkC,MACE,MASpCC,EAAAC,kBAGJC,aAA4BC,EAAA,gBAExB1E,IAAA,oCACAA,IAAqI0E,2BAEpEA,6BAAeA,iCAEfA,EAAA,gCAAazE,QAAA0E,cAAAD,kBAAmEtE,MAAAwE,iBAEtHC,KAAyBC,gBAExD,WADI9E,IAAQ,aAAM4E,uBACD,kBAAfA,EAAe,IACb7E,QAAQgB,KAAK,iDASTgE,QAAA9E,QAAsB+E,aAAY,CAClClD,SAAQ,gBACRsC,QAAQ,GACRa,eAAe,wDAElBhF,QAAAC,WAAA,CACG4B,SAAS,kBAAwE/B,QAACgB,KAAA,uBAAA6D,kBAEjFM,WACCjE,MAAG,6CACTlB,QAAOkB,MAAOiE,QAEb,IAEHnF,QAAOgB,KAAO,gCACZoE,wBAAelF,QAAAmF,aA5NX,KA8NPD,oBAGRpF,QAAAC,IAAA,oBAEDD,QAAoBC,IAAA,uBAETD,QAAEC,IAAA,GAAAmF,gCACTV,aAtOY,KAwOZM,QAAO9E,QAAA+E,aAAA,CACPC,eAAuB,mCAEvB,IACHI,aAAA7C,wBAE4C,MAAAvB,GACmClB,QAAAkB,MAAA,gCAEnF,MAAAqE,GAGQvF,QAAAkB,MAAA,oCACElB,QAAyBkB,MAAAqE,GAKnCH,wBAAAlF,QAAAmF,qBAEQpF,IAAA,gDACDG,oBACJJ,QAAWC,IAAG,uCACjBsC,sBAEciD,QAAUC,IAAAT,EAAAU,IAAA,cACjB9D,YAACsC,MAAAC,YAAA,wBAAA,OACDwB,WAAMP,kBAAeJ,EAAAU,IAAA,yBAMKjD,uBAE9B,OAAKrC,kBACRF,QAAA4E,KAAAC,UAAAW,IAAA,cAFuD,gCAOjDtF,kBAIH,QAFIF,QAAA4E,KAAmBC,yBAIda,mBAERnC,kBACD,MAAKvC,GACDlB,QAAAkB,MAAA,iDAEAhB,QAAQ4E,KAAMc,SAClB5F,QAACC,IAAA,oBAGC4F,0BAEDA,WAIGxD,sBAAmBM,wBAAA,GACvB,IACIK,2BAAC,8BACD8C,GACF9F,QAAOkB,MAAQ4E,GAEjB,IAGA7C,uBAAkB,wBAClB,MAAA8C,GACA/F,QAAMkB,MAAA6E,GAEN,IAE0C5C,+BAAA,KAC1C,MAAM6C,GACNhG,QAAAkB,MAAe8E,GAGf,IACI3C,2BAAC,SACD4C,GACFjG,QAAOkB,MAAO+E,GAEZ,IACH1C,yBAAA,KACD,MAAKrC,GACDlB,QAAAkB,MAAa,0DAGb2B,sBACJ,MAACC,EAAA1B,SAAAkB,cAAA,qBACD4D,aAAMpD,GACNA,EAAMC,aAAmB,MAAS,WAElC,MAAAoD,EAAa/E,SAAgBkB,cAAA,iBAE7B6D,GAAcA,EAAUC,UAAAC,IAAA,UAC3B1C,qBAAA,eAGc6B,QAAAC,IAAW,uBACtB,IACAa,oBAA0BA,qBAC1B,MAAIC,GACAvG,QAAAkB,MAAA,6CACqJsF,eAAAA,eAAA,GAC9C,MAAAC,GACczG,QAAAkB,MAAA,oCAKzH,MAAIwF,EAAWtF,SAAUC,eAAa,oBAEhCsF,EAAiBvF,SAAQC,eAAgB,wBAE/C6E,aAAaQ,gBAEmCC,SACtCzG,QAAQC,4BAEmDwF,WAAAtB,EAAAuC,WACpDxF,SACDC,eAA2C,sCAEjCnB,QAASmF,iBAG9BwB,EADI3G,QAAA4E,KAAAC,UACJW,IAAA,oBAEDoB,EAAK,OAGDzC,GAAUe,mBAAc,OAGnCwB,QAAAA,GAAAC,GAAA,sDAOyB3G,QAAY6G,QAAAC,QAAAC,iBAAAH,GAC9BI,IAACA,EAAAC,UAAA,sGAAAC,qBAAAhC,mBAAAiC,mDAAAxF,KAAAyF,MAAAC,QAAAC,EAAAC,8BACDC,QAAaxH,QAAU6G,QAAUC,QAAeW,iBAAAb,GAChDY,EAAAE,OAAgBF,EAAAG,SAAaC,IAEhC,GACK,QAAAA,EAAAC,QAAA,QAAAD,EAAAC,QAAA,QAAAD,EAAAC,OAAA,CACA,MAAGN,EACDO,oBAAeF,EAAAL,QAAwBK,EAAAG,UAG/Bf,EACPA,EAAAC,WAAA,iGAAAW,EAAAC,8CAAAN,gBADiBzH,QAAekB,MAAA,mCAKrCgG,EACHA,EAAAC,WAAA,gGADmBnH,QAAAkB,MAAa,kDAI5ByC,oBAAmBuE,GACxB,MAAMC,EAAA/G,SAAegH,iBAAS,wBAC9BF,GACIC,EAAIN,SAAAQ,IACAA,EAAGjC,UAAUC,IAAA,wBAEV9E,UAAuB6E,UAAAkC,OAAA,UAC9B7G,cAAQA,aAAA2E,UAAAkC,OAAA,YAGPH,EACJA,EAAAN,SAAAQ,IACJA,EAAAjC,UAAAkC,OAAA,aAFQtI,QAAAkB,MAAA,4BAOLK,WAAaA,UAAa6E,UAASC,IAAG,UACtC5E,cAAiBA,aAAA2E,UAAAC,IAAA,oBAMZxD,4BAAS0F,EAAAnH,SAAAgH,iBAAA,2BAASG,EAAIV,SAAAW,IAAEpI,mBAAyBoI,EAASpC,UAAGkC,OAAA,sBAACG,WAAA,sBAAe,sBAA4BA,WAAQ,sBAAE,6BAAkDT,oBAAAP,EAAAQ,GAAA,IAACS,EAAA,GAAAjB,EAAA,EAAAA,EAAAkB,KAAAC,IAAA,GAAAX,GAE3K,OADAS,EAAYA,EAAS,KAAa,EAAeA,EACLA,EAEhD9I,eAACiJ,gBAyBG,aAF0EC,aAAA,gBArB3D,EAIXC,OAAW,GACXC,KAAA,gBACAC,QAAc,CACN,CACXC,aAAA,OACYF,KAAQ,GACxBG,KAAA,SAMOC,gBAAa,OACXD,KAAU,6BAWfL,aAAAO,EAAAC,GACD,IAAAxC,EAA0B,CAC1ByC,gBAAa7I,0BACb2I,aAAgBA,EACnBG,IAAAF,GAIG,aAAMpJ,QAAYuJ,gBAAY3C,YAGzB4C,eAML,IAAEC,EAAG,SACgDvI,SAAAgH,iBAAA,eAK/CP,SAAaW,IACXA,EAAGoB,QACTD,GAAenB,EAACoB,kBAEX3J,IAAoC,wBACvCA,KAAA0J,GACAA,iBAEEE,WACN,MAAMC,GAAAJ,eACFK,EAAoB3I,SAAOC,eAC1B,uBAAC2I,EAAG5I,SAAWC,eAAU,6BACtB,8BAMR,eAJQpB,IAAM,uCACVgK,EAAC,4BAAAC,WAAAH,EAAAC,EAAAC,SAISE,QAAAtB,2BAAC5I,IAAQ,eAAIkK,uBAA+BlK,IAAA,6EAAqB+J,EAASC,MAAkC,wEAAsCH,EAAvC,GACrH,OAD0KG,EAAA,2CAACC,WAAAH,EAAAC,EAAAC,OAsB3KnD,EAEG,CAIHyC,gBAAY7I,0BACZ2I,aAzBQ,WA0BRG,IAzBQ,CACX,CAEGT,OAAM,GACLC,KAAA,WACkDC,QAAA,CAC/C,CACOC,aAAE,UACRF,KAAA,GACCG,KAAc,YAGpBC,gBAAa,UACbD,KAAY,aAaZiB,SAAqDlK,QAAAmK,MAAAC,IAAAR,YAMjDtH,EAAUC,+BACNxC,IAAA,uBACYsK,oBAAO/H,iBACiCtC,QAAAuJ,gBAAA3C,GACZ0D,4BAAAhI,eACpC,oCACA,uBACJvC,IAACwK,SACJC,QAAAD,EAAAE,KAvkBmD,IA2kBvD3K,QAAAC,IAAA,UACDD,QAAQC,IAAIyK,EAAGE,iBACf,IAAGC,EAA+BC,oBAAAhB,GACvBY,GAAiBK,wBAAWvI,EAAAkI,EAAAE,gBAAAd,EAAAe,GAG9C7K,QAAAC,IAAA,QAAAuC,aAAAkI,EAAAE,2BAAAd,aAAAe,cAGG7K,QAAMC,IAAA,yBACN,IAA6B,GAAA+K,EAAAC,UAASjL,QAAIC,IAAA+K,EAAAC,SAAQhB,EAAkBe,EAAAC,QAAWhB,EAAGiB,SAAA,sCAA6B,OAA5BjB,EAAA,oCAACC,WAAcH,EAAWC,EAAAC,GAAiCA,EAACe,EAAAG,KAAAF,cAAmBG,GAAUpL,QAAQkB,MAAU,6BAAGlB,QAAAC,IAAAgK,GAC7LA,EAAA,6BACAC,WAAAH,EAAiBC,EAAAC,mBAGpBpG,oBAqBD,IAAEiD,EAAY,CACVyC,gBAAe7I,0BAClB2I,aArBkB,iBAsB2CG,IArBnC,CAC3B,CACHT,OAAA,QAEc,iBACPE,QAAY,CACL,CACLC,aAAsB,UAEfF,KAAA,GAEGG,KAAQ,YAGlBC,gBAAgB,OAClBD,KAAA,cAQJvF,QAAyB1D,QAAEuJ,gBAAsB3C,GAEjD,OADAlD,GAA0D+E,KAAAC,IAAA,GAAAyC,UACpDzH,iBAIqC0H,qCAEvCrL,IAAA,4DACEyE,aAvlBU,IAwlBhB1E,QAACC,IAAA,oCAGD,IAAA2D,QAAyBC,oBACzBD,GAAgBA,EAAIE,QAAiB,WAC9B7D,IAAA,kBAAY2D,KAInB,IAAAG,EAAM,GACN,IACIA,EAAeC,sBAAsBJ,EALxC,OAMA,MAAA1C,GAGDlB,QAAMkB,MAAA,8CAGFjB,IAAM,kBAAgB2D,aACe3D,IAAA,eAAA8D,WAErCwH,EAAgBnK,SAAKgH,iBAAA,qBACVmD,EAAU1D,SAAUW,IAE/B,IAAkBgD,EAAAzH,EAClByH,EAAkB,IAAOA,EAAE,GAC9BhD,EAAAoB,MAAA4B,KAED,MAAAC,EAAmBrK,SAAcgH,iBAAA,4BACdqD,EAAA5D,SAA0BW,IACzCA,EAAArB,UAAMvD,WAEN8H,EAAwBtK,SAAAgH,iBAAA,gCACAsD,EAA0B7D,SAAAW,IAClDA,EAAoCrB,UAAApD,KAElB3C,SAASgH,iBAAA,6BAC9BP,SAAA8D,IACJ,IAAAC,GAAA7H,EAAA,EAIG6H,GAFqB,KAEIA,EAFJ,OAGxB,IAEiCA,EAFjC,GAKKD,EAAGzH,MAAA2H,KAAa,GAAAD,QAEKxK,SAAAgH,iBAAA,iCACtBP,SAAA8D,IACD,IAAOC,GAAW7H,EAAA,EAIlB6H,GAHH,KAI4BA,EAJ5B,IAQGA,GAFe,IAGIA,EAHJ,GAUfD,EAAAzH,MAAQ2H,KAAO,GAAAD,iBAKVE,qBACD9B,EAAY5I,SAAAC,eAAA,2BACZ0K,SAAkB/B,EAAA+B,uBAEbjM,wBACSkM,EAAAtM,OAAAsM,aACdC,GAAa,SACbD,GAAmBA,EAAAE,KACtBlM,QAAAC,IAAA,gDAEKgM,GAAG,GAELA,EAEJzK,OAACA,OAAA2K,QAAAtC,SACJ7J,QAAAkB,MAAA","sources":["src/js/devWeb3.js"],"sourcesContent":["window.onload = async function () {\r\n    populateAmountRaisedinHTMLDB();\r\n    // populateAmountRaisedinHTML();\r\n\r\n    /**\r\n     * - if user is already connected - but only page was refreshed - atlogin()\r\n    */\r\n\r\n    if (await isWeb3Installed()) {\r\n        WEB3_INSTALLED = true;\r\n        console.log(`dev:onload`);\r\n        console.log(`dev: web3 installed  - checking if user is connected upon refreshing`);\r\n        await Moralis.enableWeb3();\r\n        if (isUserConnected()) {\r\n            console.log(`dev: Page-refreshed - User already connected`);\r\n            login();\r\n        }\r\n        console.log(`dev: Page-refreshed - User not connected`);\r\n    }\r\n\r\n\r\n    // this timeout is here coz when switching chain - the function fails until recalled so a quick fix is calling it again after some time\r\n    // setTimeout(() => {\r\n    //     populateAmountRaisedinHTML();\r\n    // }, 5000);\r\n\r\n};\r\n\r\n/**\r\n * *******************************    WEB3    *******************************\r\n */\r\n// const TEST_ENVIRONMENT = true;\r\nconst TEST_ENVIRONMENT = false;\r\n\r\nlet web3Instance = '';\r\n\r\nconst REFER_CONTRACT_ADDRESS_TESTNET = '0xfe2E124FE1418419A9efd8Ba987Fa1769D506c8a';\r\n// if TEST_ENVIRONMENT is false then use mainnet contract else testnet contract\r\nconst REFER_CONTRACT_ADDRESS_MAINNET = '0x5832E385f633b30519B3ECaDE3C5eD3d9881cf58'; //mainnet contract\r\n\r\nconst DEPLOYED_CONTRACT_ADDRESS = TEST_ENVIRONMENT ? REFER_CONTRACT_ADDRESS_TESTNET : REFER_CONTRACT_ADDRESS_MAINNET;\r\nconsole.log(`Deployed Presale Contract is ${DEPLOYED_CONTRACT_ADDRESS}`);\r\n\r\nconst CONFIRMATIONS_ON_BSC = 11;\r\nlet WEB3_INSTALLED = false;\r\n// paid-account-joshi-sir\r\nconst serverUrl_Testnet = \"https://gusm6vrpbwtk.usemoralis.com:2053/server\"; //BSC testnet\r\nconst appId_Testnet = \"glRYjrZo9XjLE2MPc7sWgzc4PyoFs3RbmyoNiPbf\"; //BSC testnet\r\nlet serverUrl = \"https://gb6gwydcjjw6.usemoralis.com:2053/server\"; //BSC mainnet\r\nlet appId = \"Zq3s8magh8mlppfXIGSHZRdLj49LlCnIaqs2mD2U\"; //BSC mainnet\r\n\r\nlet currentChainIdHex; //default chain set to ETH\r\ntry {\r\n    // if (WEB3_INSTALLED) {\r\n    if (TEST_ENVIRONMENT) {\r\n        console.info(`starting server - testnet `);\r\n        serverUrl = \"https://gusm6vrpbwtk.usemoralis.com:2053/server\"; //BSC testnet\r\n        appId = \"glRYjrZo9XjLE2MPc7sWgzc4PyoFs3RbmyoNiPbf\"; //BSC testnet\r\n        Moralis.start({ serverUrl, appId });\r\n    } else {\r\n        console.info(`starting server - mainnet `);\r\n        Moralis.start({ serverUrl, appId });\r\n    }\r\n    // } else {\r\n    //     console.error(`dev: wallet/web3 not installed`);\r\n    // }\r\n\r\n} catch (error) {\r\n    console.error(`Server failed to start -ln-34`);\r\n    console.log(error);\r\n}\r\n\r\n\r\nconst walletOptions = document.getElementById(\"wallet-options\");\r\nconst loginBtn = document.getElementById(\"web3-login-mm\");\r\nconst logoutBtn = document.getElementById(\"web3-logout\");\r\nconst buyBtn = document.getElementById(\"buy_btn\");\r\nconst showTokenBtn = document.getElementById(\"web3-tokens\");\r\n\r\nconst BscChainIdMain = 0x38; //Bsc Mainnet ID\r\nconst BscChainIdTest = '0x61'; //Bsc Testnet ID\r\n// const BscChainIdTest = 97; //Bsc Testnet ID\r\n\r\nconst showAddress = document.getElementById(\"web3-wallet-address\");\r\n\r\nlet web3 = new Web3(Moralis.provider || Web3.givenProvider);\r\nconst NODE_URL_TESTNET = \"https://speedy-nodes-nyc.moralis.io/7569a2c3fc822716349963c8/bsc/testnet\";\r\nconst NODE_URL_MAINNET = \"https://speedy-nodes-nyc.moralis.io/7569a2c3fc822716349963c8/bsc/mainnet\";\r\n\r\nlet provider = '';\r\nif (TEST_ENVIRONMENT) {\r\n    provider = new Web3.providers.HttpProvider(NODE_URL_TESTNET);\r\n} else {\r\n    provider = new Web3.providers.HttpProvider(NODE_URL_MAINNET);\r\n}\r\n\r\n\r\nconst userEnteredPassword = document.querySelector('#presale-password');\r\n\r\nfunction atLogin() {\r\n    /**\r\n    * 1. show referral box - toggle visibility of it\r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    const URL_Prefix = 'https://presale.battleinfinity.io/?refercode='\r\n    let USER_RefferalLink = `${URL_Prefix}${userAddress}`;\r\n    // let USER_RefferalLink = `url/${userAddress}`;\r\n\r\n    /**\r\n     * If there is a presale password field - only then \r\n     * presalePasswordEntered = true;\r\n     */\r\n    if (!userEnteredPassword) {\r\n        presalePasswordEntered = true;\r\n    }\r\n\r\n    /**\r\n     * Manages the left to make sure that weird zoomed out page effect doesn't happen\r\n     */\r\n    manageTooltipWidth()\r\n    toggleConnectStatus()\r\n    const secondLoginBtn = document.querySelector('#second-login-btn')\r\n    disableButton(secondLoginBtn)\r\n    secondLoginBtn.setAttribute(\"for\", \"\");\r\n\r\n    // if (userEnteredPassword && presalePasswordEntered) {\r\n    try {\r\n        console.log(`start - populateReferralLinkinHTML ..`);\r\n        populateReferralLinkinHTML(USER_RefferalLink);\r\n        console.log(`done - populateReferralLinkinHTML `);\r\n    } catch (error) {\r\n        console.error(`failed - populateReferralLinkinHTML`);\r\n    }\r\n    try {\r\n        console.log(`start - populateReferrerinHTML ..`);\r\n        populateReferrerinHTML(userAddress);\r\n        console.log(`done - populateReferrerinHTML`);\r\n    } catch (error) {\r\n        console.error(`failed - populateReferrerinHTML`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUserReferralComissions`);\r\n        populateUserReferralComissions(userAddress);\r\n        console.log(`done - populateUserReferralComissions`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUserReferralComissions`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUserReferralsCount`);\r\n        populateUserReferralsCount(userAddress);\r\n        console.log(`done - populateUserReferralsCount`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUserReferralsCount`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUsersInvestments`);\r\n        populateUsersInvestments(userAddress);\r\n        console.log(`done - populateUsersInvestments`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUsersInvestments`);\r\n    }\r\n    // each time a user logs in - they fetch value of BNBRaised and update the DB\r\n    try {\r\n        updateBNBRaised()\r\n    } catch (error) {\r\n        console.error(`failed - updateBNBRaised - atlogin`);\r\n    }\r\n    /**\r\n     * Test\r\n     // populateUserReferralComissions('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n     // populateUserReferralsCount('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n     */\r\n    // }\r\n    // toggles the visibility of connect & disconnect button\r\n    if (isUserConnected()) toggleBtnVisibility(true);\r\n\r\n}\r\n\r\nasync function updateBNBRaised() {\r\n    const HARDCAP = +16500;\r\n    let raisedAmount = await getTotalBNBAmount(); //which will be 'logged out' if user is logged out\r\n    raisedAmount = +raisedAmount.toFixed(2);\r\n    const amountBNB = ''\r\n    let raisedAmountPercentage = '';\r\n    try {\r\n        raisedAmountPercentage = percentageOfBNBRaised(raisedAmount, HARDCAP);\r\n    } catch (error) {\r\n        console.error(`dev: percentageOfBNBRaised() issue`);\r\n    }\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    console.log(`raisedAmountPercentage = ${raisedAmountPercentage}`);\r\n    updateRaisedBNBinDB(raisedAmount, raisedAmountPercentage);\r\n}\r\n\r\n/**\r\n * Manages the left to make sure that weird zoomed out page effect doesn't happen\r\n */\r\nfunction manageTooltipWidth() {\r\n    const toolTip = document.querySelector('#web3-wallet-address');\r\n    if (!toolTip) {\r\n        console.error(`tooltips missing`);\r\n        return;\r\n    }\r\n    if (isUserConnected()) {\r\n        console.log('setting left to : 0');\r\n        showAddress.style.setProperty(\"--custom-tooltip-left\", \"0px\");\r\n        return;\r\n    }\r\n    console.log('setting left to : negative');\r\n    showAddress.style.setProperty(\"--custom-tooltip-left\", \"-100px\");\r\n}\r\n\r\n// async function addNetwork(chainId) {\r\n//     const BscChainId = chainId; //Bsc Testnet ID\r\n//     const chainName = \"Testnet BSC\";\r\n//     const currencyName = \"test BNB\";\r\n//     const currencySymbol = \"tBNB\";\r\n//     const rpcUrl = \"https://speedy-nodes-nyc.moralis.io/d633c685eb50e4bb5f7bdcf8/bsc/testnet\";\r\n//     const blockExplorerUrl = \"https://testnet.bscscan.com/\";\r\n//     await Moralis.addNetwork(\r\n//         BscChainId,\r\n//         chainName,\r\n//         currencyName,\r\n//         currencySymbol,\r\n//         rpcUrl,\r\n//         blockExplorerUrl\r\n//     );\r\n// }\r\nasync function addNetwork(chainId) {\r\n    const BscChainId = chainId;\r\n    const chainName = TEST_ENVIRONMENT ? \"BNB Testnet\" : \"BNB Smart Chain Mainnet\";\r\n    const currencyName = TEST_ENVIRONMENT ? \"tBNB\" : \"BNB\";\r\n    const currencySymbol = TEST_ENVIRONMENT ? \"tBNB\" : \"BNB\";;\r\n    const rpcUrl = TEST_ENVIRONMENT ? NODE_URL_TESTNET : NODE_URL_MAINNET;\r\n    const blockExplorerUrl = TEST_ENVIRONMENT ? \"https://testnet.bscscan.com/\" : \"https://bscscan.com/\";\r\n    console.log('BscChainId-chainName-rpcUrl-blockexplorer');\r\n    console.log(`${BscChainId}-${chainName}-${rpcUrl}-${blockExplorerUrl}`);\r\n    await Moralis.addNetwork(\r\n        BscChainId,\r\n        chainName,\r\n        currencyName,\r\n        currencySymbol,\r\n        rpcUrl,\r\n        blockExplorerUrl\r\n    );\r\n}\r\n\r\nasync function switchAndAdd(toChainId = '0x61') {\r\n    console.log(`switchAndAdd - toChainid`);\r\n    console.log(toChainId);\r\n    try {\r\n        await switchNetwork(toChainId);\r\n    } catch (er) {\r\n        await addNetwork(toChainId);\r\n    }\r\n}\r\nasync function switchNetwork(toChainId = '0x61') {\r\n    currentChainIdHex = await Moralis.switchNetwork(toChainId);\r\n}\r\n\r\nasync function login(provider) {\r\n\r\n    let BSC_Chain = TEST_ENVIRONMENT ? BscChainIdTest : BscChainIdMain;\r\n    let user = Moralis.User.current();\r\n\r\n\r\n    if (!user) {\r\n        console.log(`Provider :${provider} - login(provider)`);\r\n\r\n        if (provider === 'walletconnect') {\r\n            try {\r\n                console.info(`Authenticating with WalletConnect - chain -${BSC_Chain}`);\r\n                // user = await Moralis.authenticate({ provider: \"walletconnect\", signingMessage: \"Battle Infinity Authentication: WalletConnect\" });\r\n                if (TEST_ENVIRONMENT) {\r\n                    user = await Moralis.authenticate({ provider: \"walletconnect\", chainId: 97, signingMessage: \"Battle Infinity Authentication: WalletConnect\" })\r\n                } else {\r\n                    user = await Moralis.authenticate({ provider: \"walletconnect\", chainId: 56, signingMessage: \"Battle Infinity Authentication: WalletConnect\" })\r\n                }\r\n                await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n                console.info(`dev:Enabling Web3 - ${provider} ln-128`);\r\n            } catch (error) {\r\n                console.error(`dev:Authentication Failed - Walletconnect`);\r\n                console.error(error);\r\n            }\r\n        } else {\r\n            try {\r\n                console.info(`Authenticating with MetaMask`);\r\n                currentChainIdHex = await Moralis.getChainId();\r\n\r\n                // Authenticate only if user is on correct chain\r\n                if (currentChainIdHex !== BSC_Chain) {\r\n                    console.log(`NOT - Connecting`);\r\n                    console.log(`Current chain - Bsc`);\r\n                    console.log(`${currentChainIdHex} - ${BSC_Chain}`);\r\n                    await switchAndAdd(BSC_Chain);\r\n                }\r\n                user = await Moralis.authenticate({ signingMessage: \"Battle Infinity Authentication\" })\r\n\r\n                try {\r\n                    if (!TEST_ENVIRONMENT) hitDataLayer(getUserWalletAddress())\r\n                } catch (error) {\r\n                    console.error(`dev:couldn't hit data layer`);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error(`Authentication Failed - MetaMask`);\r\n                console.error(error);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    currentChainIdHex = await Moralis.getChainId();\r\n\r\n    console.log(`Battle Infinity Authentication - signing msg`);\r\n    if (isUserConnected()) {\r\n        console.log(`IBAT Authentication - userconnected`);\r\n        atLogin();\r\n        showAddress.dataset.tip = user.get(\"ethAddress\");\r\n        showAddress.style.setProperty(\"--custom-tooltip-left\", \"0px\");\r\n        getBalance(currentChainIdHex, user.get(\"ethAddress\"));\r\n    }\r\n\r\n    // Below address is on both BSC & ETH Scan - \r\n    // getBalance('0x1', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // eth chain\r\n    // getBalance('0x38', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // bsc chain - this account has BUSD in it\r\n}\r\n\r\n\r\nfunction getUserWalletAddress() {\r\n    let err = 'Wallet not connected';\r\n    if (!isUserConnected())\r\n        return err;\r\n\r\n    return Moralis.User.current().get(\"ethAddress\");\r\n}\r\n\r\nfunction isUserConnected() {\r\n    let user = Moralis.User.current();\r\n    return user ? true : false;\r\n}\r\n\r\nasync function logOut() {\r\n    try {\r\n        await updateBNBRaised()\r\n    } catch (error) {\r\n        console.error(`dev:failed - updateBNBRaised - logOut()`);\r\n    }\r\n    await Moralis.User.logOut();\r\n    console.log(\"logged out\");\r\n    // toggleBtnVisibility(false);\r\n    // showAddress.dataset.tip = 'Wallet not connected';\r\n    await atLogout();\r\n}\r\n\r\nasync function atLogout() {\r\n    /**\r\n     * 1. hide referral box\r\n     */\r\n    // need to \r\n    if (userEnteredPassword) presalePasswordEntered = false;\r\n\r\n    try {\r\n        populateReferralLinkinHTML('Wallet not connected');\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateReferrerinHTML('Wallet not connected')\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUserReferralComissions('0');\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUserReferralsCount(0);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUsersInvestments('0');\r\n    } catch (error) {\r\n        console.error(`failed - populateUsersInvestments`);\r\n    }\r\n\r\n\r\n    manageTooltipWidth()\r\n    toggleConnectStatus()\r\n    const secondLoginBtn = document.querySelector('#second-login-btn')\r\n    enableButton(secondLoginBtn)\r\n    secondLoginBtn.setAttribute(\"for\", \"wallets\");\r\n\r\n    // hiding addreferrer btn when logging out\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    setRefferrerBtn && setRefferrerBtn.classList.add('hidden')\r\n\r\n    toggleBtnVisibility(false);\r\n    showAddress.dataset.tip = 'Wallet not connected';\r\n    try {\r\n        setPresalePassword && setPresalePassword();\r\n    } catch (error) {\r\n        console.error(`dev:setPresalePassword(); not defined`);\r\n        // console.error(error);\r\n    }\r\n    try {\r\n        showArenaLock && showArenaLock(true);\r\n    } catch (error) {\r\n        console.error(`dev:showArenaLock(); not defined`);\r\n        // console.error(error);\r\n    }\r\n    const addReferrerBtn = document.getElementById('add-referrer-btn');\r\n    const addReferrerInput = document.getElementById('add-referrer-address');\r\n    enableButton(addReferrerBtn);\r\n    enableButton(addReferrerInput);\r\n\r\n    await Moralis.enableWeb3();\r\n}\r\n\r\n\r\nasync function getBalance(chainId, address) {\r\n    const tokenList = document.getElementById('token-list');\r\n    currentChainIdHex = await Moralis.getChainId();\r\n    let currentUser = Moralis.User.current();\r\n    let currentUserAddress = currentUser.get(\"ethAddress\");\r\n    const options = { chain: chainId || currentChainIdHex || '0x38', address: address || currentUserAddress || \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" };\r\n    // console.log(`getBalance called with \\n chaidId ${options.chain} and \\n of address: ${options.address}`);\r\n    // const options = { chain: 'eth', address: \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" } // test address from Etherscan\r\n    // const options = { chain: 'bsc', address: \"0x60913d3fE722bFE425247D7673D8bdbDA56D1e02\" } // test address from BSC (bscscan)\r\n\r\n    const nativeBal = await Moralis.Web3API.account.getNativeBalance(options);\r\n\r\n    if (tokenList) tokenList.innerHTML = `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto mt-2\"><span class=\"w-1/2 text-center\">${HEX_TO_CHAIN_DETAILS[currentChainIdHex].nativeToken}</span><span class=\"w-1/2 text-left\">${web3.utils.fromWei(nativeBal.balance)}</span></li>`\r\n\r\n    const balances = await Moralis.Web3API.account.getTokenBalances(options);\r\n\r\n    if (balances.length) {\r\n        balances.forEach(token => {\r\n            // console.log(`not - ${token.symbol}`);\r\n            if (token.symbol == 'USDC' || token.symbol == 'BUSD' || token.symbol == 'IBAT') {\r\n                const balance = convertTokenBalance(token.balance, token.decimals);\r\n                // const tokenFromWei = web3.utils.fromWei(token.balance)\r\n                if (!tokenList) {\r\n                    console.error('ln:226 - Token List Missing');\r\n                } else {\r\n                    tokenList.innerHTML += `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto\"><span class=\"w-1/2 text-center\">${token.symbol}</span><span class=\"w-1/2 text-left\">${balance}</span></li>`\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        if (!tokenList) {\r\n            console.error('dev:getBalance() - Token List Missing');\r\n        } else {\r\n            tokenList.innerHTML += `<li class=\"w-full text-center mx-auto text-xs opacity-80 mt-2\">no other tokens available</li>`\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction toggleBtnVisibility(connected) {\r\n    const allBtns = document.querySelectorAll('.wallet-options-btn ');\r\n    if (connected) { //show\r\n        allBtns.forEach(btn => {\r\n            btn.classList.add('hidden');\r\n        });\r\n        logoutBtn && logoutBtn.classList.remove('hidden');\r\n        showTokenBtn && showTokenBtn.classList.remove('hidden');\r\n        // loginBtn && loginBtn.classList.remove('hidden');\r\n    }\r\n    else {\r\n        if (!allBtns) {\r\n            console.error(`ln:249-Invalid Arguments`);\r\n        } else {\r\n            allBtns.forEach(btn => {\r\n                btn.classList.remove('hidden');\r\n            });\r\n        }\r\n        // walletOptions && walletOptions.classList.remove('hidden');\r\n        logoutBtn && logoutBtn.classList.add('hidden');\r\n        showTokenBtn && showTokenBtn.classList.add('hidden');\r\n    }\r\n}\r\n\r\nfunction toggleConnectStatus() {\r\n    const statusFields = document.querySelectorAll('.connectivity-status');\r\n    statusFields && statusFields.forEach(el => {\r\n        if (isUserConnected()) {\r\n            el.classList.remove('bg-red-400')\r\n            el.style.background = \"#4ade80\";\r\n            el.innerHTML = 'connected'\r\n        } else {\r\n            el.style.background = \"#f87171\";\r\n            el.innerHTML = 'not connected'\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction convertTokenBalance(balance, decimals) {\r\n    let newBalance = balance == 0 ? 0 : balance / Math.pow(10, decimals);\r\n    newBalance = newBalance < 0.001 ? 0 : newBalance;\r\n    return newBalance;\r\n}\r\n\r\n\r\n\r\nasync function isPresaleOpen() {\r\n    const ABI = [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    const result = await readFunction('isPresaleOpen', ABI);\r\n    // console.log(`isPresaleOpen = ${result}`);\r\n    return result;\r\n}\r\n\r\n// isPresaleOpen();\r\n\r\nasync function readFunction(functionName, ABI) {\r\n\r\n    let options = {\r\n        contractAddress: DEPLOYED_CONTRACT_ADDRESS,\r\n        functionName: functionName,\r\n        abi: ABI,\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\n\r\n\r\nfunction getBuyAmount() {\r\n    // @todo: validate input\r\n    let buyAmount = 0;\r\n    const buyAmounts = document.querySelectorAll('.buy-amount');\r\n    // console.log(buyAmounts.length);\r\n\r\n    // const buyAmountMob = document.getElementById(\"buy-amount-mobile\");\r\n    // const buyAmountDesktop = document.getElementById(\"buy-amount-desktop\");\r\n    // if (buyAmountMob.classList.contains(hidden))\r\n    buyAmounts.forEach(el => {\r\n        if (el.value) {\r\n            // console.log(`${el.value}`);\r\n            buyAmount = +el.value;\r\n        }\r\n    });\r\n    console.log('buyAmount = ');\r\n    console.log(+buyAmount);\r\n    return buyAmount;\r\n}\r\n\r\nasync function buyToken() {\r\n\r\n    const BNBValue = +getBuyAmount();\r\n\r\n    const errMsgContainer = document.getElementById('buy-token-error-con');\r\n    const errMsg = document.getElementById('buy-token-error-msg');\r\n    let msg = 'Error';\r\n\r\n\r\n\r\n\r\n    if (!isUserConnected()) {\r\n        console.log('User not Logged in - connect wallet');\r\n        msg = 'Wallet not connected';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n    const isSaleOpen = await isPresaleOpen();\r\n    console.log(`sale open - ${isSaleOpen}`);\r\n    if (!isSaleOpen) {\r\n        console.log('Presale is not open');\r\n        msg = 'Presale has not yet started !!!';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n    const MIN_BNB = TEST_ENVIRONMENT ? 0 : 0.1;\r\n    const bypassAddress = '0xC8179e6927b61A4FdC3e5a2dB14e641E51b9ad83';\r\n    if (getUserWalletAddress() !== bypassAddress) {\r\n        if (+BNBValue < MIN_BNB) {\r\n            msg = 'Minimum BNB Amount should be 0.1BNB';\r\n            showErrMsg(errMsgContainer, errMsg, msg);\r\n            return;\r\n        }\r\n    }\r\n\r\n    const FUNCTION_NAME = 'buyToken';\r\n    const ABI = [{ \"inputs\": [], \"name\": \"buyToken\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"payable\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: DEPLOYED_CONTRACT_ADDRESS,\r\n        functionName: FUNCTION_NAME,\r\n        abi: ABI,\r\n        msgValue: Moralis.Units.ETH(BNBValue)\r\n    }\r\n\r\n    let result;\r\n    try {\r\n        // result = await Moralis.executeFunction(options);\r\n        let userAddress = getUserWalletAddress();\r\n        console.log(`Transaction started`);\r\n        if (!TEST_ENVIRONMENT) swapAmountDataLayer(userAddress);\r\n        const transaction = await Moralis.executeFunction(options);\r\n        if (!TEST_ENVIRONMENT) confirmTransactionDataLayer(userAddress);\r\n        console.log(`Transaction finished`);\r\n        console.log(`Transaction`);\r\n        console.log(transaction);\r\n\r\n        const result = await transaction.wait(CONFIRMATIONS_ON_BSC);\r\n        // const result = await transaction.wait(5);\r\n        /**\r\n         * Refresh the userInvestments field\r\n         */\r\n\r\n\r\n        console.log(`Result`);\r\n        console.log(result.transactionHash);\r\n        let IBATValue = calculateIBATAmount(BNBValue);\r\n        if (!TEST_ENVIRONMENT) result && swapSuccessfulDataLayer(userAddress, result.transactionHash, BNBValue, IBATValue);\r\n        // setTimeout(refreshUsersInvestments, 1000, result);\r\n        console.log(`Add: ${userAddress} \\n tID: ${result.transactionHash} \\n BNB: ${BNBValue} \\nIBAT: ${IBATValue}`);\r\n\r\n    } catch (error) {\r\n        console.log(`Transaction cancelled`);\r\n        try {\r\n            if (error.message) {\r\n                console.log(error.message);\r\n                msg = error.message;\r\n                if (msg.includes('User denied transaction signature')) {\r\n                    msg = 'Transaction declined by User';\r\n                    showErrMsg(errMsgContainer, errMsg, msg);\r\n                    return;\r\n                }\r\n            }\r\n            msg = error.data.message;\r\n        } catch (errorBad) {\r\n            console.error(`dev:bad error in BuyToken`);\r\n        }\r\n        console.log(msg);\r\n        msg = 'Insufficient BNB in wallet';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n    }\r\n\r\n}\r\n\r\nasync function getTotalBNBAmount() {\r\n    const functionName = 'totalBNBAmount';\r\n    const ABI_totalBNBAmount = [{ \"inputs\": [], \"name\": \"totalBNBAmount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: DEPLOYED_CONTRACT_ADDRESS,\r\n        functionName: functionName,\r\n        abi: ABI_totalBNBAmount,\r\n    }\r\n\r\n    let raisedAmount = await Moralis.executeFunction(options);\r\n    raisedAmount = raisedAmount / Math.pow(10, DECIMALS);\r\n    return raisedAmount;\r\n}\r\n\r\nasync function populateAmountRaisedinHTML() {\r\n    let BSC_Chain = TEST_ENVIRONMENT ? BscChainIdTest : BscChainIdMain;\r\n    console.log(`populateAmountRaisedinHTML-switchAndAdd-chainId-${BSC_Chain}`);\r\n    await switchAndAdd(BSC_Chain);\r\n\r\n    console.log(`ran - populateAmountRaisedinHTML`);\r\n\r\n    let raisedAmount = await getTotalBNBAmount(); //which will be 'logged out' if user is logged out\r\n    raisedAmount = +raisedAmount.toFixed(2);\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    const HARDCAP = +16500;\r\n    let raisedAmountPercentage = '';\r\n    try {\r\n        raisedAmountPercentage = percentageOfBNBRaised(raisedAmount, HARDCAP);\r\n    } catch (error) {\r\n        console.error(`dev: percentageOfBNBRaised() issue`);\r\n    }\r\n    // if (raisedAmountPercentage < 1) raisedAmountPercentage = 1;\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    console.log(`setting % = ${raisedAmountPercentage}`);\r\n    // if user is logged-in we change the value of refferValue\r\n    const progressBars = document.querySelectorAll('.sale-progress');\r\n\r\n\r\n    progressBars && progressBars.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        let percentageForBar = raisedAmountPercentage;\r\n        percentageForBar < 1 ? percentageForBar = 1 : '';\r\n        el.value = percentageForBar;\r\n    });\r\n\r\n\r\n    const raisedAmountHTML = document.querySelectorAll('.sale-progress-amount');\r\n    raisedAmountHTML && raisedAmountHTML.forEach(el => {\r\n        el.innerHTML = raisedAmount;\r\n    })\r\n\r\n\r\n    const raisedAmountPercentageHTML = document.querySelectorAll('.sale-progress-percentage');\r\n    raisedAmountPercentageHTML && raisedAmountPercentageHTML.forEach(el => {\r\n        el.innerHTML = raisedAmountPercentage;\r\n    })\r\n\r\n\r\n    const parentContainer = document.querySelectorAll('.sale-progress-val-parent');\r\n    parentContainer.forEach(e => {\r\n        let leftVal = +raisedAmountPercentage - 3;\r\n        const maxLeftVal = +94;\r\n        // console.log(`-left = ${leftVal}`);\r\n        leftVal >= maxLeftVal ? leftVal = maxLeftVal : '';\r\n        const minLeftVal = +0;\r\n        leftVal <= minLeftVal ? leftVal = minLeftVal : '';\r\n        // console.log(`-left = ${leftVal}`);\r\n        // console.log(e);\r\n        e.style.left = `${leftVal}%`;\r\n    })\r\n    const parentContainerMob = document.querySelectorAll('.sale-progress-val-parent-mob');\r\n    parentContainerMob.forEach(e => {\r\n        let leftVal = +raisedAmountPercentage - 3;\r\n        const maxLeftValMob = +65;\r\n        leftVal >= maxLeftValMob ? leftVal = maxLeftValMob : '';\r\n        const minLeftValMob = +0;\r\n        leftVal <= minLeftValMob ? leftVal = minLeftValMob : '';\r\n        // console.log(`left = ${leftVal}`);\r\n        // console.log(e);\r\n        e.style.left = `${leftVal}%`;\r\n    })\r\n}\r\n\r\nfunction toggleErrMsg() {\r\n    const errMsg = document.getElementById('buy-token-error-input');\r\n    errMsg.checked = !errMsg.checked;\r\n}\r\n\r\nasync function isWeb3Installed() {\r\n    const ethereum = window.ethereum;\r\n    let isInstalled = true;\r\n    if (!ethereum || !ethereum.on) {\r\n        console.log(`dev:isWeb3Installed - Metamask not installed`);\r\n        isInstalled = false;\r\n    }\r\n    return isInstalled;\r\n}\r\n\r\n\r\nif (buyBtn) {\r\n    buyBtn.onclick = buyToken;\r\n} else {\r\n    console.error(`Login button missing in UI`);\r\n}\r\nif (loginBtn) {\r\n    loginBtn.onclick = login;\r\n} else {\r\n    console.error(`Login button missing in UI`);\r\n}\r\nif (logoutBtn) {\r\n    logoutBtn.onclick = logOut;\r\n} else {\r\n    console.error(`Logout button missing in UI`);\r\n}\r\n// showTokenBtn.onclick = getBalance;\r\n\r\nconst HEX_TO_CHAIN_DETAILS = {\r\n    '0x1': {\r\n        chain: 'ETH',\r\n        nativeToken: 'ETH'\r\n    },\r\n    '0x61': {\r\n        // BSC testnet\r\n        chain: 'tBSC',\r\n        nativeToken: 'tBNB'\r\n    }\r\n    ,\r\n    '0x38': {\r\n        // BSC mainnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n}\r\n\r\n"],"names":["window","onload","async","populateAmountRaisedinHTMLDB","isWeb3Installed","WEB3_INSTALLED","console","log","Moralis","enableWeb3","isUserConnected","login","TEST_ENVIRONMENT","web3Instance","REFER_CONTRACT_ADDRESS_TESTNET","REFER_CONTRACT_ADDRESS_MAINNET","DEPLOYED_CONTRACT_ADDRESS","CONFIRMATIONS_ON_BSC","serverUrl_Testnet","appId_Testnet","serverUrl","appId","info","start","error","walletOptions","document","getElementById","loginBtn","logoutBtn","buyBtn","showTokenBtn","BscChainIdMain","BscChainIdTest","showAddress","web3","Web3","provider","givenProvider","NODE_URL_TESTNET","NODE_URL_MAINNET","providers","HttpProvider","userEnteredPassword","querySelector","atLogin","userAddress","getUserWalletAddress","USER_RefferalLink","presalePasswordEntered","manageTooltipWidth","toggleConnectStatus","secondLoginBtn","setAttribute","populateReferralLinkinHTML","populateReferrerinHTML","error1","populateUserReferralComissions","error2","populateUserReferralsCount","error3","populateUsersInvestments","error4","updateBNBRaised","error5","toggleBtnVisibility","raisedAmount","getTotalBNBAmount","toFixed","raisedAmountPercentage","percentageOfBNBRaised","updateRaisedBNBinDB","style","setProperty","addNetwork","chainId","BscChainId","chainName","rpcUrl","blockExplorerUrl","switchAndAdd","toChainId","switchNetwork","provider1","User","current","user","authenticate","signingMessage","error6","currentChainIdHex","getChainId","hitDataLayer","error7","dataset","tip","get","getBalance","logOut","atLogout","error8","error9","error10","error11","enableButton","setRefferrerBtn","classList","add","setPresalePassword","error12","showArenaLock","error13","addReferrerBtn","addReferrerInput","address","currentUserAddress","options","Web3API","account","getNativeBalance","tokenList","innerHTML","HEX_TO_CHAIN_DETAILS","nativeToken","utils","fromWei","nativeBal","balance","balances","getTokenBalances","length","forEach","token","symbol","convertTokenBalance","decimals","connected","allBtns","querySelectorAll","btn","remove","statusFields","el","background","newBalance","Math","pow","isPresaleOpen","readFunction","inputs","name","outputs","internalType","type","stateMutability","functionName","ABI","contractAddress","abi","executeFunction","getBuyAmount","buyAmount","value","buyToken","BNBValue","errMsgContainer","errMsg","msg","showErrMsg","isSaleOpen","msgValue","Units","ETH","swapAmountDataLayer","confirmTransactionDataLayer","transaction","result","wait","transactionHash","IBATValue","calculateIBATAmount","swapSuccessfulDataLayer","error14","message","includes","data","errorBad","DECIMALS","populateAmountRaisedinHTML","progressBars","percentageForBar","raisedAmountHTML","raisedAmountPercentageHTML","e","leftVal","left","toggleErrMsg","checked","ethereum","isInstalled","on","onclick"],"version":3,"file":"index.3325dc19.js.map"}