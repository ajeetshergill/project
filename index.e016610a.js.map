{"mappings":"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","sources":["src/js/referralHandler.js"],"sourcesContent":["\r\n// const copyReferLinkBtn = document.getElementById(\"refer-link-icon\");\r\nconst copyReferLinkBtns = document.querySelectorAll(\".refer-link\");\r\nconst DECIMALS = +18;\r\nconst IBAT_PER_BNB_PRESALE = +166666.66;\r\nconst IBAT_PER_BNB_PRIVATE = +208333.33;\r\n// async function populateReferrerOf(userAddress) {\r\nconst defaultReferrer = '0x0000000000000000000000000000000000000000';\r\nasync function populateReferrerinHTML(userAddress) {\r\n    console.log(`populateReferrerinHTML - ${userAddress}`);\r\n    let referrerValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) referrerValue = await getReferrer(userAddress);\r\n    // show referrer value only if it's not default : i.e. something other than 0x00...0\r\n\r\n    const referrerField = document.querySelector('.refer-referrer');\r\n    // if (referrerValue !== defaultReferrer) {\r\n    console.log(`dev:Setting Referrer Field`);\r\n    if (referrerField) {\r\n        if (referrerValue === defaultReferrer) {\r\n            referrerField.value = 'Referrer Not Added'\r\n        } else referrerField.value = referrerValue;\r\n    } else {\r\n        console.error(`dev:referrerField missing`);\r\n    }\r\n    // const referrerFields = document.querySelectorAll('.refer-referrer');\r\n    // const referrerFieldsContainer = document.querySelectorAll('.refer-referrer-container');\r\n    // referrerFieldsContainer && referrerFieldsContainer.forEach(el => {\r\n    //     el.classList.remove('hidden');\r\n    // });\r\n    // referrerFields && referrerFields.forEach(el => {\r\n    //     // in this example - the userAddress = logged out\r\n    //     el.value = referrerValue;\r\n    // });\r\n    // }\r\n\r\n    // uncomment the below line - to check if the addReferrerBtn will show when the reffere is 0x00...00 or not\r\n    // referrerValue = '0x0000000000000000000000000000000000000000'\r\n    /**\r\n     * if referrer is 0x0000000000000000000000000000000000000000\r\n     * then show the ability to change / setReferrer\r\n     * else keep it hidden\r\n     */\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    if (setRefferrerBtn) {\r\n        if (referrerValue === defaultReferrer) setRefferrerBtn.classList.remove('hidden')\r\n        else setRefferrerBtn.classList.add('hidden')\r\n    }\r\n    const addReferrerBtn = document.getElementById('add-referrer-btn');\r\n    const addReferrerInput = document.getElementById('add-referrer-address');\r\n    if (referrerValue !== defaultReferrer) {\r\n        disableButton(addReferrerBtn);\r\n        disableButton(addReferrerInput);\r\n    }\r\n}\r\n\r\nasync function getTotalBnbAmount() {\r\n    // let raisedAmount = await readFunction(functionName, ABI_totalBnbAMount);\r\n    // console.log(`--ran--1`);\r\n    const functionName = 'totalBNBAmount';\r\n    const ABI_totalBnbAMount = [{ \"inputs\": [], \"name\": \"totalBNBAmount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS,\r\n        functionName: functionName,\r\n        abi: ABI_totalBnbAMount,\r\n    }\r\n\r\n    // console.log(`--ran--2`);\r\n    let raisedAmount = await Moralis.executeFunction(options);\r\n    raisedAmount = raisedAmount / Math.pow(10, DECIMALS);\r\n    // console.log(`--ran--3`);\r\n    return raisedAmount;\r\n}\r\n\r\nasync function getReferrer(userAddress) {\r\n    const ABI_getReferrer = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS,\r\n        functionName: 'getReferrer',\r\n        abi: ABI_getReferrer,\r\n        params: {\r\n            _user: userAddress,\r\n        }\r\n    }\r\n    // let options = {\r\n    //     contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n    //     functionName: 'getReferrer',\r\n    //     abi: ABI_getReferrer,\r\n    //     params: {\r\n    //         _user: userAddress,\r\n    //     }\r\n    // }\r\n\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nasync function populateUserReferralsCount(userAddress) {\r\n    let countValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) countValue = await getReferralsCount(userAddress);\r\n    const referrerFields = document.querySelectorAll('.refer-total');\r\n    referrerFields && referrerFields.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = countValue;\r\n    });\r\n}\r\n\r\n// //the address with with Referrer not 0x000 (provided by Jagjeet)\r\n// const addressWithReferrerNot0x000 = '0x0B277AbA422fD3d1e38e93aFfe684B68fc001647'\r\n\r\nasync function getReferralsCount(userAddress) {\r\n    const ABI_referralsCount = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userReferralsCount\", \"type\": \"address\" }], \"name\": \"getReferralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    // //the address with count=1 (provided by Jagjeet)\r\n    // userAddress = '0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0';\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS,\r\n        functionName: 'getReferralsCount',\r\n        abi: ABI_referralsCount,\r\n        params: {\r\n            _userReferralsCount: userAddress,\r\n        }\r\n    }\r\n    // let options = {\r\n    //     contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n    //     functionName: 'getReferralsCount',\r\n    //     abi: ABI_referralsCount,\r\n    //     params: {\r\n    //         _userReferralsCount: userAddress,\r\n    //     }\r\n    // }\r\n\r\n    let r = ''\r\n    try {\r\n        r = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        r = 'Connect to BSC Chain'\r\n        console.error(error);\r\n    }\r\n\r\n    return r\r\n}\r\n\r\nasync function addReferrer() {\r\n    const referrerAddress = document.querySelector('#add-referrer-address');\r\n    const errContainer = document.querySelector('#buy-token-error-con');\r\n    const errMsgContainer = document.querySelector('#buy-token-error-msg');\r\n    // const errContainer = document.querySelector('#add-referrer-err');\r\n    // const errMsgContainer = document.querySelector('#add-referrer-msg');\r\n    // let refAdd = referrerAddress.value + '';\r\n    // refAdd = refAdd.toLowerCase();\r\n\r\n\r\n\r\n    // console.log(referrerAddress);\r\n    // console.log(referrerAddress.value);\r\n\r\n    /**\r\n     * if the existing referrer field is populated and is equal to default referrer then show error.\r\n     */\r\n    if (referrerAddress && !referrerAddress.value) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Paste Your Referral Wallet Address below');\r\n        // showErrMsg(errContainer, errMsgContainer, 'Empty Referrer Address Field!');\r\n        return;\r\n    } else if (referrerAddress && referrerAddress.value.length <= 6) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!');\r\n        return;\r\n    } else if (isUserConnected) {\r\n        // if (!Moralis.isWeb3Enabled()) await Moralis.enableWeb3();\r\n        // Moralis.enableWeb3(); // blah\r\n        if (!isUserConnected()) {\r\n            showErrMsg(errContainer, errMsgContainer, 'Wallet not connected!');\r\n            return;\r\n        }\r\n    } else {\r\n        console.error(`referrerAddress#add-referrer-address missing`);\r\n        // return;\r\n    }\r\n\r\n    const existingReferrerValue = document.querySelector('.refer-referrer').value;\r\n    console.log(existingReferrerValue);\r\n    console.log(existingReferrerValue !== defaultReferrer);\r\n    console.log(defaultReferrer);\r\n    if (existingReferrerValue !== defaultReferrer) {\r\n        console.log(`======= ${existingReferrerValue}`);\r\n        showErrMsg(errContainer, errMsgContainer, 'Referrer Address already setup!');\r\n        return;\r\n    }\r\n    // at this point the refer address exists, isn't empty and length is > 6 characters\r\n\r\n    try {\r\n        let result = await setReferAddress(referrerAddress.value);\r\n        // let result = await setReferAddress(refAdd);\r\n        populateReferrerinHTML(getUserWalletAddress());\r\n        console.log(result);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!!!');\r\n    }\r\n}\r\nasync function setReferAddress(referrerAddress) {\r\n\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"referAddress\", \"type\": \"address\" }], \"name\": \"addReferAddress\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }];\r\n    console.log(`setReferAddress to - ${referrerAddress}`);\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS,\r\n        functionName: 'addReferAddress',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            referAddress: referrerAddress,\r\n        }\r\n    }\r\n    // let options = {\r\n    //     contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n    //     functionName: 'addReferAddress',\r\n    //     abi: ABI_totalReferralCommissions,\r\n    //     params: {\r\n    //         referAddress: referrerAddress,\r\n    //     }\r\n    // }\r\n\r\n    let transaction;\r\n    try {\r\n        transaction = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return await transaction.wait();\r\n}\r\n\r\nasync function populateUserReferralComissions(userAddress) {\r\n    console.log(`Getting commission of: ${userAddress}`);\r\n    let commissionValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) commissionValue = await getTotalReferralCommissions(userAddress);\r\n    // commissionValue = commissionValue / Math.pow(10, DECIMALS);\r\n    const DECIMAL_FOR_EARNING = +9;\r\n    commissionValue = commissionValue / Math.pow(10, DECIMAL_FOR_EARNING);\r\n    commissionValue = commissionValue.toFixed(2);\r\n\r\n    const commssionFields = document.querySelectorAll('.refer-earning');\r\n    commssionFields && commssionFields.forEach(el => {\r\n        console.log(`Setting commission to: ${commissionValue}`);\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = `${commissionValue} IBAT`;\r\n    });\r\n}\r\n\r\nasync function getTotalReferralCommissions(userAddress) {\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userCommission\", \"type\": \"address\" }], \"name\": \"getTotalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS,\r\n        functionName: 'getTotalReferralCommissions',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            _userCommission: userAddress,\r\n        }\r\n    }\r\n    // let options = {\r\n    //     contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n    //     functionName: 'getTotalReferralCommissions',\r\n    //     abi: ABI_totalReferralCommissions,\r\n    //     params: {\r\n    //         _userCommission: userAddress,\r\n    //     }\r\n    // }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nasync function populateUsersInvestments(userAddress) {\r\n    console.log(`Getting commission of: ${userAddress}`);\r\n    let investmentValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) investmentValue = await getUsersInvestments(userAddress);\r\n    investmentValue = +investmentValue / Math.pow(10, DECIMALS);\r\n\r\n    // we will one for private sale as well\r\n    investmentValue = +investmentValue * IBAT_PER_BNB_PRESALE;\r\n    // investmentValue = +investmentValue * IBAT_PER_BNB_PRIVATE;\r\n\r\n    investmentValue = +investmentValue.toFixed(2);\r\n\r\n    const investmentFields = document.querySelectorAll('.user-investment');\r\n    investmentFields && investmentFields.forEach(el => {\r\n        console.log(`Setting investment to: ${investmentValue}`);\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = `${investmentValue} IBAT`;\r\n    });\r\n}\r\n\r\nconst refreshUsersInvestmentBtn = document.getElementById('refreshUsersInvestmentsBtn');\r\nif (refreshUsersInvestmentBtn) {\r\n    refreshUsersInvestmentBtn.onclick = refreshUsersInvestments;\r\n} else {\r\n    console.error(`Refresh UserInvestmentBtn missing in UI`);\r\n}\r\n\r\nfunction refreshUsersInvestments(el) {\r\n    console.log(`refresh usersInvestments`);\r\n    if (!isUserConnected()) return;\r\n    // if (el && el.transactionHash) {\r\n    //     console.log(`Transaction Successful - hash`);\r\n    //     console.log(el.hash);\r\n    //     return;\r\n    // }\r\n    try {\r\n        populateUsersInvestments(getUserWalletAddress());\r\n        // setTimeout(refreshUsersInvestments, 1000, el);\r\n        // console.log(`done refresh after buying - populateUsersInvestments`);\r\n    } catch (error) {\r\n        console.error(`failed refresh after buying - populateUsersInvestments`);\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function getUsersInvestments(userAddress) {\r\n    const ABI_usersInvestments = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"usersInvestments\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"stateMutability\": \"payable\", \"type\": \"receive\" }];\r\n\r\n    // let options = {\r\n    //     contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n    //     functionName: 'usersInvestments',\r\n    //     abi: ABI_usersInvestments,\r\n    //     params: {\r\n    //         \"\": userAddress,\r\n    //     }\r\n    // }\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS,\r\n        functionName: 'usersInvestments',\r\n        abi: ABI_usersInvestments,\r\n        params: {\r\n            \"\": userAddress,\r\n        }\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction copyReferLink() {\r\n    // get the referralLink\r\n    /**\r\n        if user logged in - show the box \r\n        else nothing OR hide the box at logout\r\n    * \r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    // store it in variable\r\n    const URL_Prefix = 'https://presale.battleinfinity.io/?refercode='\r\n    let USER_RefferalLink = `${URL_Prefix}${userAddress}`;\r\n    populateReferralLinkinHTML(USER_RefferalLink);\r\n\r\n    navigator.clipboard.writeText(USER_RefferalLink);\r\n\r\n    // console.log(`copied`);\r\n    // populateReferralLinkinHTML('bkahsasdasd');\r\n}\r\nfunction populateReferralLinkinHTML(referralLink) {\r\n    const linkNodes = document.querySelectorAll('.refer-link-text');\r\n    linkNodes && linkNodes.forEach(el => {\r\n        el.innerHTML = referralLink;\r\n        el.value = referralLink;\r\n    });\r\n}\r\n// copyReferLinkBtn.onclick = copyReferLink;\r\ncopyReferLinkBtns.forEach(el => (el.onclick = copyReferLink))\r\n"],"names":["copyReferLinkBtns","document","querySelectorAll","DECIMALS","IBAT_PER_BNB_PRESALE","IBAT_PER_BNB_PRIVATE","defaultReferrer","populateReferrerinHTML","userAddress","console","log","referrerValue","isUserConnected","getReferrer","referrerField","querySelector","value","error","setRefferrerBtn","classList","remove","add","addReferrerBtn","getElementById","addReferrerInput","disableButton","getTotalBnbAmount","options","contractAddress","REFER_CONTRACT_ADDRESS","functionName","abi","internalType","name","type","stateMutability","raisedAmount","Moralis","executeFunction","Math","pow","params","_user","populateUserReferralsCount","countValue","getReferralsCount","referrerFields","forEach","el","innerHTML","_userReferralsCount","r","addReferrer","referrerAddress","errContainer","errMsgContainer","showErrMsg","length","existingReferrerValue","result","setReferAddress","getUserWalletAddress","transaction","inputs","outputs","referAddress","wait","populateUserReferralComissions","commissionValue","getTotalReferralCommissions","toFixed","commssionFields","_userCommission","populateUsersInvestments","investmentValue","getUsersInvestments","investmentFields","refreshUsersInvestmentBtn","refreshUsersInvestments","copyReferLink","USER_RefferalLink","populateReferralLinkinHTML","navigator","clipboard","writeText","onclick"],"version":3,"file":"index.e016610a.js.map"}