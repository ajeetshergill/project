{"mappings":"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","sources":["src/js/referralHandler.js"],"sourcesContent":["\r\n// const copyReferLinkBtn = document.getElementById(\"refer-link-icon\");\r\nconst copyReferLinkBtns = document.querySelectorAll(\".refer-link\");\r\n// async function populateReferrerOf(userAddress) {\r\nasync function populateReferrerLinkinHTML(userAddress) {\r\n    console.log(`populateReferrerLinkinHTML - ${userAddress}`);\r\n    const defaultReferrer = '0x0000000000000000000000000000000000000000';\r\n\r\n    let referrerValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) referrerValue = await getReferrer(userAddress);\r\n    // show referrer value only if it's not default : i.e. something other than 0x00...0\r\n    if (referrerValue !== defaultReferrer) {\r\n        console.log(`dev:Setting Referrer Field`);\r\n        const referrerField = document.querySelector('.refer-referrer');\r\n        if (referrerField) {\r\n            referrerField.value = referrerValue;\r\n        } else {\r\n            console.error(`dev:referrerField missing`);\r\n        }\r\n        // const referrerFields = document.querySelectorAll('.refer-referrer');\r\n        // const referrerFieldsContainer = document.querySelectorAll('.refer-referrer-container');\r\n        // referrerFieldsContainer && referrerFieldsContainer.forEach(el => {\r\n        //     el.classList.remove('hidden');\r\n        // });\r\n        // referrerFields && referrerFields.forEach(el => {\r\n        //     // in this example - the userAddress = logged out\r\n        //     el.value = referrerValue;\r\n        // });\r\n    }\r\n\r\n    // uncomment the below line - to check if the addReferrerBtn will show when the reffere is 0x00...00 or not\r\n    // referrerValue = '0x0000000000000000000000000000000000000000'\r\n    /**\r\n     * if referrer is 0x0000000000000000000000000000000000000000\r\n     * then show the ability to change / setReferrer\r\n     * else keep it hidden\r\n     */\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    if (setRefferrerBtn) {\r\n        if (referrerValue === defaultReferrer) setRefferrerBtn.classList.remove('hidden')\r\n        else setRefferrerBtn.classList.add('hidden')\r\n    }\r\n}\r\n\r\n\r\nasync function getReferrer(userAddress) {\r\n    const ABI_getReferrer = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferrer',\r\n        abi: ABI_getReferrer,\r\n        params: {\r\n            _user: userAddress,\r\n        }\r\n    }\r\n\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nasync function populateUserReferralsCount(userAddress) {\r\n    let countValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) countValue = await getReferralsCount(userAddress);\r\n    const referrerFields = document.querySelectorAll('.refer-total');\r\n    referrerFields && referrerFields.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = countValue;\r\n    });\r\n}\r\n\r\n// //the address with with Referrer not 0x000 (provided by Jagjeet)\r\n// const addressWithReferrerNot0x000 = '0x0B277AbA422fD3d1e38e93aFfe684B68fc001647'\r\n\r\nasync function getReferralsCount(userAddress) {\r\n    const ABI_referralsCount = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userReferralsCount\", \"type\": \"address\" }], \"name\": \"getReferralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    // //the address with count=1 (provided by Jagjeet)\r\n    // userAddress = '0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0';\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferralsCount',\r\n        abi: ABI_referralsCount,\r\n        params: {\r\n            _userReferralsCount: userAddress,\r\n        }\r\n    }\r\n\r\n    let r = ''\r\n    try {\r\n        r = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        r = 'error-ln99-app'\r\n        console.error(error);\r\n    }\r\n\r\n    return r\r\n}\r\n\r\nasync function addReferrer() {\r\n    const referrerAddress = document.querySelector('#add-referrer-address');\r\n    const errContainer = document.querySelector('#buy-token-error-con');\r\n    const errMsgContainer = document.querySelector('#buy-token-error-msg');\r\n    // const errContainer = document.querySelector('#add-referrer-err');\r\n    // const errMsgContainer = document.querySelector('#add-referrer-msg');\r\n    // let refAdd = referrerAddress.value + '';\r\n    // refAdd = refAdd.toLowerCase();\r\n\r\n    console.log(referrerAddress);\r\n    console.log(referrerAddress.value);\r\n\r\n    if (referrerAddress && !referrerAddress.value) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Empty Referrer Address Field!');\r\n        return;\r\n    } else if (referrerAddress && referrerAddress.value.length <= 6) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!');\r\n        return;\r\n    } else {\r\n        console.error(`referrerAddress#add-referrer-address missing`);\r\n        // return;\r\n    }\r\n    // at this point the refer address exists, isn't empty and length is > 6 characters\r\n\r\n    try {\r\n        let result = await setReferAddress(referrerAddress.value);\r\n        // let result = await setReferAddress(refAdd);\r\n        populateReferrerLinkinHTML(getUserWalletAddress());\r\n        console.log(result);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!!!');\r\n    }\r\n}\r\nasync function setReferAddress(referrerAddress) {\r\n\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"referAddress\", \"type\": \"address\" }], \"name\": \"addReferAddress\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }];\r\n    console.log(`setReferAddress to - ${referrerAddress}`);\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'addReferAddress',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            referAddress: referrerAddress,\r\n        }\r\n    }\r\n\r\n    let transaction;\r\n    try {\r\n        transaction = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return await transaction.wait();\r\n}\r\n\r\nasync function populateUserReferralComissions(userAddress) {\r\n    console.log(`Getting commission of: ${userAddress}`);\r\n    let commissionValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) commissionValue = await getTotalReferralCommissions(userAddress);\r\n    commissionValue = commissionValue / Math.pow(10, 9);\r\n\r\n    const commssionFields = document.querySelectorAll('.refer-earning');\r\n    commssionFields && commssionFields.forEach(el => {\r\n        console.log(`Setting commission to: ${commissionValue}`);\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = `${commissionValue} IBAT`;\r\n    });\r\n}\r\n\r\nasync function getTotalReferralCommissions(userAddress) {\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userCommission\", \"type\": \"address\" }], \"name\": \"getTotalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getTotalReferralCommissions',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            _userCommission: userAddress,\r\n        }\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction copyReferLink() {\r\n    // get the referralLink\r\n    /**\r\n        if user logged in - show the box \r\n        else nothing OR hide the box at logout\r\n    * \r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    // store it in variable\r\n    const URL_Prefix = 'https://presale.battleinfinity.io/?refercode='\r\n    let USER_RefferalLink = `${URL_Prefix}${userAddress}`;\r\n    populateReferralLinkinHTML(USER_RefferalLink);\r\n\r\n    navigator.clipboard.writeText(USER_RefferalLink);\r\n\r\n    // console.log(`copied`);\r\n    // populateReferralLinkinHTML('bkahsasdasd');\r\n}\r\nfunction populateReferralLinkinHTML(referralLink) {\r\n    const linkNodes = document.querySelectorAll('.refer-link-text');\r\n    linkNodes && linkNodes.forEach(el => {\r\n        el.innerHTML = referralLink;\r\n        el.value = referralLink;\r\n    });\r\n}\r\n// copyReferLinkBtn.onclick = copyReferLink;\r\ncopyReferLinkBtns.forEach(el => (el.onclick = copyReferLink))\r\n"],"names":["copyReferLinkBtns","document","querySelectorAll","populateReferrerLinkinHTML","userAddress","console","log","defaultReferrer","referrerValue","isUserConnected","getReferrer","referrerField","querySelector","value","error","setRefferrerBtn","classList","remove","add","options","REFER_CONTRACT_ADDRESS_TESTNET","functionName","abi","internalType","name","type","stateMutability","params","_user","Moralis","executeFunction","populateUserReferralsCount","countValue","getReferralsCount","referrerFields","forEach","el","innerHTML","_userReferralsCount","r","addReferrer","referrerAddress","errContainer","errMsgContainer","length","showErrMsg","result","setReferAddress","getUserWalletAddress","transaction","outputs","referAddress","wait","populateUserReferralComissions","commissionValue","getTotalReferralCommissions","Math","pow","commssionFields","_userCommission","copyReferLink","USER_RefferalLink","clipboard","writeText","populateReferralLinkinHTML","referralLink"],"version":3,"file":"index.f68fa280.js.map"}