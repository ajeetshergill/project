{"mappings":"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","sources":["src/js/devWeb3.js"],"sourcesContent":["window.onload = async function () {\r\n    populateAmountRaisedinHTMLDB();\r\n    // populateAmountRaisedinHTML();\r\n\r\n    /**\r\n     * - if user is already connected - but only page was refreshed - atlogin()\r\n    */\r\n\r\n    if (await isWeb3Installed()) {\r\n        WEB3_INSTALLED = true;\r\n        console.log(`dev:onload`);\r\n        console.log(`dev: web3 installed  - checking if user is connected upon refreshing`);\r\n        try {\r\n            console.log(`dev: onload - enabling web3`);\r\n            await Moralis.enableWeb3();\r\n            console.log(`dev: onload - enabled web3`);\r\n        } catch (ee) {\r\n            console.error(ee);\r\n            console.error(`dev: onload - failed to enable web3`);\r\n        }\r\n        if (isUserConnected()) {\r\n            console.log(`dev: Page-refreshed - User already connected`);\r\n            login();\r\n        }\r\n        console.log(`dev: Page-refreshed - User not connected`);\r\n    } else if (!WEB3_INSTALLED && await isUserConnected()) {\r\n        try {\r\n            console.log(`dev: onload - enabling web3`);\r\n            await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n            console.log(`dev: onload - enabled web3`);\r\n        } catch (ee) {\r\n            console.error(ee);\r\n            console.error(`dev: onload - failed to enable web3`);\r\n        }\r\n        if (isUserConnected()) {\r\n            console.log(`dev: Page-refreshed - User already connected`);\r\n            login('walletconnect')\r\n        }\r\n        console.log(`dev: Page-refreshed - User not connected`);\r\n    }\r\n\r\n\r\n    // this timeout is here coz when switching chain - the function fails until recalled so a quick fix is calling it again after some time\r\n    // setTimeout(() => {\r\n    //     populateAmountRaisedinHTML();\r\n    // }, 5000);\r\n\r\n};\r\n\r\n\r\n/**\r\n * *******************************    WEB3    *******************************\r\n */\r\n// const TEST_ENVIRONMENT = true;\r\nconst TEST_ENVIRONMENT = false;\r\n\r\n\r\nconst REFER_CONTRACT_ADDRESS_TESTNET = '0xfe2E124FE1418419A9efd8Ba987Fa1769D506c8a';\r\n// if TEST_ENVIRONMENT is false then use mainnet contract else testnet contract\r\nconst REFER_CONTRACT_ADDRESS_MAINNET = '0x5832E385f633b30519B3ECaDE3C5eD3d9881cf58'; //mainnet contract\r\n\r\nconst DEPLOYED_CONTRACT_ADDRESS = TEST_ENVIRONMENT ? REFER_CONTRACT_ADDRESS_TESTNET : REFER_CONTRACT_ADDRESS_MAINNET;\r\nconsole.log(`Deployed Presale Contract is ${DEPLOYED_CONTRACT_ADDRESS}`);\r\n\r\nconst CONFIRMATIONS_ON_BSC = 5;\r\nlet WEB3_INSTALLED = false;\r\n// paid-account-joshi-sir\r\nconst serverUrl_Testnet = \"https://gusm6vrpbwtk.usemoralis.com:2053/server\"; //BSC testnet\r\nconst appId_Testnet = \"glRYjrZo9XjLE2MPc7sWgzc4PyoFs3RbmyoNiPbf\"; //BSC testnet\r\nlet serverUrl = \"https://gb6gwydcjjw6.usemoralis.com:2053/server\"; //BSC mainnet\r\nlet appId = \"Zq3s8magh8mlppfXIGSHZRdLj49LlCnIaqs2mD2U\"; //BSC mainnet\r\n\r\nlet currentChainIdHex; //default chain set to ETH\r\ntry {\r\n    // if (WEB3_INSTALLED) {\r\n    if (TEST_ENVIRONMENT) {\r\n        console.info(`starting server - testnet `);\r\n        serverUrl = \"https://gusm6vrpbwtk.usemoralis.com:2053/server\"; //BSC testnet\r\n        appId = \"glRYjrZo9XjLE2MPc7sWgzc4PyoFs3RbmyoNiPbf\"; //BSC testnet\r\n        Moralis.start({ serverUrl, appId });\r\n    } else {\r\n        console.info(`starting server - mainnet `);\r\n        Moralis.start({ serverUrl, appId });\r\n    }\r\n    // } else {\r\n    //     console.error(`dev: wallet/web3 not installed`);\r\n    // }\r\n\r\n} catch (error) {\r\n    console.error(`Server failed to start -ln-34`);\r\n    console.log(error);\r\n}\r\n\r\n\r\nconst walletOptions = document.getElementById(\"wallet-options\");\r\nconst loginBtn = document.getElementById(\"web3-login-mm\");\r\nconst logoutBtn = document.getElementById(\"web3-logout\");\r\nconst buyBtn = document.getElementById(\"buy_btn\");\r\nconst showTokenBtn = document.getElementById(\"web3-tokens\");\r\n\r\nconst BscChainIdMain = 0x38; //Bsc Mainnet ID\r\n// const BscChainIdTest = '0x61'; //Bsc Testnet ID\r\nconst BscChainIdTest = 97; //Bsc Testnet ID\r\n\r\nconst showAddress = document.getElementById(\"web3-wallet-address\");\r\n\r\n// let web3 = new Web3(Moralis.provider || Web3.givenProvider);\r\nconst NODE_URL_TESTNET = \"https://speedy-nodes-nyc.moralis.io/7569a2c3fc822716349963c8/bsc/testnet\";\r\nconst NODE_URL_MAINNET = \"https://speedy-nodes-nyc.moralis.io/7569a2c3fc822716349963c8/bsc/mainnet\";\r\n\r\n// let provider = '';\r\n// if (TEST_ENVIRONMENT) {\r\n//     provider = new Web3.providers.HttpProvider(NODE_URL_TESTNET);\r\n// } else {\r\n//     provider = new Web3.providers.HttpProvider(NODE_URL_MAINNET);\r\n// }\r\n\r\n\r\nconst userEnteredPassword = document.querySelector('#presale-password');\r\n\r\nfunction atLogin() {\r\n    /**\r\n    * 1. show referral box - toggle visibility of it\r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    const URL_Prefix = 'https://presale.battleinfinity.io/?refercode='\r\n    let USER_RefferalLink = `${URL_Prefix}${userAddress}`;\r\n    // let USER_RefferalLink = `url/${userAddress}`;\r\n\r\n    /**\r\n     * If there is a presale password field - only then \r\n     * presalePasswordEntered = true;\r\n     */\r\n    if (!userEnteredPassword) {\r\n        presalePasswordEntered = true;\r\n    }\r\n\r\n    /**\r\n     * Manages the left to make sure that weird zoomed out page effect doesn't happen\r\n     */\r\n    manageTooltipWidth()\r\n    toggleConnectStatus()\r\n    const secondLoginBtn = document.querySelector('#second-login-btn')\r\n    disableButton(secondLoginBtn)\r\n    secondLoginBtn.setAttribute(\"for\", \"\");\r\n\r\n    // if (userEnteredPassword && presalePasswordEntered) {\r\n    try {\r\n        console.log(`start - populateReferralLinkinHTML ..`);\r\n        populateReferralLinkinHTML(USER_RefferalLink);\r\n        console.log(`done - populateReferralLinkinHTML `);\r\n    } catch (error) {\r\n        console.error(`failed - populateReferralLinkinHTML`);\r\n    }\r\n    try {\r\n        console.log(`start - populateReferrerinHTML ..`);\r\n        populateReferrerinHTML(userAddress);\r\n        console.log(`done - populateReferrerinHTML`);\r\n    } catch (error) {\r\n        console.error(`failed - populateReferrerinHTML`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUserReferralComissions`);\r\n        populateUserReferralComissions(userAddress);\r\n        console.log(`done - populateUserReferralComissions`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUserReferralComissions`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUserReferralsCount`);\r\n        populateUserReferralsCount(userAddress);\r\n        console.log(`done - populateUserReferralsCount`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUserReferralsCount`);\r\n    }\r\n    try {\r\n        console.log(`start - populateUsersInvestments`);\r\n        populateUsersInvestments(userAddress);\r\n        console.log(`done - populateUsersInvestments`);\r\n    } catch (error) {\r\n        console.error(`failed - populateUsersInvestments`);\r\n    }\r\n    // each time a user logs in - they fetch value of BNBRaised and update the DB\r\n    try {\r\n        updateBNBRaised()\r\n    } catch (error) {\r\n        console.error(`failed - updateBNBRaised - atlogin`);\r\n    }\r\n    /**\r\n     * Test\r\n     // populateUserReferralComissions('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n     // populateUserReferralsCount('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n     */\r\n    // }\r\n    // toggles the visibility of connect & disconnect button\r\n    if (isUserConnected()) toggleBtnVisibility(true);\r\n\r\n}\r\n\r\nasync function updateBNBRaised() {\r\n    const HARDCAP = +16500;\r\n    let raisedAmount = await getTotalBNBAmount(); //which will be 'logged out' if user is logged out\r\n    raisedAmount = +raisedAmount.toFixed(2);\r\n    const amountBNB = ''\r\n    let raisedAmountPercentage = '';\r\n    try {\r\n        raisedAmountPercentage = percentageOfBNBRaised(raisedAmount, HARDCAP);\r\n    } catch (error) {\r\n        console.error(`dev: percentageOfBNBRaised() issue`);\r\n    }\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    console.log(`raisedAmountPercentage = ${raisedAmountPercentage}`);\r\n    updateRaisedBNBinDB(raisedAmount, raisedAmountPercentage);\r\n}\r\n\r\n/**\r\n * Manages the left to make sure that weird zoomed out page effect doesn't happen\r\n */\r\nfunction manageTooltipWidth() {\r\n    const toolTip = document.querySelector('#web3-wallet-address');\r\n    if (!toolTip) {\r\n        console.error(`tooltips missing`);\r\n        return;\r\n    }\r\n    if (isUserConnected()) {\r\n        console.log('setting left to : 0');\r\n        showAddress.style.setProperty(\"--custom-tooltip-left\", \"0px\");\r\n        return;\r\n    }\r\n    console.log('setting left to : negative');\r\n    showAddress.style.setProperty(\"--custom-tooltip-left\", \"-100px\");\r\n}\r\n\r\n// async function addNetwork(chainId) {\r\n//     const BscChainId = chainId; //Bsc Testnet ID\r\n//     const chainName = \"Testnet BSC\";\r\n//     const currencyName = \"test BNB\";\r\n//     const currencySymbol = \"tBNB\";\r\n//     const rpcUrl = \"https://speedy-nodes-nyc.moralis.io/d633c685eb50e4bb5f7bdcf8/bsc/testnet\";\r\n//     const blockExplorerUrl = \"https://testnet.bscscan.com/\";\r\n//     await Moralis.addNetwork(\r\n//         BscChainId,\r\n//         chainName,\r\n//         currencyName,\r\n//         currencySymbol,\r\n//         rpcUrl,\r\n//         blockExplorerUrl\r\n//     );\r\n// }\r\nasync function addNetwork(chainId) {\r\n    const BscChainId = chainId;\r\n    const chainName = TEST_ENVIRONMENT ? \"BNB Testnet\" : \"BNB Smart Chain Mainnet\";\r\n    const currencyName = TEST_ENVIRONMENT ? \"tBNB\" : \"BNB\";\r\n    const currencySymbol = TEST_ENVIRONMENT ? \"tBNB\" : \"BNB\";;\r\n    const rpcUrl = TEST_ENVIRONMENT ? NODE_URL_TESTNET : NODE_URL_MAINNET;\r\n    const blockExplorerUrl = TEST_ENVIRONMENT ? \"https://testnet.bscscan.com/\" : \"https://bscscan.com/\";\r\n    console.log('BscChainId-chainName-rpcUrl-blockexplorer');\r\n    console.log(`${BscChainId}-${chainName}-${rpcUrl}-${blockExplorerUrl}`);\r\n    await Moralis.addNetwork(\r\n        BscChainId,\r\n        chainName,\r\n        currencyName,\r\n        currencySymbol,\r\n        rpcUrl,\r\n        blockExplorerUrl\r\n    );\r\n}\r\n\r\nasync function switchAndAdd(toChainId = '0x61') {\r\n    console.log(`switchAndAdd - toChainid`);\r\n    console.log(toChainId);\r\n    try {\r\n        await switchNetwork(toChainId);\r\n    } catch (er) {\r\n        await addNetwork(toChainId);\r\n    }\r\n}\r\nasync function switchNetwork(toChainId = '0x61') {\r\n    currentChainIdHex = await Moralis.switchNetwork(toChainId);\r\n}\r\n\r\nasync function login(provider) {\r\n\r\n    let BSC_Chain = TEST_ENVIRONMENT ? BscChainIdTest : BscChainIdMain;\r\n    let user = Moralis.User.current();\r\n\r\n\r\n    // if (provider === 'walletconnect') {\r\n    //     await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n    // }\r\n\r\n\r\n    if (!user) {\r\n        console.log(`Provider :${provider}`);\r\n\r\n        if (provider === 'walletconnect') {\r\n            // try {\r\n            //     await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n            // } catch (error) {\r\n            //     console.error(`dev: enableweb3 walletconnect failed`);\r\n            // }\r\n            console.info(`Authenticating with WalletConnect`);\r\n            try {\r\n                /**\r\n                 * in case the user scans but doesn't approve the transaction -\r\n                 * the Moralis goes in a loading state makeing it hard to connect with WC again\r\n                 **/\r\n                if (Moralis.isEnablingWeb3) await Moralis.deactivateWeb3();\r\n\r\n                user = await Moralis.authenticate({ provider: \"walletconnect\", signingMessage: \"Battle Infinity Authentication: WalletConnect\" });\r\n                console.info(`Enabling Web3 - ${provider}`);\r\n            } catch (wcerror) {\r\n                console.error(wcerror);\r\n                console.error(`dev:Authentication Failed - Walletconnect - login()`);\r\n            }\r\n        } else {\r\n            try {\r\n                console.info(`Authenticating with MetaMask`);\r\n                currentChainIdHex = await Moralis.getChainId();\r\n\r\n                // Authenticate only if user is on correct chain\r\n                console.log(`Current chain -${currentChainIdHex}`);\r\n                console.log(`BSC chain -${BSC_Chain}`);\r\n                if (currentChainIdHex !== BSC_Chain) {\r\n                    // console.log(`Connecting`);\r\n                    console.log(`NOT - Connecting`);\r\n                    console.log(`Current chain - Bsc`);\r\n                    console.log(`${currentChainIdHex} - ${BSC_Chain}`);\r\n                    try {\r\n                        console.log(`dev: login metamask - enabling web3 for switching chain`);\r\n                        await Moralis.enableWeb3();\r\n                        console.log(`dev: login metamask - enabled web3 for switching chain`);\r\n                    } catch (ee) {\r\n                        console.error(ee);\r\n                        console.error(`dev: login metamask - failed to enable web3 for switching chain`);\r\n                    }\r\n                    await switchAndAdd(BSC_Chain);\r\n                }\r\n                // user = await Moralis.authenticate();\r\n                // user = Moralis.authenticate({ signingMessage: \"Battle Infinity Presale Authentication\" });\r\n                // user = Moralis.authenticate({ signingMessage: \"Battle Infinity Private Authentication\" });\r\n                user = await Moralis.authenticate({ signingMessage: \"Battle Infinity Authentication\" });\r\n\r\n                try {\r\n                    if (!TEST_ENVIRONMENT) hitDataLayer(getUserWalletAddress())\r\n                } catch (error) {\r\n                    console.error(`dev:couldn't hit data layer`);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n                console.error(`dev:Authentication Failed - MetaMask`);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    try {\r\n        currentChainIdHex = await Moralis.getChainId();\r\n    } catch (chainIdError) {\r\n        console.error(chainIdError);\r\n        console.error(`dev:getChainId() Failed - login()`);\r\n    }\r\n\r\n    console.log(`Battle Infinity Authentication - signing msg`);\r\n    if (isUserConnected()) {\r\n        console.log(`IBAT Authentication - userconnected`);\r\n        atLogin();\r\n        showAddress.dataset.tip = user.get(\"ethAddress\");\r\n        showAddress.style.setProperty(\"--custom-tooltip-left\", \"0px\");\r\n        // getBalance(currentChainIdHex, user.get(\"ethAddress\"));\r\n    }\r\n\r\n    // Below address is on both BSC & ETH Scan - \r\n    // getBalance('0x1', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // eth chain\r\n    // getBalance('0x38', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // bsc chain - this account has BUSD in it\r\n}\r\n\r\n\r\nfunction getUserWalletAddress() {\r\n    let err = 'Wallet not connected';\r\n    if (!isUserConnected())\r\n        return err;\r\n\r\n    return Moralis.User.current().get(\"ethAddress\");\r\n}\r\n\r\nfunction isUserConnected() {\r\n    let user = Moralis.User.current();\r\n    return user ? true : false;\r\n}\r\n\r\nasync function logOut() {\r\n    try {\r\n        await updateBNBRaised()\r\n    } catch (error) {\r\n        console.error(`dev:failed - updateBNBRaised - logOut()`);\r\n    }\r\n    try {\r\n        await Moralis.deactivateWeb3();\r\n    } catch (error) {\r\n        console.error(`dev:failed Moralis.deactivateWeb3();`);\r\n    }\r\n    await Moralis.User.logOut();\r\n    console.log(\"logged out\");\r\n    // toggleBtnVisibility(false);\r\n    // showAddress.dataset.tip = 'Wallet not connected';\r\n    await atLogout();\r\n    return;\r\n}\r\n\r\nasync function atLogout() {\r\n    /**\r\n     * 1. hide referral box\r\n     */\r\n    // need to \r\n    if (userEnteredPassword) presalePasswordEntered = false;\r\n\r\n    try {\r\n        populateReferralLinkinHTML('Wallet not connected');\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateReferrerinHTML('Wallet not connected')\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUserReferralComissions('0');\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUserReferralsCount(0);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n    try {\r\n        populateUsersInvestments('0');\r\n    } catch (error) {\r\n        console.error(`failed - populateUsersInvestments`);\r\n    }\r\n\r\n\r\n    manageTooltipWidth()\r\n    toggleConnectStatus()\r\n    const secondLoginBtn = document.querySelector('#second-login-btn')\r\n    enableButton(secondLoginBtn)\r\n    secondLoginBtn.setAttribute(\"for\", \"wallets\");\r\n\r\n    // hiding addreferrer btn when logging out\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    setRefferrerBtn && setRefferrerBtn.classList.add('hidden')\r\n\r\n    toggleBtnVisibility(false);\r\n    showAddress.dataset.tip = 'Wallet not connected';\r\n    try {\r\n        setPresalePassword && setPresalePassword();\r\n    } catch (error) {\r\n        console.error(`dev:setPresalePassword(); not defined`);\r\n        // console.error(error);\r\n    }\r\n    try {\r\n        showArenaLock && showArenaLock(true);\r\n    } catch (error) {\r\n        console.error(`dev:showArenaLock(); not defined`);\r\n        // console.error(error);\r\n    }\r\n    const addReferrerBtn = document.getElementById('add-referrer-btn');\r\n    const addReferrerInput = document.getElementById('add-referrer-address');\r\n    enableButton(addReferrerBtn);\r\n    enableButton(addReferrerInput);\r\n\r\n    try {\r\n        console.log(`dev: atlogout - enabling web3`);\r\n        await Moralis.enableWeb3();\r\n        console.log(`dev: atlogout - enabled web3`);\r\n    } catch (ee) {\r\n        console.error(ee);\r\n        console.error(`dev: atlogout - failed to enable web3`);\r\n    }\r\n}\r\n\r\n\r\n// async function getBalance(chainId, address) {\r\n//     const tokenList = document.getElementById('token-list');\r\n//     currentChainIdHex = await Moralis.getChainId();\r\n//     let currentUser = Moralis.User.current();\r\n//     let currentUserAddress = currentUser.get(\"ethAddress\");\r\n//     const options = { chain: chainId || currentChainIdHex || '0x38', address: address || currentUserAddress || \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" };\r\n//     // console.log(`getBalance called with \\n chaidId ${options.chain} and \\n of address: ${options.address}`);\r\n//     // const options = { chain: 'eth', address: \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" } // test address from Etherscan\r\n//     // const options = { chain: 'bsc', address: \"0x60913d3fE722bFE425247D7673D8bdbDA56D1e02\" } // test address from BSC (bscscan)\r\n\r\n//     const nativeBal = await Moralis.Web3API.account.getNativeBalance(options);\r\n\r\n//     if (tokenList) tokenList.innerHTML = `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto mt-2\"><span class=\"w-1/2 text-center\">${HEX_TO_CHAIN_DETAILS[currentChainIdHex].nativeToken}</span><span class=\"w-1/2 text-left\">${web3.utils.fromWei(nativeBal.balance)}</span></li>`\r\n\r\n//     const balances = await Moralis.Web3API.account.getTokenBalances(options);\r\n\r\n//     if (balances.length) {\r\n//         balances.forEach(token => {\r\n//             // console.log(`not - ${token.symbol}`);\r\n//             if (token.symbol == 'USDC' || token.symbol == 'BUSD' || token.symbol == 'IBAT') {\r\n//                 const balance = convertTokenBalance(token.balance, token.decimals);\r\n//                 // const tokenFromWei = web3.utils.fromWei(token.balance)\r\n//                 if (!tokenList) {\r\n//                     console.error('ln:226 - Token List Missing');\r\n//                 } else {\r\n//                     tokenList.innerHTML += `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto\"><span class=\"w-1/2 text-center\">${token.symbol}</span><span class=\"w-1/2 text-left\">${balance}</span></li>`\r\n//                 }\r\n//             }\r\n//         });\r\n//     } else {\r\n//         if (!tokenList) {\r\n//             console.error('dev:getBalance() - Token List Missing');\r\n//         } else {\r\n//             tokenList.innerHTML += `<li class=\"w-full text-center mx-auto text-xs opacity-80 mt-2\">no other tokens available</li>`\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\nfunction toggleBtnVisibility(connected) {\r\n    const allBtns = document.querySelectorAll('.wallet-options-btn ');\r\n    if (connected) { //show\r\n        allBtns.forEach(btn => {\r\n            btn.classList.add('hidden');\r\n        });\r\n        logoutBtn && logoutBtn.classList.remove('hidden');\r\n        showTokenBtn && showTokenBtn.classList.remove('hidden');\r\n        // loginBtn && loginBtn.classList.remove('hidden');\r\n    }\r\n    else {\r\n        if (!allBtns) {\r\n            console.error(`ln:249-Invalid Arguments`);\r\n        } else {\r\n            allBtns.forEach(btn => {\r\n                btn.classList.remove('hidden');\r\n            });\r\n        }\r\n        // walletOptions && walletOptions.classList.remove('hidden');\r\n        logoutBtn && logoutBtn.classList.add('hidden');\r\n        showTokenBtn && showTokenBtn.classList.add('hidden');\r\n    }\r\n}\r\n\r\nfunction toggleConnectStatus() {\r\n    const statusFields = document.querySelectorAll('.connectivity-status');\r\n    statusFields && statusFields.forEach(el => {\r\n        if (isUserConnected()) {\r\n            el.classList.remove('bg-red-400')\r\n            el.style.background = \"#4ade80\";\r\n            el.innerHTML = 'connected'\r\n        } else {\r\n            el.style.background = \"#f87171\";\r\n            el.innerHTML = 'not connected'\r\n        }\r\n    });\r\n}\r\n\r\n\r\nfunction convertTokenBalance(balance, decimals) {\r\n    let newBalance = balance == 0 ? 0 : balance / Math.pow(10, decimals);\r\n    newBalance = newBalance < 0.001 ? 0 : newBalance;\r\n    return newBalance;\r\n}\r\n\r\n\r\n\r\nasync function isPresaleOpen() {\r\n    const ABI = [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    const result = await readFunction('isPresaleOpen', ABI);\r\n    // console.log(`isPresaleOpen = ${result}`);\r\n    return result;\r\n}\r\n\r\n// isPresaleOpen();\r\n\r\nasync function readFunction(functionName, ABI) {\r\n\r\n    let options = {\r\n        contractAddress: DEPLOYED_CONTRACT_ADDRESS,\r\n        functionName: functionName,\r\n        abi: ABI,\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\n\r\n\r\nfunction getBuyAmount() {\r\n    // @todo: validate input\r\n    let buyAmount = 0;\r\n    const buyAmounts = document.querySelectorAll('.buy-amount');\r\n    // console.log(buyAmounts.length);\r\n\r\n    // const buyAmountMob = document.getElementById(\"buy-amount-mobile\");\r\n    // const buyAmountDesktop = document.getElementById(\"buy-amount-desktop\");\r\n    // if (buyAmountMob.classList.contains(hidden))\r\n    buyAmounts.forEach(el => {\r\n        if (el.value) {\r\n            // console.log(`${el.value}`);\r\n            buyAmount = +el.value;\r\n        }\r\n    });\r\n    console.log('buyAmount = ');\r\n    console.log(+buyAmount);\r\n    return buyAmount;\r\n}\r\n\r\nasync function buyToken() {\r\n\r\n    const BNBValue = +getBuyAmount();\r\n\r\n    const errMsgContainer = document.getElementById('buy-token-error-con');\r\n    const errMsg = document.getElementById('buy-token-error-msg');\r\n    let msg = 'Error';\r\n\r\n\r\n\r\n\r\n    if (!isUserConnected()) {\r\n        console.log('User not Logged in - connect wallet');\r\n        msg = 'Wallet not connected';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n    const isSaleOpen = await isPresaleOpen();\r\n    console.log(`sale open - ${isSaleOpen}`);\r\n    if (!isSaleOpen) {\r\n        console.log('Presale is not open');\r\n        msg = 'Presale has not yet started !!!';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n    const MIN_BNB = TEST_ENVIRONMENT ? 0 : 0.1;\r\n    console.log(getUserWalletAddress());\r\n    console.log(getUserWalletAddress() !== '0xc8179e6927b61a4fdc3e5a2db14e641e51b9ad83');\r\n    if (getUserWalletAddress() !== '0xc8179e6927b61a4fdc3e5a2db14e641e51b9ad83' && +BNBValue < MIN_BNB) {\r\n        msg = 'Minimum BNB Amount should be 0.1BNB';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n        return;\r\n    }\r\n\r\n    const FUNCTION_NAME = 'buyToken';\r\n    const ABI = [{ \"inputs\": [], \"name\": \"buyToken\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"payable\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: DEPLOYED_CONTRACT_ADDRESS,\r\n        functionName: FUNCTION_NAME,\r\n        abi: ABI,\r\n        msgValue: Moralis.Units.ETH(BNBValue)\r\n    }\r\n\r\n    let result;\r\n    try {\r\n        // result = await Moralis.executeFunction(options);\r\n        let userAddress = getUserWalletAddress();\r\n        console.log(`Transaction started`);\r\n        if (!TEST_ENVIRONMENT) swapAmountDataLayer(userAddress);\r\n        const transaction = await Moralis.executeFunction(options);\r\n        if (!TEST_ENVIRONMENT) confirmTransactionDataLayer(userAddress);\r\n        console.log(`Transaction finished`);\r\n        console.log(`Transaction`);\r\n        console.log(transaction);\r\n\r\n        const result = await transaction.wait(CONFIRMATIONS_ON_BSC);\r\n        // const result = await transaction.wait(5);\r\n        /**\r\n         * Refresh the userInvestments field\r\n         */\r\n\r\n\r\n        console.log(`Result`);\r\n        console.log(result.transactionHash);\r\n        console.log(result);\r\n        alert(`✅Transaction Successful✅\\nPlease Import token and check your wallet.`)\r\n        let IBATValue = calculateIBATAmount(BNBValue);\r\n        if (!TEST_ENVIRONMENT) result && swapSuccessfulDataLayer(userAddress, result.transactionHash, BNBValue, IBATValue);\r\n        // setTimeout(refreshUsersInvestments, 1000, result);\r\n        console.log(`Add: ${userAddress} \\n tID: ${result.transactionHash} \\n BNB: ${BNBValue} \\nIBAT: ${IBATValue}`);\r\n\r\n    } catch (error) {\r\n        console.log(`Transaction cancelled`);\r\n        try {\r\n            if (error.message) {\r\n                console.log(`log- -`);\r\n                console.log(error.message);\r\n                msg = error.message;\r\n                if (msg.includes('User denied transaction signature')) {\r\n                    msg = 'Transaction declined by User';\r\n                    showErrMsg(errMsgContainer, errMsg, msg);\r\n                    return;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            console.error(`dev:insuffiecient funds error`);\r\n        }\r\n        // msg = error.data.message;\r\n        // console.log(msg);\r\n        msg = 'Insufficient BNB in wallet';\r\n        showErrMsg(errMsgContainer, errMsg, msg);\r\n    }\r\n\r\n}\r\n\r\nasync function getTotalBNBAmount() {\r\n    const functionName = 'totalBNBAmount';\r\n    const ABI_totalBNBAmount = [{ \"inputs\": [], \"name\": \"totalBNBAmount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: DEPLOYED_CONTRACT_ADDRESS,\r\n        functionName: functionName,\r\n        abi: ABI_totalBNBAmount,\r\n    }\r\n\r\n    let raisedAmount = await Moralis.executeFunction(options);\r\n    raisedAmount = raisedAmount / Math.pow(10, DECIMALS);\r\n    return raisedAmount;\r\n}\r\n\r\nasync function populateAmountRaisedinHTML() {\r\n    let BSC_Chain = TEST_ENVIRONMENT ? BscChainIdTest : BscChainIdMain;\r\n    console.log(`populateAmountRaisedinHTML-switchAndAdd-chainId-${BSC_Chain}`);\r\n    await switchAndAdd(BSC_Chain);\r\n\r\n    console.log(`ran - populateAmountRaisedinHTML`);\r\n\r\n    let raisedAmount = await getTotalBNBAmount(); //which will be 'logged out' if user is logged out\r\n    raisedAmount = +raisedAmount.toFixed(2);\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    const HARDCAP = +16500;\r\n    let raisedAmountPercentage = '';\r\n    try {\r\n        raisedAmountPercentage = percentageOfBNBRaised(raisedAmount, HARDCAP);\r\n    } catch (error) {\r\n        console.error(`dev: percentageOfBNBRaised() issue`);\r\n    }\r\n    // if (raisedAmountPercentage < 1) raisedAmountPercentage = 1;\r\n    console.log(`raisedAmount = ${raisedAmount}`);\r\n    console.log(`setting % = ${raisedAmountPercentage}`);\r\n    // if user is logged-in we change the value of refferValue\r\n    const progressBars = document.querySelectorAll('.sale-progress');\r\n\r\n\r\n    progressBars && progressBars.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        let percentageForBar = raisedAmountPercentage;\r\n        percentageForBar < 1 ? percentageForBar = 1 : '';\r\n        el.value = percentageForBar;\r\n    });\r\n\r\n\r\n    const raisedAmountHTML = document.querySelectorAll('.sale-progress-amount');\r\n    raisedAmountHTML && raisedAmountHTML.forEach(el => {\r\n        el.innerHTML = raisedAmount;\r\n    })\r\n\r\n\r\n    const raisedAmountPercentageHTML = document.querySelectorAll('.sale-progress-percentage');\r\n    raisedAmountPercentageHTML && raisedAmountPercentageHTML.forEach(el => {\r\n        el.innerHTML = raisedAmountPercentage;\r\n    })\r\n\r\n\r\n    const parentContainer = document.querySelectorAll('.sale-progress-val-parent');\r\n    parentContainer.forEach(e => {\r\n        let leftVal = +raisedAmountPercentage - 3;\r\n        const maxLeftVal = +94;\r\n        // console.log(`-left = ${leftVal}`);\r\n        leftVal >= maxLeftVal ? leftVal = maxLeftVal : '';\r\n        const minLeftVal = +0;\r\n        leftVal <= minLeftVal ? leftVal = minLeftVal : '';\r\n        // console.log(`-left = ${leftVal}`);\r\n        // console.log(e);\r\n        e.style.left = `${leftVal}%`;\r\n    })\r\n    const parentContainerMob = document.querySelectorAll('.sale-progress-val-parent-mob');\r\n    parentContainerMob.forEach(e => {\r\n        let leftVal = +raisedAmountPercentage - 3;\r\n        const maxLeftValMob = +65;\r\n        leftVal >= maxLeftValMob ? leftVal = maxLeftValMob : '';\r\n        const minLeftValMob = +0;\r\n        leftVal <= minLeftValMob ? leftVal = minLeftValMob : '';\r\n        // console.log(`left = ${leftVal}`);\r\n        // console.log(e);\r\n        e.style.left = `${leftVal}%`;\r\n    })\r\n}\r\n\r\nfunction toggleErrMsg() {\r\n    const errMsg = document.getElementById('buy-token-error-input');\r\n    errMsg.checked = !errMsg.checked;\r\n}\r\n\r\nasync function isWeb3Installed() {\r\n    const ethereum = window.ethereum;\r\n    let isInstalled = true;\r\n    if (!ethereum || !ethereum.on) {\r\n        console.log(`dev:isWeb3Installed - Metamask not installed`);\r\n        isInstalled = false;\r\n    }\r\n    return isInstalled;\r\n}\r\n\r\n\r\nif (buyBtn) {\r\n    buyBtn.onclick = buyToken;\r\n} else {\r\n    console.error(`Login button missing in UI`);\r\n}\r\nif (loginBtn) {\r\n    loginBtn.onclick = login;\r\n} else {\r\n    console.error(`Login button missing in UI`);\r\n}\r\nif (logoutBtn) {\r\n    logoutBtn.onclick = logOut;\r\n} else {\r\n    console.error(`Logout button missing in UI`);\r\n}\r\n// showTokenBtn.onclick = getBalance;\r\n\r\nconst HEX_TO_CHAIN_DETAILS = {\r\n    '0x1': {\r\n        chain: 'ETH',\r\n        nativeToken: 'ETH'\r\n    },\r\n    '0x61': {\r\n        // BSC testnet\r\n        chain: 'tBSC',\r\n        nativeToken: 'tBNB'\r\n    }\r\n    ,\r\n    '0x38': {\r\n        // BSC mainnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n}\r\n\r\n"],"names":["window","onload","async","populateAmountRaisedinHTMLDB","isWeb3Installed","WEB3_INSTALLED","console","log","Moralis","enableWeb3","ee","error","isUserConnected","login","provider","TEST_ENVIRONMENT","REFER_CONTRACT_ADDRESS_TESTNET","REFER_CONTRACT_ADDRESS_MAINNET","DEPLOYED_CONTRACT_ADDRESS","CONFIRMATIONS_ON_BSC","serverUrl_Testnet","appId_Testnet","serverUrl","appId","info","start","walletOptions","document","getElementById","loginBtn","logoutBtn","buyBtn","showTokenBtn","BscChainIdMain","BscChainIdTest","showAddress","NODE_URL_TESTNET","NODE_URL_MAINNET","userEnteredPassword","querySelector","atLogin","userAddress","getUserWalletAddress","USER_RefferalLink","presalePasswordEntered","manageTooltipWidth","toggleConnectStatus","secondLoginBtn","setAttribute","populateReferralLinkinHTML","populateReferrerinHTML","error1","populateUserReferralComissions","error2","populateUserReferralsCount","error3","populateUsersInvestments","error4","updateBNBRaised","error5","toggleBtnVisibility","raisedAmount","getTotalBNBAmount","toFixed","raisedAmountPercentage","percentageOfBNBRaised","updateRaisedBNBinDB","style","setProperty","addNetwork","chainId","BscChainId","chainName","rpcUrl","blockExplorerUrl","switchAndAdd","toChainId","switchNetwork","er","User","current","isEnablingWeb3","deactivateWeb3","user","authenticate","signingMessage","wcerror","currentChainIdHex","getChainId","hitDataLayer","error6","chainIdError","dataset","tip","get","logOut","error7","atLogout","error8","error9","error10","error11","enableButton","setRefferrerBtn","classList","add","setPresalePassword","error12","showArenaLock","error13","addReferrerBtn","addReferrerInput","connected","querySelectorAll","forEach","btn","remove","allBtns","statusFields","el","background","innerHTML","convertTokenBalance","balance","decimals","newBalance","Math","pow","isPresaleOpen","readFunction","inputs","name","outputs","internalType","type","stateMutability","functionName","ABI","options","abi","executeFunction","getBuyAmount","buyAmount","value","buyToken","BNBValue","errMsgContainer","errMsg","msg","isSaleOpen","showErrMsg","contractAddress","msgValue","Units","ETH","swapAmountDataLayer","confirmTransactionDataLayer","transaction","result","wait","transactionHash","alert","IBATValue","calculateIBATAmount","swapSuccessfulDataLayer","error14","message","includes","e","DECIMALS","populateAmountRaisedinHTML","progressBars","percentageForBar","raisedAmountHTML","raisedAmountPercentageHTML","leftVal","left","toggleErrMsg","checked","ethereum","isInstalled","on"],"version":3,"file":"index.44297484.js.map"}