{"mappings":"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","sources":["src/js/app.js"],"sourcesContent":["// import WalletConnect from \"@walletconnect/client\";\r\nconst loader = document.getElementById('loader');\r\nconst navItems = document.querySelectorAll('.nav-section');\r\nfunction navigateTo(el) {\r\n    // this makes the swap modal visible again - in case someone clicked on settings & then changed windows (THIS BEHAVIOUR APPLIES TO ALL MODALS)\r\n    // LEFT FOR NOW - but to implement - I need to disable the checked state to make sure the settings modal hides \r\n    // if (el === 'swap') {\r\n    //     hideSwap('#swap');\r\n    // }\r\n    const itemToShow = document.getElementById(el);\r\n    navItems.forEach(item => {\r\n        if (!item.classList.contains('hidden')) item.classList.add('hidden');\r\n    });\r\n    loader.classList.remove('hidden')\r\n\r\n    setTimeout(() => {\r\n        loader.classList.add('hidden');\r\n    }, 500);\r\n\r\n    itemToShow.classList.add('z-20');\r\n    itemToShow.classList.remove('hidden');\r\n}\r\n\r\nfunction hideSwap(elId, hide) {\r\n    const el = document.querySelector(elId);\r\n    el.style.visibility = hide ? 'hidden' : 'visible';\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * *******************************    WEB3    *******************************\r\n */\r\n// Connecting with Metamask Wallet\r\nconst serverUrl = \"https://cbdyvlhyonhj.usemoralis.com:2053/server\";\r\nconst appId = \"PC04t9NTMGlWn2p5EGf8ukAZbNaZbA1PWrv7IlaC\";\r\nconst CONTRACT_ADDRESS_TESTNET = '0xf8992AE362561427602A50aff0f84085d1fd88f7';\r\n\r\nlet currentChainIdHex; //default chain set to ETH\r\nMoralis.start({ serverUrl, appId });\r\n\r\nconst walletOptions = document.getElementById(\"wallet-options\");\r\nconst loginBtn = document.getElementById(\"web3-login-mm\");\r\nconst logoutBtn = document.getElementById(\"web3-logout\");\r\nconst showTokenBtn = document.getElementById(\"web3-tokens\");\r\n\r\nconst showAddress = document.getElementById(\"web3-wallet-address\");\r\n\r\nlet web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\n\r\nasync function login(provider) {\r\n    // const BscChainId = \"0x38\"; //Bsc Mainnet ID\r\n    const BscChainId = \"0x61\"; //Bsc Testnet ID\r\n\r\n    // console.log(`Provider : ${provider}`);\r\n\r\n    let user = Moralis.User.current();\r\n    if (!user) {\r\n        // console.log(`Provider : ${provider} : ${provider === 'walletconnect'}`);\r\n        if (provider === 'walletconnect') {\r\n            user = await Moralis.Web3.authenticate({ provider: \"walletconnect\" });\r\n        } else {\r\n            user = await Moralis.Web3.authenticate();\r\n        }\r\n        currentChainIdHex = await Moralis.switchNetwork(BscChainId);\r\n    }\r\n    currentChainIdHex = await Moralis.getChainId();\r\n    await Moralis.enableWeb3();\r\n\r\n    // toggles the visibility of connect & disconnect button\r\n    toggleBtnVisibility(true);\r\n\r\n    showAddress.dataset.tip = user.get(\"ethAddress\");\r\n    getBalance(currentChainIdHex, user.get(\"ethAddress\"));\r\n\r\n    // Below address is on both BSC & ETH Scan - \r\n    // getBalance('0x1', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // eth chain\r\n    // getBalance('0x38', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // bsc chain - this account has BUSD in it\r\n}\r\n\r\nfunction isUserConnected() {\r\n    let user = Moralis.User.current();\r\n    return user ? true : false;\r\n}\r\n\r\nasync function logOut() {\r\n    await Moralis.User.logOut();\r\n    // console.log(\"logged out\");\r\n    toggleBtnVisibility(false);\r\n    showAddress.dataset.tip = 'Wallet not connected';\r\n}\r\n\r\n\r\nasync function getBalance(chainId, address) {\r\n    const tokenList = document.getElementById('token-list');\r\n    currentChainIdHex = await Moralis.getChainId();\r\n    let currentUser = Moralis.User.current();\r\n    let currentUserAddress = currentUser.get(\"ethAddress\");\r\n    const options = { chain: chainId || currentChainIdHex || '0x38', address: address || currentUserAddress || \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" };\r\n    // console.log(`getBalance called with \\n chaidId ${options.chain} and \\n of address: ${options.address}`);\r\n    // const options = { chain: 'eth', address: \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" } // test address from Etherscan\r\n    // const options = { chain: 'bsc', address: \"0x60913d3fE722bFE425247D7673D8bdbDA56D1e02\" } // test address from BSC (bscscan)\r\n\r\n    const nativeBal = await Moralis.Web3API.account.getNativeBalance(options);\r\n\r\n    // console.log(`log 2 : ${currentChainIdHex}`);\r\n    // console.log(`log 3 : ${HEX_TO_CHAIN_DETAILS[currentChainIdHex].nativeToken}`);\r\n    tokenList.innerHTML = `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto mt-2\"><span class=\"w-1/2 text-center\">${HEX_TO_CHAIN_DETAILS[currentChainIdHex].nativeToken}</span><span class=\"w-1/2 text-left\">${web3.utils.fromWei(nativeBal.balance)}</span></li>`\r\n\r\n    const balances = await Moralis.Web3API.account.getTokenBalances(options);\r\n    // console.log(`log 4--`);\r\n    // console.log(balances);\r\n    // console.log(`--log 4`);\r\n    // console.log(`log 5--`);\r\n    // console.log(options);\r\n    // console.log(`--log 5`);\r\n    if (balances.length) {\r\n        balances.forEach(token => {\r\n            // console.log(`not - ${token.symbol}`);\r\n            if (token.symbol == 'USDC' || token.symbol == 'BUSD' || token.symbol == 'IBAT') {\r\n                const balance = convertTokenBalance(token.balance, token.decimals);\r\n                // const tokenFromWei = web3.utils.fromWei(token.balance)\r\n                tokenList.innerHTML += `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto\"><span class=\"w-1/2 text-center\">${token.symbol}</span><span class=\"w-1/2 text-left\">${balance}</span></li>`\r\n            }\r\n        });\r\n    } else {\r\n        tokenList.innerHTML += `<li class=\"w-full text-center mx-auto text-xs opacity-80 mt-2\">no other tokens available</li>`\r\n    }\r\n}\r\n\r\n\r\nfunction toggleBtnVisibility(connected) {\r\n    const allBtns = document.querySelectorAll('.wallet-options-btn ');\r\n    if (connected) { //show\r\n        // loginBtn.classList.add('hidden');\r\n        allBtns.forEach(btn => {\r\n            btn.classList.add('hidden');\r\n        });\r\n        // walletOptions.classList.add('hidden');\r\n        logoutBtn.classList.remove('hidden');\r\n        showTokenBtn.classList.remove('hidden');\r\n    }\r\n    else {\r\n        // loginBtn.classList.remove('hidden');\r\n        // walletOptions.classList.remove('hidden');\r\n        allBtns.forEach(btn => {\r\n            btn.classList.remove('hidden');\r\n        });\r\n        logoutBtn.classList.add('hidden');\r\n        showTokenBtn.classList.add('hidden');\r\n    }\r\n}\r\n\r\n\r\nfunction convertTokenBalance(balance, decimals) {\r\n    let newBalance = balance == 0 ? 0 : balance / Math.pow(10, decimals);\r\n    newBalance = newBalance < 0.001 ? 0 : newBalance;\r\n    return newBalance;\r\n}\r\n\r\nasync function isPresaleOpen() {\r\n    await Moralis.enableWeb3();\r\n    const ABI = [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    const result = await readFunction('isPresaleOpen', ABI);\r\n    // console.log(`isPresaleOpen = ${result}`);\r\n}\r\n\r\n// isPresaleOpen();\r\n\r\nasync function readFunction(functionName, ABI) {\r\n    // let options = {\r\n    //     contractAddress: '0x356d2E7a0d592bAd95E86d19479c37cfdBb68Ab9',\r\n    //     functionName: 'isPresaleOpen',\r\n    //     abi: [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }],\r\n    //     Params: {\r\n    //         Note: 'Thanks for your work'\r\n    //     },\r\n    //     msgValue: Moralis.Units.ETH(0.1)\r\n    // }\r\n    let options = {\r\n        contractAddress: CONTRACT_ADDRESS_TESTNET,\r\n        functionName: functionName,\r\n        abi: ABI,\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction getBuyAmount() {\r\n    // @todo: validate input\r\n    let buyAmount = 0;\r\n    const buyAmounts = document.querySelectorAll('.buy-amount');\r\n    // console.log(buyAmounts.length);\r\n\r\n    // const buyAmountMob = document.getElementById(\"buy-amount-mobile\");\r\n    // const buyAmountDesktop = document.getElementById(\"buy-amount-desktop\");\r\n    // if (buyAmountMob.classList.contains(hidden))\r\n    buyAmounts.forEach(el => {\r\n        if (el.value) {\r\n            // console.log(`${el.value}`);\r\n            buyAmount = +el.value;\r\n        }\r\n    });\r\n    // console.log(+buyAmount);\r\n    return buyAmount;\r\n}\r\nasync function buyToken() {\r\n    // console.log('Ran buyToken()');\r\n    let value = getBuyAmount();\r\n    // console.log(value);\r\n\r\n    await Moralis.enableWeb3();\r\n    if (!isUserConnected()) {\r\n        console.log('User not Logged in - connect wallet');\r\n        return;\r\n    }\r\n\r\n\r\n    const FUNCTION_NAME = 'buyToken';\r\n    const ABI = [{ \"inputs\": [], \"name\": \"buyToken\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"payable\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: CONTRACT_ADDRESS_TESTNET,\r\n        functionName: FUNCTION_NAME,\r\n        abi: ABI,\r\n        msgValue: Moralis.Units.ETH(value)\r\n    }\r\n    let result;\r\n    try {\r\n        result = await Moralis.executeFunction(options);\r\n        // console.log(`Result \\n${result}`);\r\n    } catch (error) {\r\n        const errMsg = document.getElementById('buy-token-error-msg');\r\n        errMsg.innerHTML = error.data.message;\r\n        toggleErrMsg();\r\n    }\r\n}\r\nfunction toggleErrMsg() {\r\n    const errMsg = document.getElementById('buy-token-error-input');\r\n    errMsg.checked = !errMsg.checked;\r\n}\r\n\r\n\r\nloginBtn.onclick = login;\r\nlogoutBtn.onclick = logOut;\r\n// showTokenBtn.onclick = getBalance;\r\n\r\nconst HEX_TO_CHAIN_DETAILS = {\r\n    '0x1': {\r\n        chain: 'ETH',\r\n        nativeToken: 'ETH'\r\n    },\r\n    '0x61': {\r\n        // BSC testnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n    ,\r\n    '0x38': {\r\n        // BSC mainnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n}\r\n\r\n"],"names":["loader","document","getElementById","navItems","querySelectorAll","navigateTo","el","itemToShow","forEach","item","classList","contains","add","remove","setTimeout","hideSwap","elId","hide","querySelector","style","visibility","serverUrl","appId","CONTRACT_ADDRESS_TESTNET","currentChainIdHex","start","walletOptions","loginBtn","logoutBtn","showTokenBtn","web3","Web3","givenProvider","login","provider","user","Moralis","User","current","authenticate","switchNetwork","getChainId","enableWeb3","toggleBtnVisibility","showAddress","dataset","tip","get","getBalance","isUserConnected","logOut","chainId","address","tokenList","currentUserAddress","options","chain","nativeBal","Web3API","account","getNativeBalance","innerHTML","HEX_TO_CHAIN_DETAILS","nativeToken","utils","fromWei","balance","balances","getTokenBalances","length","token","symbol","convertTokenBalance","decimals","connected","allBtns","btn","newBalance","Math","pow","isPresaleOpen","readFunction","inputs","internalType","name","type","stateMutability","functionName","ABI","contractAddress","abi","executeFunction","getBuyAmount","buyAmount","value","buyToken","console","log","result","msgValue","Units","ETH","error","data","message","toggleErrMsg","errMsg","checked","onclick"],"version":3,"file":"dapp.c633e939.js.map"}