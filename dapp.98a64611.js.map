{"mappings":"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","sources":["src/js/app.js"],"sourcesContent":["// import WalletConnect from \"@walletconnect/client\";\r\nconst loader = document.getElementById('loader');\r\nconst navItems = document.querySelectorAll('.nav-section');\r\nfunction navigateTo(el) {\r\n    // this makes the swap modal visible again - in case someone clicked on settings & then changed windows (THIS BEHAVIOUR APPLIES TO ALL MODALS)\r\n    // LEFT FOR NOW - but to implement - I need to disable the checked state to make sure the settings modal hides \r\n    // if (el === 'swap') {\r\n    //     hideSwap('#swap');\r\n    // }\r\n    const itemToShow = document.getElementById(el);\r\n    navItems.forEach(item => {\r\n        if (!item.classList.contains('hidden')) item.classList.add('hidden');\r\n    });\r\n    loader.classList.remove('hidden')\r\n\r\n    setTimeout(() => {\r\n        loader.classList.add('hidden');\r\n    }, 500);\r\n\r\n    itemToShow.classList.add('z-20');\r\n    itemToShow.classList.remove('hidden');\r\n}\r\n\r\nfunction hideSwap(elId, hide) {\r\n    const el = document.querySelector(elId);\r\n    el.style.visibility = hide ? 'hidden' : 'visible';\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * *******************************    dapp.html : Additional Functionality    *******************************\r\n */\r\n// When #arana-lock is commented, everthing will keep working like it's supposed to be if presalePasswordEntered = true && have to change the value of presale in atlogout() too(uncomment it)\r\nlet presalePasswordEntered = true;\r\n// let presalePasswordEntered = false;\r\n\r\n\r\n\r\nfunction authenticatePresale() {\r\n    if (!isUserConnected()) {\r\n        showPasswordErrMsg('Login Required');\r\n        return;\r\n    }\r\n\r\n    const CORRECT_PASSWORD = 'PASSWORD';\r\n    const userEnteredPassword = document.querySelector('#presale-password');\r\n\r\n    // console.log(userEnteredPassword === CORRECT_PASSWORD);\r\n\r\n    if (userEnteredPassword.value === CORRECT_PASSWORD) {\r\n        presalePasswordEntered = true;\r\n        atLogin();\r\n        showArenaLock(false);\r\n        userEnteredPassword.innerHTML = '';\r\n        return;\r\n    } else {\r\n        showPasswordErrMsg('Incorrect Password');\r\n    }\r\n\r\n}\r\n\r\nfunction showPasswordErrMsg(msg) {\r\n    const passwordErrMsg = document.querySelector('#password-error-msg');\r\n    passwordErrMsg.innerHTML = msg;\r\n    passwordErrMsg.classList.remove('opacity-0')\r\n    passwordErrMsg.classList.add('opacity-100')\r\n    setTimeout(() => {\r\n        const passwordErrMsg = document.querySelector('#password-error-msg');\r\n        passwordErrMsg.classList.remove('opacity-100')\r\n        passwordErrMsg.classList.add('opacity-0')\r\n    }, 500);\r\n}\r\nfunction showErrMsg(elContainer, msgContainer, msg) {\r\n    msgContainer.innerHTML = msg;\r\n    elContainer.classList.remove('opacity-0')\r\n    elContainer.classList.add('opacity-100')\r\n    setTimeout(hideErrMsg, 500, elContainer);\r\n}\r\nfunction hideErrMsg(el) {\r\n    el.classList.remove('opacity-100')\r\n    el.classList.add('opacity-0')\r\n    // el.innerHTML = '';\r\n}\r\n\r\nfunction showArenaLock(show) {\r\n    let arenaLock = document.querySelector('#arena-lock');\r\n    // If the element of areanlock doesn't exist (can be commented out)\r\n    // just return because doing anything will throw console error\r\n    if (!arenaLock) {\r\n        return;\r\n    }\r\n    if (show) {\r\n        arenaLock.classList.remove('hidden');\r\n    }\r\n    else {\r\n        arenaLock.classList.add('hidden');\r\n    }\r\n}\r\n\r\n\r\n\r\n// const copyReferLinkBtn = document.getElementById(\"refer-link-icon\");\r\nconst copyReferLinkBtns = document.querySelectorAll(\".refer-link\");\r\n// async function populateReferrerOf(userAddress) {\r\nasync function populateReferrerLinkinHTML(userAddress) {\r\n    let referrerValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) referrerValue = await getReferrer(userAddress);\r\n    const referrerFields = document.querySelectorAll('.refer-referrer');\r\n    referrerFields.forEach(el => {\r\n        // in this example - the userAddress = logged out\r\n        el.innerHTML = referrerValue;\r\n    });\r\n\r\n    // uncomment the below line - to check if the addReferrerBtn will show when the reffere is 0x00...00 or not\r\n    // referrerValue = '0x0000000000000000000000000000000000000000'\r\n    /**\r\n     * if referrer is 0x0000000000000000000000000000000000000000\r\n     * then show the ability to change / setReferrer\r\n     * else keep it hidden\r\n     */\r\n    const defaultReferrer = '0x0000000000000000000000000000000000000000';\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    if (referrerValue === defaultReferrer) setRefferrerBtn.classList.remove('hidden')\r\n    else setRefferrerBtn.classList.add('hidden')\r\n}\r\n\r\n\r\nasync function getReferrer(userAddress) {\r\n    const ABI_getReferrer = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferrer',\r\n        abi: ABI_getReferrer,\r\n        params: {\r\n            _user: userAddress,\r\n        }\r\n    }\r\n\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nasync function populateUserReferralsCount(userAddress) {\r\n    let countValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) countValue = await getReferralsCount(userAddress);\r\n    const referrerFields = document.querySelectorAll('.refer-total');\r\n    referrerFields.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = countValue;\r\n    });\r\n}\r\n\r\n// //the address with with Referrer not 0x000 (provided by Jagjeet)\r\n// const addressWithReferrerNot0x000 = '0x0B277AbA422fD3d1e38e93aFfe684B68fc001647'\r\n\r\nasync function getReferralsCount(userAddress) {\r\n    const ABI_referralsCount = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userReferralsCount\", \"type\": \"address\" }], \"name\": \"getReferralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    // //the address with count=1 (provided by Jagjeet)\r\n    // userAddress = '0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0';\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferralsCount',\r\n        abi: ABI_referralsCount,\r\n        params: {\r\n            _userReferralsCount: userAddress,\r\n        }\r\n    }\r\n\r\n    let r = ''\r\n    try {\r\n        r = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        r = 'error-ln99-app'\r\n        console.error(error);\r\n    }\r\n\r\n    return r\r\n}\r\n\r\nasync function addReferrer() {\r\n    const referrerAddress = document.querySelector('#add-referrer-address');\r\n    const errContainer = document.querySelector('#add-referrer-err');\r\n    const errMsgContainer = document.querySelector('#add-referrer-msg');\r\n\r\n    if (!referrerAddress.value) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Empty Field!');\r\n        return;\r\n    } else if (referrerAddress.value.length <= 6) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!');\r\n        return;\r\n    }\r\n    // at this point the refer address isn't empty and length is > 6 characters\r\n\r\n    try {\r\n        let result = await setReferAddress(referrerAddress.value);\r\n        populateReferrerLinkinHTML(getUserWalletAddress());\r\n        console.log(result);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!!!');\r\n    }\r\n}\r\nasync function setReferAddress(referrerAddress) {\r\n\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"referAddress\", \"type\": \"address\" }], \"name\": \"addReferAddress\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }];\r\n    console.log(`setReferAddress to - ${referrerAddress}`);\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'addReferAddress',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            referAddress: referrerAddress,\r\n        }\r\n    }\r\n\r\n    let transaction;\r\n    try {\r\n        await Moralis.enableWeb3();\r\n        transaction = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return await transaction.wait();\r\n}\r\n\r\nasync function populateUserReferralComissions(userAddress) {\r\n    let commissionValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) commissionValue = await getTotalReferralCommissions(userAddress);\r\n    commissionValue = commissionValue / Math.pow(10, 9);\r\n\r\n    const commssionFields = document.querySelectorAll('.refer-earning');\r\n    commssionFields.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = `${commissionValue} IBAT`;\r\n    });\r\n}\r\n\r\nasync function getTotalReferralCommissions(userAddress) {\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userCommission\", \"type\": \"address\" }], \"name\": \"getTotalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getTotalReferralCommissions',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            _userCommission: userAddress,\r\n        }\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction copyReferLink() {\r\n    // get the referralLink\r\n    /**\r\n        if user logged in - show the box \r\n        else nothing OR hide the box at logout\r\n    * \r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    // store it in variable\r\n    let USER_RefferalLink = `url/${userAddress}`;\r\n    populateReferralLinkinHTML(USER_RefferalLink);\r\n\r\n    navigator.clipboard.writeText(USER_RefferalLink);\r\n\r\n    // console.log(`copied`);\r\n    // populateReferralLinkinHTML('bkahs.gffggffgfggfgffgghjjhjhhjhjhjhjhjjhhhjhjhhjhjhjhhhhhhhhhhhhhhhhhhhhhs');\r\n}\r\nfunction populateReferralLinkinHTML(referralLink) {\r\n    const linkNodes = document.querySelectorAll('.refer-link-text');\r\n    linkNodes.forEach(el => {\r\n        el.innerHTML = referralLink;\r\n    });\r\n}\r\n// copyReferLinkBtn.onclick = copyReferLink;\r\ncopyReferLinkBtns.forEach(el => (el.onclick = copyReferLink))\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * *******************************    WEB3    *******************************\r\n */\r\n// Connecting with Metamask Wallet\r\n// const serverUrl = \"https://cbdyvlhyonhj.usemoralis.com:2053/server\"; //BSC mainnet\r\n// const appId = \"PC04t9NTMGlWn2p5EGf8ukAZbNaZbA1PWrv7IlaC\"; //BSC mainnet\r\n\r\nconst serverUrl = \"https://tdwibddr7hmu.usemoralis.com:2053/server\"; //BSC testnet\r\nconst appId = \"pxANj4iAZAqjimgleq7f5iKzPE3rKJXoFtaMfzYc\"; //BSC testnet\r\n\r\n\r\n\r\nconst CONTRACT_ADDRESS_TESTNET = '0xf8992AE362561427602A50aff0f84085d1fd88f7';\r\nconst REFER_CONTRACT_ADDRESS_TESTNET = '0xfe2E124FE1418419A9efd8Ba987Fa1769D506c8a';\r\nconst referABI = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"referralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"totalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }]\r\nconst referOptions = {\r\n    contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n    abi: referABI,\r\n};\r\n\r\nlet currentChainIdHex; //default chain set to ETH\r\ntry {\r\n    console.info(`starting server...ln310 \\n serverURL : ${serverUrl}`);\r\n    Moralis.start({ serverUrl, appId });\r\n} catch (error) {\r\n    console.error(`Server failed to start -ln312`);\r\n    console.log(error);\r\n}\r\n\r\nconst walletOptions = document.getElementById(\"wallet-options\");\r\nconst loginBtn = document.getElementById(\"web3-login-mm\");\r\nconst logoutBtn = document.getElementById(\"web3-logout\");\r\nconst showTokenBtn = document.getElementById(\"web3-tokens\");\r\n\r\nconst showAddress = document.getElementById(\"web3-wallet-address\");\r\n\r\n// let web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\r\nconst NODE_URL = \"https://speedy-nodes-nyc.moralis.io/d633c685eb50e4bb5f7bdcf8/bsc/testnet\";\r\nlet provider = new Web3.providers.HttpProvider(NODE_URL);\r\nconsole.log(`ln-329 Provider = `);\r\nconsole.log(provider);\r\nlet web3 = new Web3(provider);\r\n// let web3 = '';\r\n\r\n\r\nfunction atLogin() {\r\n    /**\r\n    * 1. show referral box - toggle visibility of it\r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    let USER_RefferalLink = `url/${userAddress}`;\r\n    if (presalePasswordEntered) {\r\n        populateReferralLinkinHTML(USER_RefferalLink);\r\n        populateReferrerLinkinHTML(userAddress);\r\n        populateUserReferralComissions(userAddress);\r\n        populateUserReferralsCount(userAddress);\r\n        // populateUserReferralComissions('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n        // populateUserReferralsCount('0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0');\r\n    }\r\n    // toggles the visibility of connect & disconnect button\r\n    if (isUserConnected()) toggleBtnVisibility(true);\r\n}\r\n\r\n\r\nasync function login(provider) {\r\n    // const BscChainId = \"0x38\"; //Bsc Mainnet ID\r\n    const BscChainId = \"0x61\"; //Bsc Testnet ID\r\n\r\n    console.log(`ln-358 Provider:`);\r\n    console.log(provider);\r\n\r\n    let user = Moralis.User.current();\r\n\r\n    if (!user) {\r\n        // console.log(`Provider :${provider} : ${provider === 'walletconnect'}`);\r\n        if (provider === 'walletconnect') {\r\n            try {\r\n                console.error(`Authenticating with WalletConnect ... ln-367`);\r\n                user = await Moralis.Web3.authenticate({ provider: \"walletconnect\" });\r\n                // user = await Moralis.Web3.authenticate({ provider: \"walletconnect\", chainId: BscChainId });\r\n                await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n            } catch (error) {\r\n                console.error(`Authentication Failed - Walletconnect - ln`);\r\n                console.error(error);\r\n            }\r\n        } else {\r\n            try {\r\n                console.error(`Authenticating with MetaMask... ln-376`);\r\n                user = await Moralis.Web3.authenticate();\r\n                await Moralis.enableWeb3();\r\n                currentChainIdHex = await Moralis.switchNetwork(BscChainId);\r\n            } catch (error) {\r\n                console.error(`Authentication Failed - MetaMask`);\r\n                console.error(error);\r\n            }\r\n        }\r\n\r\n        web3 = new Web3(provider || Moralis.provider || Web3.givenProvider || \"ws://localhost:8545\")\r\n        // web3 = new Web3(Moralis.provider || Web3.givenProvider || \"ws://localhost:8545\")\r\n\r\n    }\r\n    currentChainIdHex = await Moralis.getChainId();\r\n    // await Moralis.enableWeb3();\r\n\r\n    atLogin()\r\n    // moved the below two lines inside atLogin()\r\n    // // toggles the visibility of connect & disconnect button\r\n    // toggleBtnVisibility(true);\r\n\r\n    showAddress.dataset.tip = user.get(\"ethAddress\");\r\n    getBalance(currentChainIdHex, user.get(\"ethAddress\"));\r\n\r\n    // Below address is on both BSC & ETH Scan - \r\n    // getBalance('0x1', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // eth chain\r\n    // getBalance('0x38', '0x66A2C7B0d4Da7E699f6dD27f89b49AB15b0A51e8'); // bsc chain - this account has BUSD in it\r\n}\r\n\r\n\r\nfunction getUserWalletAddress() {\r\n    let err = 'Logged Out';\r\n    if (!isUserConnected())\r\n        return err;\r\n\r\n    return Moralis.User.current().get(\"ethAddress\");\r\n\r\n}\r\nfunction isUserConnected() {\r\n    let user = Moralis.User.current();\r\n    return user ? true : false;\r\n}\r\n\r\nasync function logOut() {\r\n    await Moralis.User.logOut();\r\n    // console.log(\"logged out\");\r\n    // toggleBtnVisibility(false);\r\n    // showAddress.dataset.tip = 'Wallet not connected';\r\n    atLogout()\r\n}\r\nfunction atLogout() {\r\n    /**\r\n     * 1. hide referral box\r\n     */\r\n    // need to \r\n    // presalePasswordEntered = false;\r\n\r\n    populateReferralLinkinHTML('Logged Out');\r\n    populateReferrerLinkinHTML('Logged Out')\r\n    populateUserReferralComissions('0');\r\n    populateUserReferralsCount(0);\r\n\r\n    // hiding addreferrer btn when logging out\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    setRefferrerBtn.classList.add('hidden')\r\n\r\n    toggleBtnVisibility(false);\r\n    showAddress.dataset.tip = 'Wallet not connected';\r\n    showArenaLock(true);\r\n}\r\n\r\n\r\nasync function getBalance(chainId, address) {\r\n    const tokenList = document.getElementById('token-list');\r\n    currentChainIdHex = await Moralis.getChainId();\r\n    let currentUser = Moralis.User.current();\r\n    let currentUserAddress = currentUser.get(\"ethAddress\");\r\n    const options = { chain: chainId || currentChainIdHex || '0x38', address: address || currentUserAddress || \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" };\r\n    // console.log(`getBalance called with \\n chaidId ${options.chain} and \\n of address: ${options.address}`);\r\n    // const options = { chain: 'eth', address: \"0x9d51fd1a308c073f2f06a7181ad90c6d6ab5e9d7\" } // test address from Etherscan\r\n    // const options = { chain: 'bsc', address: \"0x60913d3fE722bFE425247D7673D8bdbDA56D1e02\" } // test address from BSC (bscscan)\r\n\r\n    const nativeBal = await Moralis.Web3API.account.getNativeBalance(options);\r\n\r\n    tokenList.innerHTML = `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto mt-2\"><span class=\"w-1/2 text-center\">${HEX_TO_CHAIN_DETAILS[currentChainIdHex].nativeToken}</span><span class=\"w-1/2 text-left\">${web3.utils.fromWei(nativeBal.balance)}</span></li>`\r\n\r\n    const balances = await Moralis.Web3API.account.getTokenBalances(options);\r\n\r\n    if (balances.length) {\r\n        balances.forEach(token => {\r\n            // console.log(`not - ${token.symbol}`);\r\n            if (token.symbol == 'USDC' || token.symbol == 'BUSD' || token.symbol == 'IBAT') {\r\n                const balance = convertTokenBalance(token.balance, token.decimals);\r\n                // const tokenFromWei = web3.utils.fromWei(token.balance)\r\n                tokenList.innerHTML += `<li class=\"pr-2 flex justify-between w-full md:w-1/2 mx-auto\"><span class=\"w-1/2 text-center\">${token.symbol}</span><span class=\"w-1/2 text-left\">${balance}</span></li>`\r\n            }\r\n        });\r\n    } else {\r\n        tokenList.innerHTML += `<li class=\"w-full text-center mx-auto text-xs opacity-80 mt-2\">no other tokens available</li>`\r\n    }\r\n}\r\n\r\n\r\nfunction toggleBtnVisibility(connected) {\r\n    const allBtns = document.querySelectorAll('.wallet-options-btn ');\r\n    if (connected) { //show\r\n        // loginBtn.classList.add('hidden');\r\n        allBtns.forEach(btn => {\r\n            btn.classList.add('hidden');\r\n        });\r\n        // walletOptions.classList.add('hidden');\r\n        logoutBtn.classList.remove('hidden');\r\n        showTokenBtn.classList.remove('hidden');\r\n    }\r\n    else {\r\n        // loginBtn.classList.remove('hidden');\r\n        // walletOptions.classList.remove('hidden');\r\n        allBtns.forEach(btn => {\r\n            btn.classList.remove('hidden');\r\n        });\r\n        logoutBtn.classList.add('hidden');\r\n        showTokenBtn.classList.add('hidden');\r\n    }\r\n}\r\n\r\n\r\nfunction convertTokenBalance(balance, decimals) {\r\n    let newBalance = balance == 0 ? 0 : balance / Math.pow(10, decimals);\r\n    newBalance = newBalance < 0.001 ? 0 : newBalance;\r\n    return newBalance;\r\n}\r\n\r\nasync function isPresaleOpen() {\r\n    await Moralis.enableWeb3();\r\n    const ABI = [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    const result = await readFunction('isPresaleOpen', ABI);\r\n    // console.log(`isPresaleOpen = ${result}`);\r\n}\r\n\r\n// isPresaleOpen();\r\n\r\nasync function readFunction(functionName, ABI) {\r\n    // let options = {\r\n    //     contractAddress: '0x356d2E7a0d592bAd95E86d19479c37cfdBb68Ab9',\r\n    //     functionName: 'isPresaleOpen',\r\n    //     abi: [{ \"inputs\": [], \"name\": \"isPresaleOpen\", \"outputs\": [{ \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" }], \"stateMutability\": \"view\", \"type\": \"function\" }],\r\n    //     Params: {\r\n    //         Note: 'Thanks for your work'\r\n    //     },\r\n    //     msgValue: Moralis.Units.ETH(0.1)\r\n    // }\r\n    let options = {\r\n        contractAddress: CONTRACT_ADDRESS_TESTNET,\r\n        functionName: functionName,\r\n        abi: ABI,\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction getBuyAmount() {\r\n    // @todo: validate input\r\n    let buyAmount = 0;\r\n    const buyAmounts = document.querySelectorAll('.buy-amount');\r\n    // console.log(buyAmounts.length);\r\n\r\n    // const buyAmountMob = document.getElementById(\"buy-amount-mobile\");\r\n    // const buyAmountDesktop = document.getElementById(\"buy-amount-desktop\");\r\n    // if (buyAmountMob.classList.contains(hidden))\r\n    buyAmounts.forEach(el => {\r\n        if (el.value) {\r\n            // console.log(`${el.value}`);\r\n            buyAmount = +el.value;\r\n        }\r\n    });\r\n    // console.log(+buyAmount);\r\n    return buyAmount;\r\n}\r\nasync function buyToken() {\r\n    // console.log('Ran buyToken()');\r\n    let value = getBuyAmount();\r\n    // console.log(value);\r\n\r\n    await Moralis.enableWeb3();\r\n    if (!isUserConnected()) {\r\n        console.log('User not Logged in - connect wallet');\r\n        return;\r\n    }\r\n\r\n\r\n    const FUNCTION_NAME = 'buyToken';\r\n    const ABI = [{ \"inputs\": [], \"name\": \"buyToken\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"payable\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: CONTRACT_ADDRESS_TESTNET,\r\n        functionName: FUNCTION_NAME,\r\n        abi: ABI,\r\n        msgValue: Moralis.Units.ETH(value)\r\n    }\r\n    let result;\r\n    try {\r\n        result = await Moralis.executeFunction(options);\r\n        // console.log(`Result \\n${result}`);\r\n    } catch (error) {\r\n        const errMsg = document.getElementById('buy-token-error-msg');\r\n        errMsg.innerHTML = error.data.message;\r\n        toggleErrMsg();\r\n    }\r\n}\r\nfunction toggleErrMsg() {\r\n    const errMsg = document.getElementById('buy-token-error-input');\r\n    errMsg.checked = !errMsg.checked;\r\n}\r\n\r\n\r\nloginBtn.onclick = login;\r\nlogoutBtn.onclick = logOut;\r\n// showTokenBtn.onclick = getBalance;\r\n\r\nconst HEX_TO_CHAIN_DETAILS = {\r\n    '0x1': {\r\n        chain: 'ETH',\r\n        nativeToken: 'ETH'\r\n    },\r\n    '0x61': {\r\n        // BSC testnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n    ,\r\n    '0x38': {\r\n        // BSC mainnet\r\n        chain: 'BSC',\r\n        nativeToken: 'BNB'\r\n    }\r\n}\r\n\r\n"],"names":["loader","document","getElementById","navItems","querySelectorAll","navigateTo","el","itemToShow","forEach","item","classList","contains","add","remove","setTimeout","hideSwap","elId","hide","querySelector","style","visibility","authenticatePresale","isUserConnected","showPasswordErrMsg","userEnteredPassword","value","presalePasswordEntered","atLogin","showArenaLock","innerHTML","msg","passwordErrMsg1","passwordErrMsg","showErrMsg","elContainer","msgContainer","hideErrMsg","show","arenaLock","populateReferrerLinkinHTML","userAddress","referrerValue","getReferrer","setRefferrerBtn","options","contractAddress","REFER_CONTRACT_ADDRESS_TESTNET","functionName","abi","inputs","internalType","name","type","outputs","stateMutability","_user","Moralis","executeFunction","populateUserReferralsCount","countValue","getReferralsCount","params","_userReferralsCount","r","console","error","addReferrer","referrerAddress","errContainer","errMsgContainer","length","result","setReferAddress","getUserWalletAddress","log","transaction","referAddress","enableWeb3","wait","populateUserReferralComissions","commissionValue","getTotalReferralCommissions","Math","pow","_userCommission","copyReferLink","USER_RefferalLink","populateReferralLinkinHTML","navigator","clipboard","writeText","referralLink","onclick","referOptions","referABI","currentChainIdHex","info","serverUrl","start","appId","loginBtn","logoutBtn","showTokenBtn","Web3","providers","HttpProvider","NODE_URL","provider","web3","toggleBtnVisibility","login","provider1","User","current","user","authenticate","error1","switchNetwork","error2","givenProvider","getChainId","showAddress","dataset","tip","get","logOut","atLogout","getBalance","chainId","address","tokenList","chain","currentUserAddress","nativeBal","Web3API","account","getNativeBalance","HEX_TO_CHAIN_DETAILS","nativeToken","utils","fromWei","balance","getTokenBalances","balances","token","symbol","convertTokenBalance","decimals","connected","allBtns","btn","newBalance","isPresaleOpen","readFunction","async","ABI","CONTRACT_ADDRESS_TESTNET","getBuyAmount","buyAmount","msgValue","Units","ETH","error3","data","message","toggleErrMsg","errMsg","checked"],"version":3,"file":"dapp.98a64611.js.map"}