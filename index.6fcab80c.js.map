{"mappings":"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","sources":["src/js/referralHandler.js"],"sourcesContent":["\r\n// const copyReferLinkBtn = document.getElementById(\"refer-link-icon\");\r\nconst copyReferLinkBtns = document.querySelectorAll(\".refer-link\");\r\nconst DECIMALS = +18;\r\n// async function populateReferrerOf(userAddress) {\r\nconst defaultReferrer = '0x0000000000000000000000000000000000000000';\r\nasync function populateReferrerinHTML(userAddress) {\r\n    console.log(`populateReferrerinHTML - ${userAddress}`);\r\n    let referrerValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) referrerValue = await getReferrer(userAddress);\r\n    // show referrer value only if it's not default : i.e. something other than 0x00...0\r\n\r\n    const referrerField = document.querySelector('.refer-referrer');\r\n    // if (referrerValue !== defaultReferrer) {\r\n    console.log(`dev:Setting Referrer Field`);\r\n    if (referrerField) {\r\n        referrerField.value = referrerValue;\r\n    } else {\r\n        console.error(`dev:referrerField missing`);\r\n    }\r\n    // const referrerFields = document.querySelectorAll('.refer-referrer');\r\n    // const referrerFieldsContainer = document.querySelectorAll('.refer-referrer-container');\r\n    // referrerFieldsContainer && referrerFieldsContainer.forEach(el => {\r\n    //     el.classList.remove('hidden');\r\n    // });\r\n    // referrerFields && referrerFields.forEach(el => {\r\n    //     // in this example - the userAddress = logged out\r\n    //     el.value = referrerValue;\r\n    // });\r\n    // }\r\n\r\n    // uncomment the below line - to check if the addReferrerBtn will show when the reffere is 0x00...00 or not\r\n    // referrerValue = '0x0000000000000000000000000000000000000000'\r\n    /**\r\n     * if referrer is 0x0000000000000000000000000000000000000000\r\n     * then show the ability to change / setReferrer\r\n     * else keep it hidden\r\n     */\r\n    const setRefferrerBtn = document.querySelector('#add-referrer');\r\n    if (setRefferrerBtn) {\r\n        if (referrerValue === defaultReferrer) setRefferrerBtn.classList.remove('hidden')\r\n        else setRefferrerBtn.classList.add('hidden')\r\n    }\r\n    const addReferrerBtn = document.getElementById('add-referrer-btn');\r\n    const addReferrerInput = document.getElementById('add-referrer-address');\r\n    if (referrerValue !== defaultReferrer) {\r\n        disableButton(addReferrerBtn);\r\n        disableButton(addReferrerInput);\r\n    }\r\n}\r\n\r\n\r\nasync function getReferrer(userAddress) {\r\n    const ABI_getReferrer = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_user\", \"type\": \"address\" }], \"name\": \"getReferrer\", \"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferrer',\r\n        abi: ABI_getReferrer,\r\n        params: {\r\n            _user: userAddress,\r\n        }\r\n    }\r\n\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nasync function populateUserReferralsCount(userAddress) {\r\n    let countValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) countValue = await getReferralsCount(userAddress);\r\n    const referrerFields = document.querySelectorAll('.refer-total');\r\n    referrerFields && referrerFields.forEach(el => {\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = countValue;\r\n    });\r\n}\r\n\r\n// //the address with with Referrer not 0x000 (provided by Jagjeet)\r\n// const addressWithReferrerNot0x000 = '0x0B277AbA422fD3d1e38e93aFfe684B68fc001647'\r\n\r\nasync function getReferralsCount(userAddress) {\r\n    const ABI_referralsCount = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userReferralsCount\", \"type\": \"address\" }], \"name\": \"getReferralsCount\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n\r\n    // //the address with count=1 (provided by Jagjeet)\r\n    // userAddress = '0x361c26aDc02Ade99735E2A7F38606F2ec56cc1B0';\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getReferralsCount',\r\n        abi: ABI_referralsCount,\r\n        params: {\r\n            _userReferralsCount: userAddress,\r\n        }\r\n    }\r\n\r\n    let r = ''\r\n    try {\r\n        r = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        r = 'error-ln99-app'\r\n        console.error(error);\r\n    }\r\n\r\n    return r\r\n}\r\n\r\nasync function addReferrer() {\r\n    const referrerAddress = document.querySelector('#add-referrer-address');\r\n    const errContainer = document.querySelector('#buy-token-error-con');\r\n    const errMsgContainer = document.querySelector('#buy-token-error-msg');\r\n    // const errContainer = document.querySelector('#add-referrer-err');\r\n    // const errMsgContainer = document.querySelector('#add-referrer-msg');\r\n    // let refAdd = referrerAddress.value + '';\r\n    // refAdd = refAdd.toLowerCase();\r\n\r\n\r\n\r\n    // console.log(referrerAddress);\r\n    // console.log(referrerAddress.value);\r\n\r\n    /**\r\n     * if the existing referrer field is populated and is equal to default referrer then show error.\r\n     */\r\n    if (referrerAddress && !referrerAddress.value) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Empty Referrer Address Field!');\r\n        return;\r\n    } else if (referrerAddress && referrerAddress.value.length <= 6) {\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!');\r\n        return;\r\n    } else if (isUserConnected) {\r\n        await Moralis.enableWeb3();\r\n        if (!isUserConnected()) {\r\n            showErrMsg(errContainer, errMsgContainer, 'Wallet not connected!');\r\n            return;\r\n        }\r\n    } else {\r\n        console.error(`referrerAddress#add-referrer-address missing`);\r\n        // return;\r\n    }\r\n\r\n    const existingReferrerValue = document.querySelector('.refer-referrer').value;\r\n    console.log(existingReferrerValue);\r\n    console.log(existingReferrerValue !== defaultReferrer);\r\n    console.log(defaultReferrer);\r\n    if (existingReferrerValue !== defaultReferrer) {\r\n        console.log(`======= ${existingReferrerValue}`);\r\n        showErrMsg(errContainer, errMsgContainer, 'Referrer Address already setup!');\r\n        return;\r\n    }\r\n    // at this point the refer address exists, isn't empty and length is > 6 characters\r\n\r\n    try {\r\n        let result = await setReferAddress(referrerAddress.value);\r\n        // let result = await setReferAddress(refAdd);\r\n        populateReferrerinHTML(getUserWalletAddress());\r\n        console.log(result);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        showErrMsg(errContainer, errMsgContainer, 'Invalid Address!!!');\r\n    }\r\n}\r\nasync function setReferAddress(referrerAddress) {\r\n\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"referAddress\", \"type\": \"address\" }], \"name\": \"addReferAddress\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }];\r\n    console.log(`setReferAddress to - ${referrerAddress}`);\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'addReferAddress',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            referAddress: referrerAddress,\r\n        }\r\n    }\r\n\r\n    let transaction;\r\n    try {\r\n        transaction = await Moralis.executeFunction(options);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n\r\n    return await transaction.wait();\r\n}\r\n\r\nasync function populateUserReferralComissions(userAddress) {\r\n    console.log(`Getting commission of: ${userAddress}`);\r\n    let commissionValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) commissionValue = await getTotalReferralCommissions(userAddress);\r\n    commissionValue = commissionValue / Math.pow(10, DECIMALS);\r\n\r\n    const commssionFields = document.querySelectorAll('.refer-earning');\r\n    commssionFields && commssionFields.forEach(el => {\r\n        console.log(`Setting commission to: ${commissionValue}`);\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = `${commissionValue} IBAT`;\r\n    });\r\n}\r\n\r\nasync function getTotalReferralCommissions(userAddress) {\r\n    const ABI_totalReferralCommissions = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"_userCommission\", \"type\": \"address\" }], \"name\": \"getTotalReferralCommissions\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }];\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'getTotalReferralCommissions',\r\n        abi: ABI_totalReferralCommissions,\r\n        params: {\r\n            _userCommission: userAddress,\r\n        }\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nasync function populateUsersInvestments(userAddress) {\r\n    console.log(`Getting commission of: ${userAddress}`);\r\n    let investmentValue = userAddress; //which will be 'logged out' if user is logged out\r\n    // if user is logged-in we change the value of refferValue\r\n    if (isUserConnected()) investmentValue = await getUsersInvestments(userAddress);\r\n    investmentValue = investmentValue / Math.pow(10, DECIMALS);\r\n\r\n    const investmentFields = document.querySelectorAll('.user-investment');\r\n    investmentFields && investmentFields.forEach(el => {\r\n        console.log(`Setting investment to: ${investmentValue}`);\r\n        // in this example - the countValue = 0\r\n        el.innerHTML = `${investmentValue} IBAT`;\r\n    });\r\n}\r\n\r\nconst refreshUsersInvestmentBtn = document.getElementById('refreshUsersInvestmentsBtn');\r\nif (refreshUsersInvestmentBtn) {\r\n    refreshUsersInvestmentBtn.onclick = refreshUsersInvestments;\r\n} else {\r\n    console.error(`Refresh UserInvestmentBtn missing in UI`);\r\n}\r\n\r\nfunction refreshUsersInvestments() {\r\n    console.log(`refresh usersInvestments`);\r\n    if (!isUserConnected()) return;\r\n    try {\r\n        populateUsersInvestments(getUserWalletAddress());\r\n        // console.log(`done refresh after buying - populateUsersInvestments`);\r\n    } catch (error) {\r\n        console.error(`failed refresh after buying - populateUsersInvestments`);\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function getUsersInvestments(userAddress) {\r\n    const ABI_usersInvestments = [{ \"inputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }], \"name\": \"usersInvestments\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"stateMutability\": \"payable\", \"type\": \"receive\" }];\r\n\r\n    let options = {\r\n        contractAddress: REFER_CONTRACT_ADDRESS_TESTNET,\r\n        functionName: 'usersInvestments',\r\n        abi: ABI_usersInvestments,\r\n        params: {\r\n            \"\": userAddress,\r\n        }\r\n    }\r\n    return await Moralis.executeFunction(options);\r\n}\r\n\r\nfunction copyReferLink() {\r\n    // get the referralLink\r\n    /**\r\n        if user logged in - show the box \r\n        else nothing OR hide the box at logout\r\n    * \r\n    */\r\n    let userAddress = getUserWalletAddress();\r\n    // store it in variable\r\n    const URL_Prefix = 'https://presale.battleinfinity.io/?refercode='\r\n    let USER_RefferalLink = `${URL_Prefix}${userAddress}`;\r\n    populateReferralLinkinHTML(USER_RefferalLink);\r\n\r\n    navigator.clipboard.writeText(USER_RefferalLink);\r\n\r\n    // console.log(`copied`);\r\n    // populateReferralLinkinHTML('bkahsasdasd');\r\n}\r\nfunction populateReferralLinkinHTML(referralLink) {\r\n    const linkNodes = document.querySelectorAll('.refer-link-text');\r\n    linkNodes && linkNodes.forEach(el => {\r\n        el.innerHTML = referralLink;\r\n        el.value = referralLink;\r\n    });\r\n}\r\n// copyReferLinkBtn.onclick = copyReferLink;\r\ncopyReferLinkBtns.forEach(el => (el.onclick = copyReferLink))\r\n"],"names":["copyReferLinkBtns","document","querySelectorAll","DECIMALS","defaultReferrer","populateReferrerinHTML","userAddress","console","log","referrerValue","isUserConnected","getReferrer","referrerField","querySelector","value","error","setRefferrerBtn","classList","remove","add","addReferrerBtn","getElementById","addReferrerInput","disableButton","options","REFER_CONTRACT_ADDRESS_TESTNET","functionName","abi","internalType","name","type","stateMutability","params","_user","Moralis","executeFunction","populateUserReferralsCount","countValue","getReferralsCount","referrerFields","forEach","el","innerHTML","_userReferralsCount","r","addReferrer","referrerAddress","errContainer","errMsgContainer","showErrMsg","length","enableWeb3","existingReferrerValue","result","setReferAddress","getUserWalletAddress","transaction","contractAddress","inputs","outputs","referAddress","wait","populateUserReferralComissions","commissionValue","getTotalReferralCommissions","Math","pow","commssionFields","_userCommission","populateUsersInvestments","investmentValue","getUsersInvestments","investmentFields","refreshUsersInvestmentBtn","refreshUsersInvestments","copyReferLink","USER_RefferalLink","populateReferralLinkinHTML","navigator","clipboard","writeText","onclick"],"version":3,"file":"index.6fcab80c.js.map"}